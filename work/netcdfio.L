NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME : /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

  COMPILER OPTIONS : -stdlib=compat -DADCNETCDF -I/include -DHAVE_NETCDF4 -DDATETIME -c -I. -I/S/home01/G6012/d0954/DATA/model_run/adcirc_src/prep -O3 -fextend-source -report-all -finline-functions -finline-max-function-size=200 -finline-file=/S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/nodalattr.F -DES_TUNE -DADCNETCDF -I/include -DHAVE_NETCDF4 -DDATETIME -DREAL8 -DLINUX -DCSCA -DCMPI -I /S/home01/G6012/d0954/DATA/model_run/adcirc_src/work/odir4/ -I/S/home01/G6012/d0954/util/datetime/datetime-fortran/include -o /S/home01/G6012/d0954/DATA/model_run/adcirc_src/work/odir4/netcdfio.o -fpp -DMPI_REAL2=NEC_MPI_BINARY16 -Dmpi_real2=NEC_MPI_BINARY16 -DNEC_MPI_FLOAT16_INT=NEC_MPI_BINARY16_INT -Dnec_mpi_float16_int=NEC_MPI_BINARY16_INT -DMPI_2REAL2=NEC_MPI_2BINARY16 -Dmpi_2real2=NEC_MPI_2BINARY16 -proginf -I/opt/nec/ve/mpi/3.6.0/lib64/ve/module -I/opt/nec/ve/mpi/3.6.0/include

  PARAMETER :

      Optimization Options :
        -On                                      : 3
        -fargument-alias                         : disable
        -fargument-noalias                       : enable
        -fassociative-math                       : enable
        -faggressive-associative-math            : disable
        -fassume-contiguous                      : disable
        -fcopyin-intent-out                      : enable
        -fcse-after-vectorization                : enable
        -ffast-formatted-io                      : enable
        -ffast-math                              : enable
        -ffast-math-check                        : disable
        -fignore-asynchronous                    : disable
        -fignore-induction-variable-overflow     : disable
        -fignore-volatile                        : disable
        -fivdep                                  : disable
        -fivdep-omp-worksharing-loop             : disable
        -floop-collapse                          : enable
        -floop-count                             : 5000
        -floop-fusion                            : enable
        -floop-interchange                       : enable
        -floop-normalize                         : enable
        -floop-split                             : disable
        -floop-strip-mine                        : enable
        -floop-unroll                            : enable
        -floop-unroll-complete                   : 4
        -floop-unroll-complete-nest              : 3
        -floop-unroll-max-times                  : auto
        -fmatrix-multiply                        : enable
        -fmove-loop-invariants                   : enable
        -fmove-loop-invariants-if                : enable
        -fmove-loop-invariants-unsafe            : disable
        -fmove-nested-loop-invariants-outer      : enable
        -fnamed-alias                            : disable
        -fnamed-noalias                          : enable
        -fnamed-noalias-aggressive               : disable
        -fouterloop-unroll                       : enable
        -fouterloop-unroll-max-size              : 4
        -fouterloop-unroll-max-times             : 4
        -fprecise-math                           : disable
        -freciprocal-math                        : enable
        -freorder-logical-expression             : enable
        -freplace-loop-equation                  : disable
        -freplace-matmul-to-matrix-multiply      : enable
        -marray-io                               : enable
        -mconditional-index-test                 : enable
        -mlist-vector                            : disable
        -mretain-'keyword'                       : all
        -msched-'keyword'                        : block
        -mstack-arrays                           : enable
        -mvector                                 : enable
        -mvector-advance-gather                  : enable
        -mvector-advance-gather-limit            : 56
        -mvector-assignment-threshold            : 64
        -mvector-dependency-test                 : enable
        -mvector-floating-divide-instruction     : disable
        -mvector-fma                             : enable
        -mvector-intrinsic-check                 : disable
        -mvector-iteration                       : enable
        -mvector-iteration-unsafe                : enable
        -mvector-loop-count-test                 : disable
        -mvector-low-precise-divide-function     : disable
        -mvector-merge-conditional               : enable
        -mvector-neighbors                       : disable
        -mvector-packed                          : disable
        -mvector-power-to-explog                 : disable
        -mvector-power-to-sqrt                   : enable
        -mvector-reduction                       : enable
        -mvector-shortloop-reduction             : disable
        -mvector-sqrt-instruction                : disable
        -mvector-threshold                       : 5
        -mwork-vector-kind=none                  : disable

      Parallelization Options :
        -fopenmp                                 : disable
        -mparallel                               : disable
        -mparallel-innerloop                     : disable
        -mparallel-omp-routine                   : enable
        -mparallel-outerloop-strip-mine          : disable
        -mparallel-sections                      : disable
        -mparallel-threshold                     : 2000
        -mschedule-dynamic                       : disable
        -mschedule-runtime                       : disable
        -mschedule-static                        : disable
        -mschedule-chunk-size                    : 0
        -pthread                                 : disable

      Inlining Options :
        -finline-copy-arguments                  : enable
        -finline-functions                       : enable
        -finline-max-depth                       : 2
        -finline-max-function-size               : 200
        -finline-max-times                       : 6

      Code Generation Options :
        -finstrument-functions                   : disable
        -fpic | -fPIC                            : disable
        -ftrace                                  : disable
        -march                                   : ve1
        -mfp16-format                            : none
        -p                                       : disable

      Debugging Options :
        -fbounds-check                           : disable
        -fcheck=all                              : disable
        -fcheck=alias                            : disable
        -fcheck=bits                             : disable
        -fcheck=bounds                           : disable
        -fcheck=dangling                         : disable
        -fcheck=do                               : disable
        -fcheck=iovf                             : disable
        -fcheck=pointer                          : disable
        -fcheck=present                          : disable
        -fcheck=recursion                        : disable
        -g                                       : disable
        -minit-stack                             : no
        -mmemory-trace                           : disable
        -mmemory-trace-full                      : disable
        -traceback                               : disable

      Language Options :
        -bss                                     : disable
        -fdefault-integer                        : 4
        -fdefault-double                         : 8
        -fdefault-real                           : 4
        -fextend-source                          : enable
        -ffree-form                              : disable
        -ffixed-form                             : enable
        -ff90-sign                               : disable
        -fmax-continuation-lines                 : 1023
        -frealloc-lhs-array                      : enable
        -frealloc-lhs-scalar                     : enable
        -save                                    : disable
        -std                                     : Fortran 2008

      Message Options :
        -Wall                                    : disable
        -Werror                                  : disable
        -Wextension                              : enable
        -Wobsolescent                            : enable
        -Woverflow                               : disable
        -Woverflow-errors                        : disable
        -fdiag-inline                            : 1
        -fdiag-parallel                          : 1
        -fdiag-vector                            : 1
        -pedantic-errors                         : disable
        -w                                       : disable

      List Output Options :
        -report-file                             : not specified
        -report-append-mode                      : disable
        -report-all                              : enable
        -report-cg                               : enable
        -report-diagnostics                      : enable
        -report-format                           : enable
        -report-inline                           : enable
        -report-option                           : enable
        -report-vector                           : enable

      Directory Options :
        -fintrinsic-modules-path                 : /opt/nec/ve/nfort/5.2.0/include
        -module                                  : not specified

      Miscellaneous Options :
        -v                                       : disable


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:46 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFOUTPUTFILE
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

   431: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
   452: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
   458: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::INITSTATIONFILE
   467: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::INITNODALDATAFILE
   577: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFOUTPUTFILE
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

   419:                 SUBROUTINE initNetCDFOutputFile(descript1, reterr, descript2,
   420:                &   descript3)
   421:                 USE GLOBAL, ONLY : OutputDataDescript_t
   422:           #ifdef CMPI
   423:                 USE MESSENGER, ONLY : msg_fini
   424:           #endif
   425:                 IMPLICIT NONE
   426:                 TYPE(OutputDataDescript_t) :: descript1
   427:                 TYPE(OutputDataDescript_t), OPTIONAL :: descript2
   428:                 TYPE(OutputDataDescript_t), OPTIONAL :: descript3
   429:                 LOGICAL, intent(out) :: reterr
   430:           C
   431:                 call setMessageSource("initNetCDFOutputFile")
   432:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
   433:                 call allMessage(DEBUG,"Enter.")
   434:           #endif
   435:           C
   436:                 reterr = .false.
   437:                 ! Don't allocate or initialize anything if this is a pure output file,
   438:                 ! (not an input/output file like max/min files) and the format is
   439:                 ! specified as something other than netcdf.
   440:                 IF ( ( (ABS(descript1 % specifier).ne.NETCDF3).and.
   441:                &       (ABS(descript1 % specifier).ne.NETCDF4).and.
   442:                &       (descript1 % readMaxMin .eqv..false.) ) .or.
   443:                      ! jgf52.08.14: If this is an input/output file (like a max/min
   444:                      ! file), we may still need to initialize the file so we can read
   445:                      ! the data from a previous run. But not if the file format specifier
   446:                      ! is OFF (i.e., 0) because won't be writing the file, so we don't
   447:                      ! need to initialize or read it.
   448:                &       (descript1 % specifier.eq.0) ) then
   449:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
   450:                    call allMessage(DEBUG,"Return.")
   451:           #endif
   452:                    call unsetMessageSource()
   453:                    RETURN
   454:                 ENDIF
   455:           C
   456:                 SELECT CASE(descript1 % lun)
   457:                    CASE(41)
   458:                       CALL initStationFile(densityStations3D,
   459:                &           descript1, reterr)
   460:                    CASE(42)
   461:                       CALL initStationFile(velocityStations3D,
   462:                &           descript1, reterr)
   463:                    CASE(43)
   464:                       CALL initStationFile(turbulenceStations3D,
   465:                &           descript1, reterr)
   466:                    CASE(44)
   467:                       CALL initNodalDataFile(density3D,
   468:                &           descript1, reterr, descript2, descript3)
   469:                    CASE(45)
   470:                       CALL initNodalDataFile(velocity3D,
   471:                &           descript1, reterr, descript2, descript3)
   472:                    CASE(46)
   473:                       CALL initNodalDataFile(turbulence3D,
   474:                &           descript1, reterr, descript2, descript3)
   475:                    CASE(47)
   476:                       CALL initNodalDataFile(futureSurfaceTemperature,
   477:                &           descript1, reterr)
   478:                    !WJP 02.20.2018: added fort.51-54 harmonic outputs
   479:                    CASE(51)
   480:                       CALL initStationFile(HAelevSta, descript1, reterr)
   481:                    CASE(52)
   482:                       CALL initStationFile(HAvelSta, descript1, reterr)
   483:                    CASE(53)
   484:                       CALL initNodalDataFile(HAelev, descript1, reterr)
   485:                    CASE(54)
   486:                       CALL initNodalDataFile(HAvel, descript1, reterr)
   487:                    CASE(61)
   488:                       CALL initStationFile(elevSta, descript1, reterr)
   489:                    CASE(62)
   490:                       CALL initStationFile(velSta, descript1, reterr)
   491:                    CASE(63)
   492:                       CALL initNodalDataFile(elev, descript1, reterr)
   493:                    CASE(64)
   494:                       CALL initNodalDataFile(currentVel, descript1, reterr)
   495:                    CASE(71)
   496:                       CALL initStationFile(prSta, descript1, reterr)
   497:                    CASE(72)
   498:                       CALL initStationFile(wVelSta, descript1, reterr)
   499:                    CASE(73)
   500:                       CALL initNodalDataFile(pr, descript1, reterr)
   501:                    CASE(74)
   502:                       CALL initNodalDataFile(windVel, descript1, reterr)
   503:           C++ GML 20200528
   504:                    CASE (91)
   505:                       CALL initStationFile(IceSta, descript1, reterr)
   506:                    CASE (93)
   507:                       CALL initNodalDataFile(CICEAF, descript1, reterr)
   508:           C++
   509:                    CASE(173)
   510:                       CALL initNodalDataFile(wDrag, descript1, reterr)
   511:                    CASE(90)
   512:                       CALL initNodalDataFile(tau0nc, descript1, reterr)
   513:                    CASE(77)
   514:                       CALL initNodalDataFile(weirElev, descript1, reterr)
   515:                    CASE(164)
   516:                       CALL initNodalDataFile(rads, descript1, reterr)
   517:           #if defined CSWAN || defined ADCSWAN
   518:                    CASE(301)
   519:                       CALL initNodalDataFile(sw_hs, descript1, reterr)
   520:                    CASE(302)
   521:                       CALL initNodalDataFile(sw_dir, descript1, reterr)
   522:                    CASE(303)
   523:                       CALL initNodalDataFile(sw_tm01, descript1, reterr)
   524:                    CASE(304)
   525:                       CALL initNodalDataFile(sw_tps, descript1, reterr)
   526:                    CASE(305)
   527:                       CALL initNodalDataFile(sw_wind, descript1, reterr)
   528:                    CASE(306)
   529:                       CALL initNodalDataFile(sw_tm02, descript1, reterr)
   530:                    CASE(307)
   531:                       CALL initNodalDataFile(sw_tmm10, descript1, reterr)
   532:           #endif
   533:                    CASE(311)
   534:                       CALL initNodalDataFile(EtaMax, descript1, reterr)
   535:                    CASE(312)
   536:                       CALL initNodalDataFile(UMax, descript1, reterr)
   537:                    CASE(313)
   538:                       CALL initNodalDataFile(PrMin, descript1, reterr)
   539:                    CASE(314)
   540:                       CALL initNodalDataFile(WVMax, descript1, reterr)
   541:                    CASE(315)
   542:                       CALL initNodalDataFile(RSMax, descript1, reterr)
   543:           #if defined CSWAN || defined ADCSWAN
   544:                    CASE(316)
   545:                       CALL initNodalDataFile(sw_hs_max, descript1, reterr)
   546:                    CASE(317)
   547:                       CALL initNodalDataFile(sw_dir_max, descript1, reterr)
   548:                    CASE(318)
   549:                       CALL initNodalDataFile(sw_tm01_max, descript1, reterr)
   550:                    CASE(319)
   551:                       CALL initNodalDataFile(sw_tps_max, descript1, reterr)
   552:                    CASE(320)
   553:                       CALL initNodalDataFile(sw_wind_max, descript1, reterr)
   554:                    CASE(321)
   555:                       CALL initNodalDataFile(sw_tm02_max, descript1, reterr)
   556:                    CASE(322)
   557:                       CALL initNodalDataFile(sw_tmm10_max, descript1, reterr)
   558:           #endif
   559:                    CASE(400)
   560:                       CALL initNodalDataFile(inTime, descript1, reterr)
   561:                    CASE(401)
   562:                       CALL initNodalDataFile(maxInDep, descript1, reterr)
   563:                    CASE(402)
   564:                       CALL initNodalDataFile(coldDry, descript1, reterr)
   565:                    CASE(403)
   566:                       CALL initNodalDataFile(eRisInun, descript1, reterr)
   567:                    CASE(404)
   568:                       CALL initNodalDataFile(evrDry, descript1, reterr)
   569:                    CASE(108)
   570:                       CALL initNodalDataFile(dynamiccorrection, descript1, reterr)
   571:                    CASE(109)
   572:                       CALL initStationFile(dynamiccorrectionSta, descript1, reterr)
   573:           
   574:                    CASE DEFAULT
   575:                       write(scratchMessage,
   576:                &       '("No netCDF for files with unit number ",i0,".")') descript1 % lun
   577:                       call allMessage(ERROR,scratchMessage)
   578:                 END SELECT
   579:           C
   580:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
   581:                 call allMessage(DEBUG,"Return.")
   582:           #endif
   583:                 call unsetMessageSource()
   584:           C-----------------------------------------------------------------------
   585:                 END SUBROUTINE initNetCDFOutputFile


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:46 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFOUTPUTFILE
INLINE LIST

  ROOT: NETCDFIO::INITNETCDFOUTPUTFILE (netcdfio.F:419)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:431)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:452)
     *** Source for routine not found.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:458)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:461)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:464)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:467)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:470)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:473)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:476)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:480)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:482)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:484)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:486)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:488)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:490)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:492)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:494)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:496)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:498)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:500)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:502)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:505)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:507)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:510)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:512)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:514)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:516)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:534)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:536)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:538)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:540)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:542)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:560)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:562)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:564)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:566)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:568)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITNODALDATAFILE (netcdfio.F:570)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::INITSTATIONFILE (netcdfio.F:572)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:577)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:583)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:46 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFOUTPUTFILE
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:46 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFOUTPUTFILE
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 23 [s0-s4 s8-s12 s15-s16 s18-s19 s23-s26 s59-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2304 bytes
      Register spill area      :    8 bytes
      Parameter area           :   40 bytes
      Register save area       :  176 bytes
      User data area           : 2072 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:47 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITSTATIONFILE
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

   626: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
   638: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
   645: opt(1418): Constant-length loop is expanded.
   655: inl(1222): Inlined: NETCDFIO::CREATENETCDFOUTPUTFILE
  4001: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  4021: inl(1212): Source for routine not found.: GLOBAL::SCREENMESSAGE
  4079: inl(1212): Source for routine not found.: NETCDF::NF90_CREATE
  4080: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  4082: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_DIM
  4086: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
 10731: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
 10734: inl(1212): Source for routine not found.: NETCDF::NF90_REDEF
 10736: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10740: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT
 10744: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
 10770: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
 10773: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE
   663: inl(1222): Inlined: NETCDFIO::UPDATEMETADATA
   675: vec( 101): Vectorized loop.
   676: vec( 101): Vectorized loop.
   678: vec( 101): Vectorized loop.
   679: vec( 101): Vectorized loop.
   688: opt(1418): Constant-length loop is expanded.
   695: opt(1418): Constant-length loop is expanded.
   696: inl(1222): Inlined: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE
  3855: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_ONEDIM
 10297: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
 10306: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   720: inl(1222): Inlined: NETCDFIO::DEFINECOORDINATEATTRIBUTES
   743: vec( 103): Unvectorized loop.
   743: vec( 118): Unvectorizable data type.: ATT_TEXT
   745: vec( 103): Unvectorized loop.
   745: vec( 108): Unvectorizable loop structure.
   748: vec( 103): Unvectorized loop.
   748: vec( 118): Unvectorizable data type.: ATT_TEXT
   749: vec( 103): Unvectorized loop.
   749: vec( 108): Unvectorizable loop structure.
   753: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   757: vec( 103): Unvectorized loop.
   757: vec( 118): Unvectorizable data type.: ATT_TEXT
   759: vec( 103): Unvectorized loop.
   759: vec( 108): Unvectorizable loop structure.
   762: vec( 103): Unvectorized loop.
   762: vec( 118): Unvectorizable data type.: ATT_TEXT
   764: vec( 103): Unvectorized loop.
   764: vec( 108): Unvectorizable loop structure.
   768: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   773: vec( 103): Unvectorized loop.
   773: vec( 118): Unvectorizable data type.: ATT_TEXT
   775: vec( 103): Unvectorized loop.
   775: vec( 108): Unvectorizable loop structure.
   779: vec( 103): Unvectorized loop.
   779: vec( 118): Unvectorizable data type.: ATT_TEXT
   781: vec( 103): Unvectorized loop.
   781: vec( 108): Unvectorizable loop structure.
   785: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   802: vec( 103): Unvectorized loop.
   802: vec( 118): Unvectorizable data type.: ATT_TEXT
   804: vec( 103): Unvectorized loop.
   804: vec( 108): Unvectorizable loop structure.
   807: vec( 103): Unvectorized loop.
   807: vec( 118): Unvectorizable data type.: ATT_TEXT
   809: vec( 103): Unvectorized loop.
   809: vec( 108): Unvectorizable loop structure.
   817: vec( 103): Unvectorized loop.
   817: vec( 118): Unvectorizable data type.: ATT_TEXT
   819: vec( 103): Unvectorized loop.
   819: vec( 108): Unvectorizable loop structure.
   823: vec( 103): Unvectorized loop.
   823: vec( 118): Unvectorizable data type.: ATT_TEXT
   825: vec( 103): Unvectorized loop.
   825: vec( 108): Unvectorizable loop structure.
   833: vec( 103): Unvectorized loop.
   833: vec( 118): Unvectorizable data type.: ATT_TEXT
   835: vec( 103): Unvectorized loop.
   835: vec( 108): Unvectorizable loop structure.
   839: vec( 103): Unvectorized loop.
   839: vec( 118): Unvectorizable data type.: ATT_TEXT
   841: vec( 103): Unvectorized loop.
   841: vec( 108): Unvectorizable loop structure.
   850: vec( 103): Unvectorized loop.
   850: vec( 118): Unvectorizable data type.: ATT_TEXT
   852: vec( 103): Unvectorized loop.
   852: vec( 108): Unvectorizable loop structure.
   855: vec( 103): Unvectorized loop.
   855: vec( 118): Unvectorizable data type.: ATT_TEXT
   856: vec( 103): Unvectorized loop.
   856: vec( 108): Unvectorizable loop structure.
   864: vec( 103): Unvectorized loop.
   864: vec( 118): Unvectorizable data type.: ATT_TEXT
   866: vec( 103): Unvectorized loop.
   866: vec( 108): Unvectorizable loop structure.
   869: vec( 103): Unvectorized loop.
   869: vec( 118): Unvectorizable data type.: ATT_TEXT
   870: vec( 103): Unvectorized loop.
   870: vec( 108): Unvectorizable loop structure.
   879: vec( 103): Unvectorized loop.
   879: vec( 118): Unvectorizable data type.: ATT_TEXT
   881: vec( 103): Unvectorized loop.
   881: vec( 108): Unvectorizable loop structure.
   884: vec( 103): Unvectorized loop.
   884: vec( 118): Unvectorizable data type.: ATT_TEXT
   885: vec( 103): Unvectorized loop.
   885: vec( 108): Unvectorizable loop structure.
   894: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   896: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   898: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   913: vec( 103): Unvectorized loop.
   913: vec( 118): Unvectorizable data type.: ATT_TEXT
   916: vec( 103): Unvectorized loop.
   916: vec( 108): Unvectorizable loop structure.
   919: vec( 103): Unvectorized loop.
   919: vec( 118): Unvectorizable data type.: ATT_TEXT
   921: vec( 103): Unvectorized loop.
   921: vec( 108): Unvectorizable loop structure.
   925: vec( 103): Unvectorized loop.
   925: vec( 118): Unvectorizable data type.: ATT_TEXT
   927: vec( 103): Unvectorized loop.
   927: vec( 108): Unvectorizable loop structure.
   931: vec( 103): Unvectorized loop.
   931: vec( 118): Unvectorizable data type.: ATT_TEXT
   933: vec( 103): Unvectorized loop.
   933: vec( 108): Unvectorizable loop structure.
   938: vec( 103): Unvectorized loop.
   938: vec( 118): Unvectorizable data type.: ATT_TEXT
   940: vec( 103): Unvectorized loop.
   940: vec( 108): Unvectorizable loop structure.
   944: vec( 103): Unvectorized loop.
   944: vec( 118): Unvectorizable data type.: ATT_TEXT
   946: vec( 103): Unvectorized loop.
   946: vec( 108): Unvectorizable loop structure.
   952: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   954: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   974: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
   991: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1024: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1041: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1058: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1075: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1100: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1176: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1184: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1322: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1324: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1327: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1329: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1384: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1484: inl(1222): Inlined: NETCDFIO::DEFINETIMEATTRIBUTES
  3919: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  1487: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::DEFINEMETADATA
  1494: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_TEXT
  1498: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  1504: opt(1418): Constant-length loop is expanded.
  1505: inl(1222): Inlined: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITSTATIONFILE
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

   595:                 SUBROUTINE initStationFile(sta, descript1, reterr)
   596:                 USE SIZES, ONLY : MNPROC
   597:                 USE ADC_CONSTANTS, ONLY: RAD2DEG
   598:                 USE GLOBAL, ONLY : SNAMLEN, OutputDataDescript_t,
   599:                &                   IHOT, NWS, STATNAME, STATNAMEV,
   600:                &                   STATNAMEM, IDEN
   601:                 USE GLOBAL_3DVS, ONLY : STATNAMED, STATNAMEV3D, STATNAMET
   602:                 USE MESH, ONLY : ICS
   603:           #ifdef CMPI
   604:                 USE MESSENGER, ONLY : msg_fini
   605:           #endif
   606:                 USE HARM, ONLY: NAMEFR
   607:                 IMPLICIT NONE
   608:           C
   609:                 type(stationData), intent(inout) :: sta
   610:                 type(OutputDataDescript_t), intent(inout) :: descript1
   611:                 LOGICAL, intent(out) :: reterr
   612:           C
   613:                 INTEGER i,j
   614:                 INTEGER iret  ! success or failure of the netcdf call
   615:           
   616:           C
   617:           !     date_string variables for time attribute
   618:                 character date_string*40
   619:                 character now_date*8
   620:                 character big_ben*10
   621:                 character zone*5
   622:                 integer values(8)
   623:                 integer :: stationLuns3D(3) = (/ 41, 42, 43 /)
   624:                 integer :: stationLunsHA(2) = (/ 51, 52 /)
   625:           C
   626:                 call setMessageSource("initStationFile")
   627:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
   628:                 call allMessage(DEBUG,"Enter.")
   629:           #endif
   630:                 reterr = .false.
   631:           C
   632:           C     jgf50.13: if netcdf output was requested, but there are no stations,
   633:           C     don't initialize the file; just return.
   634:                 IF ( descript1 % num_fd_records.eq.0 ) THEN
   635:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
   636:                    call allMessage(DEBUG,"Return.")
   637:           #endif
   638:                    call unsetMessageSource()
   639:                    RETURN
   640:                 ENDIF
   641:           C
   642:                 sta % num_stations = descript1 % num_fd_records
   643:                 ALLOCATE(sta%myTime%timenc(sta%myTime%timenc_len))
   644:           C
   645: *======>        if (any(stationLuns3D.eq.descript1 % lun)
   646:                &    .or.any(stationLunsHA.eq.descript1 % lun)) then
   647:                    sta%num_v_nodes = descript1 % num_items_per_record
   648:                 ENDIF
   649:           C
   650:           C     Memory allocation for the station
   651:                 ALLOCATE(sta%x(sta%num_stations))
   652:                 ALLOCATE(sta%y(sta%num_stations))
   653:           C
   654:           C     Initialize netCDF output file, creating a new one if necessary.
   655:         I       CALL createNetCDFOutputFile(sta%ncid, sta%myFile, sta%myTime,
   656:                &                            descript1, reterr)
   657:           C
   658:           C     if we didn't need to create a file, update metadata and return
   659:                 !jgf52.08.22: Only update metadata if running in serial; in
   660:                 !parallel the metadata was updated by adcprep
   661:                 IF ( sta%myFile%createFile.eqv..false.) THEN
   662:                    if ( (reterr.eqv..false.).and.(mnproc.eq.1) ) then
   663:         I             CALL updateMetaData(sta%ncid,sta%myFile)
   664:                    endif
   665:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
   666:                    call allMessage(DEBUG,"Return.")
   667:           #endif
   668:                    call unsetMessageSource()
   669:                    RETURN
   670:                 ENDIF
   671:           C
   672:           C     Set coordinates of each station, converting to degrees if we
   673:           C     are in spherical coordinates.
   674:                 IF(ICS.NE.1) THEN
   675: V======>           sta%x = descript1%x_coord * RAD2DEG
   676: V======>           sta%y = descript1%y_coord * RAD2DEG
   677:                 ELSE
   678: V======>           sta%x = descript1%x_coord
   679: V======>           sta%y = descript1%y_coord
   680:                 ENDIF
   681:           C
   682:           C     Create station dimension and station name dimension
   683:                 iret = nf90_def_dim(sta%ncid, 'station',
   684:                &       sta%num_stations, sta%num_sta_dim_id)
   685:                 CALL check_err(iret)
   686:                 iret = nf90_def_dim(sta%ncid, 'namelen', SNAMLEN, sta%slen_dim_id)
   687:                 CALL check_err(iret)
   688: *======>        IF (any(stationLuns3D.eq.descript1%lun)) THEN
   689:                    iret = nf90_def_dim(sta%ncid, 'num_v_nodes', sta%num_v_nodes,
   690:                &       sta%num_v_nodes_dim_id)
   691:                    sta%station_data_dims_3D(1) = sta%num_sta_dim_id
   692:                    sta%station_data_dims_3D(2) = sta%num_v_nodes_dim_id
   693:                    sta%station_data_dims_3D(3) = sta%myTime%timenc_dim_id
   694:                 !WJP 02.20.2018 Writing in constituent information for harmonic file
   695: *======>        ELSEIF (any(stationLunsHA.eq.descript1 % lun)) THEN
   696:         I           call defineHarmonicAnalysisParametersInNetcdfFile(descript1,stationdat=sta)
   697:                 ENDIF
   698:                 CALL check_err(iret)
   699:           !
   700:           !     Define stations name
   701:                 sta%station_dims(1) = sta%slen_dim_id
   702:                 sta%station_dims(2) = sta%num_sta_dim_id
   703:           
   704:                 iret = nf90_def_var(sta%ncid, 'station_name', NF90_CHAR,
   705:                &    sta%station_dims, sta%station_id)
   706:                 CALL check_err(iret)
   707:           C
   708:           C     Define station locations
   709:                 sta%x_dims(1) = sta%num_sta_dim_id
   710:                 iret = nf90_def_var(sta%ncid, 'x', NF90_DOUBLE,
   711:                &       sta%x_dims, sta%x_id)
   712:                 CALL check_err(iret)
   713:                 sta%y_dims(1) = sta%num_sta_dim_id
   714:                 iret = nf90_def_var(sta%ncid, 'y', NF90_DOUBLE,
   715:                &       sta%y_dims, sta%y_id)
   716:                 CALL check_err(iret)
   717:           C
   718:           C     Set coordinates as representing either latitude or longitude,
   719:           C     or Cartesian x and y, depending on the value of ICS.
   720:         I       CALL defineCoordinateAttributes(sta%ncid, sta%x_id, sta%y_id)
   721:           C
   722:           C     Fill in labels and populate variables as appropriate for the
   723:           C     different types of data in the station files. The labels and
   724:           C     units will also vary according to the coordinate system ADCIRC
   725:           C     is using (spherical or cartesian, according to the value of ICS)
   726:           C     as well as the units system (english or si according to the value of g).
   727:                 SELECT CASE(descript1 % lun)
   728:                    CASE(41) !       F O R T . 4 1
   729:                       iret = nf90_def_var(sta%ncid, 'sigmat', NF90_DOUBLE,
   730:                &             sta%station_data_dims_3D, sta%u_station_data_id)
   731:                       CALL check_err(iret)
   732:                       IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
   733:                          iret = nf90_def_var(sta%ncid, 'salinity', NF90_DOUBLE,
   734:                &             sta%station_data_dims_3D, sta%v_station_data_id)
   735:                          CALL check_err(iret)
   736:                       ENDIF
   737:                       IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
   738:                          iret = nf90_def_var(sta%ncid, 'temperature', NF90_DOUBLE,
   739:                &             sta%station_data_dims_3D, sta%w_station_data_id)
   740:                          CALL check_err(iret)
   741:                       ENDIF
   742:                       ! sigma t
   743: +======>              att_text =
   744:                &         'station water column vertically varying density'
   745:                       iret = nf90_put_att(sta%ncid,
   746:                &         sta%u_station_data_id, 'long_name', trim(att_text))
   747:                       CALL check_err(iret)
   748: +======>              att_text = 'station_density_vertically_varying'
   749:                       iret = nf90_put_att(sta%ncid,
   750:                &             sta%u_station_data_id, 'standard_name',
   751:                &             trim(att_text))
   752:                       CALL check_err(iret)
   753:         I             CALL putUnitsAttribute(sta%ncid,sta%u_station_data_id,
   754:                &      "kg/m^3", "n/a")
   755:                       ! salinity
   756:                       IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
   757: +======>                 att_text =
   758:                &            'station water column vertically varying salinity'
   759:                          iret = nf90_put_att(sta%ncid,
   760:                &            sta%v_station_data_id, 'long_name',trim(att_text))
   761:                          CALL check_err(iret)
   762: +======>                 att_text =
   763:                &            'station_water_salinity_vertically_varying'
   764:                          iret = nf90_put_att(sta%ncid,
   765:                &            sta%v_station_data_id, 'standard_name',
   766:                &            trim(att_text))
   767:                          CALL check_err(iret)
   768:         I                CALL putUnitsAttribute(sta%ncid,sta%v_station_data_id,
   769:                &            "PSU","n/a")
   770:                       ENDIF
   771:                       ! temperature
   772:                       IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
   773: +======>                 att_text =
   774:                &            'station water column vertically varying temperature'
   775:                          iret = nf90_put_att(sta%ncid,
   776:                &            sta%w_station_data_id, 'long_name',
   777:                &            trim(att_text))
   778:                          CALL check_err(iret)
   779: +======>                 att_text =
   780:                &            'station_water_temperature_vertically_varying'
   781:                          iret = nf90_put_att(sta%ncid,
   782:                &            sta%w_station_data_id, 'standard_name',
   783:                &            trim(att_text))
   784:                          CALL check_err(iret)
   785:         I                CALL putUnitsAttribute(sta%ncid,sta%w_station_data_id,
   786:                &            "Celsius","Fahrenheit")
   787:                       ENDIF
   788:                       sta%statnames => STATNAMED
   789:           C
   790:                    CASE(42) !       F O R T . 4 2
   791:                       iret = nf90_def_var(sta%ncid, 'u-vel3D', NF90_DOUBLE,
   792:                &             sta%station_data_dims_3D, sta%u_station_data_id)
   793:                       CALL check_err(iret)
   794:                       iret = nf90_def_var(sta%ncid, 'v-vel3D', NF90_DOUBLE,
   795:                &             sta%station_data_dims_3D, sta%v_station_data_id)
   796:                       CALL check_err(iret)
   797:                       iret = nf90_def_var(sta%ncid, 'w-vel3D', NF90_DOUBLE,
   798:                &             sta%station_data_dims_3D,  sta%w_station_data_id)
   799:                       CALL check_err(iret)
   800:                       if (ics.ne.1) then
   801:                          ! u
   802: +======>                 att_text =
   803:                &    'station water column vertically varying east/west velocity'
   804:                          iret = nf90_put_att(sta%ncid,
   805:                &         sta%u_station_data_id, 'long_name', trim(att_text))
   806:                          CALL check_err(iret)
   807: +======>                 att_text =
   808:                &     'station_eastward_water_velocity_vertically_varying'
   809:                          iret = nf90_put_att(sta%ncid,
   810:                &             sta%u_station_data_id,
   811:                &             'standard_name', trim(att_text))
   812:                          CALL check_err(iret)
   813:                          iret = nf90_put_att(sta%ncid,
   814:                &             sta%u_station_data_id, 'positive', 'east')
   815:                          CALL check_err(iret)
   816:                          ! v
   817: +======>                 att_text =
   818:                &  'station water column vertically varying north/south velocity'
   819:                          iret = nf90_put_att(sta%ncid,
   820:                &            sta%v_station_data_id, 'long_name',
   821:                &            trim(att_text))
   822:                          CALL check_err(iret)
   823: +======>                 att_text =
   824:                &            'station_northward_water_velocity_vertically_varying'
   825:                          iret = nf90_put_att(sta%ncid,
   826:                &            sta%v_station_data_id, 'standard_name',
   827:                &            trim(att_text))
   828:                          CALL check_err(iret)
   829:                          iret = nf90_put_att(sta%ncid,
   830:                &         sta%v_station_data_id, 'positive', 'north')
   831:                          CALL check_err(iret)
   832:                          ! w
   833: +======>                 att_text =
   834:                &  'station water column vertically varying up/down velocity'
   835:                          iret = nf90_put_att(sta%ncid,
   836:                &            sta%w_station_data_id, 'long_name',
   837:                &            trim(att_text))
   838:                          CALL check_err(iret)
   839: +======>                 att_text =
   840:                &            'station_upward_water_velocity_vertically_varying'
   841:                          iret = nf90_put_att(sta%ncid,
   842:                &            sta%w_station_data_id, 'standard_name',
   843:                &            trim(att_text))
   844:                          CALL check_err(iret)
   845:                          iret = nf90_put_att(sta%ncid,
   846:                &         sta%w_station_data_id, 'positive', 'up')
   847:                          CALL check_err(iret)
   848:                       else
   849:                          ! u
   850: +======>                 att_text =
   851:                & 'station water column vertically varying velocity in x-direction'
   852:                          iret = nf90_put_att(sta%ncid,
   853:                &            sta%u_station_data_id,'long_name', trim(att_text))
   854:                          CALL check_err(iret)
   855: +======>                 att_text = 'station_x_water_velocity_vertically_varying'
   856:                          iret = nf90_put_att(sta%ncid,
   857:                &            sta%u_station_data_id, 'standard_name',
   858:                &            trim(att_text))
   859:                          CALL check_err(iret)
   860:                          iret = nf90_put_att(sta%ncid,
   861:                &            sta%u_station_data_id, 'positive', 'right')
   862:                          CALL check_err(iret)
   863:                          ! v
   864: +======>                 att_text =
   865:                & 'station water column vertically varying velocity in y-direction'
   866:                          iret = nf90_put_att(sta%ncid,
   867:                &            sta%v_station_data_id, 'long_name', trim(att_text))
   868:                          CALL check_err(iret)
   869: +======>                 att_text = 'station_y_water_velocity_vertically_varying'
   870:                          iret = nf90_put_att(sta%ncid,
   871:                &            sta%v_station_data_id, 'standard_name',
   872:                &            trim(att_text))
   873:                          CALL check_err(iret)
   874:                          iret = nf90_put_att(sta%ncid,
   875:                &            sta%v_station_data_id, 'positive',
   876:                &            '90 degrees counterclockwise from x water velocity')
   877:                          CALL check_err(iret)
   878:                          ! w
   879: +======>                 att_text = 'station water column '
   880:                &             //'vertically varying velocity in z-direction'
   881:                          iret = nf90_put_att(sta%ncid,
   882:                &            sta%w_station_data_id, 'long_name',trim(att_text))
   883:                          CALL check_err(iret)
   884: +======>                 att_text = 'station_z_water_velocity_vertically_varying'
   885:                          iret = nf90_put_att(sta%ncid,
   886:                &            sta%w_station_data_id, 'standard_name',
   887:                &            trim(att_text))
   888:                          CALL check_err(iret)
   889:                          iret = nf90_put_att(sta%ncid,
   890:                &            sta%w_station_data_id, 'positive',
   891:                &            '90 degrees counterclockwise from x water velocity')
   892:                          CALL check_err(iret)
   893:                       endif
   894:         I             CALL putUnitsAttribute(sta%ncid,sta%u_station_data_id,
   895:                &      'm s-1', 'ft s-1')
   896:         I             CALL putUnitsAttribute(sta%ncid,sta%v_station_data_id,
   897:                &      'm s-1','ft s-1')
   898:         I             CALL putUnitsAttribute(sta%ncid,sta%w_station_data_id,
   899:                &      'm s-1','ft s-1')
   900:                       sta%statnames => STATNAMEV3D
   901:           
   902:                    CASE(43) !       F O R T . 4 3
   903:                       iret = nf90_def_var(sta%ncid, 'q20', NF90_DOUBLE,
   904:                &          sta%station_data_dims_3D, sta%u_station_data_id)
   905:                       CALL check_err(iret)
   906:                       iret = nf90_def_var(sta%ncid, 'l', NF90_DOUBLE,
   907:                &          sta%station_data_dims_3D, sta%v_station_data_id)
   908:                       CALL check_err(iret)
   909:                       iret = nf90_def_var(sta%ncid, 'ev', NF90_DOUBLE,
   910:                &          sta%station_data_dims_3D, sta%w_station_data_id)
   911:                       CALL check_err(iret)
   912:                       ! q20
   913: +======>              att_text =
   914:                &      'station water column vertically varying turbulent'//
   915:                &      'kinetic energy'
   916:                       iret = nf90_put_att(sta%ncid,
   917:                &         sta%u_station_data_id, 'long_name', trim(att_text))
   918:                       CALL check_err(iret)
   919: +======>              att_text =
   920:                &         'station_turbulent_kinetic_energy_vertically_varying'
   921:                       iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
   922:                &             'standard_name', trim(att_text))
   923:                       CALL check_err(iret)
   924:                       ! l
   925: +======>              att_text =
   926:                &         'station water column vertically varying mixing length'
   927:                       iret = nf90_put_att(sta%ncid,
   928:                &            sta%v_station_data_id, 'long_name',
   929:                &            trim(att_text))
   930:                       CALL check_err(iret)
   931: +======>              att_text =
   932:                &            'station_water_mixing_length_vertically_varying'
   933:                          iret = nf90_put_att(sta%ncid,
   934:                &            sta%v_station_data_id, 'standard_name',
   935:                &            trim(att_text))
   936:                          CALL check_err(iret)
   937:                       !  ev
   938: +======>              att_text =
   939:                &        'station water column vertically varying eddy viscosity'
   940:                          iret = nf90_put_att(sta%ncid,
   941:                &            sta%w_station_data_id, 'long_name',
   942:                &            trim(att_text))
   943:                          CALL check_err(iret)
   944: +======>                 att_text =
   945:                &            'station_water_eddy_viscosity_vertically_varying'
   946:                          iret = nf90_put_att(sta%ncid,
   947:                &            sta%w_station_data_id, 'standard_name',
   948:                &            trim(att_text))
   949:                          CALL check_err(iret)
   950:           C            CALL putUnitsAttribute(sta%ncid,sta%u_station_data_id,
   951:           C     &      'm s-1', 'ft s-1') !TODO: jgf49.48.01: units for q20??
   952:         I             CALL putUnitsAttribute(sta%ncid,sta%v_station_data_id,
   953:                &      "meters","n/a")
   954:         I             CALL putUnitsAttribute(sta%ncid,sta%w_station_data_id,
   955:                &      "m^2/s","n/a")
   956:                       sta%statnames => STATNAMET
   957:           
   958:                    CASE(51) !       F O R T . 5 1        WJP 02.20.2018
   959:           
   960:                       sta%station_data_dims(2) = sta%num_sta_dim_id
   961:                       sta%station_data_dims(1) = sta%num_v_nodes_dim_id
   962:           !           Put the amplitude stuff in
   963:                       iret = nf90_def_var(sta%ncid, 'amp', NF90_DOUBLE,
   964:                &             sta%station_data_dims, sta%station_ha_data_id)
   965:                       CALL check_err(iret)
   966:           !           Define water surface elevation attributes
   967:                       iret = nf90_put_att(sta%ncid, sta%station_ha_data_id,
   968:                &             'long_name',
   969:                &             'station amplitude of tidal harmonic constituents')
   970:                       CALL check_err(iret)
   971:                       iret = nf90_put_att(sta%ncid, sta%station_ha_data_id,
   972:                &             'standard_name', 'sta_hc_amp')
   973:                       CALL check_err(iret)
   974:         I             CALL putUnitsAttribute(sta%ncid, sta%station_ha_data_id,
   975:                &           'm', 'ft')
   976:                       iret = nf90_put_att(sta%ncid, sta%station_ha_data_id,
   977:                &         '_FillValue',doubleval)
   978:                       CALL check_err(iret)
   979:           !           Put the phase stuff in
   980:                       iret = nf90_def_var(sta%ncid, 'phs', NF90_DOUBLE,
   981:                &             sta%station_data_dims, sta%station_hg_data_id)
   982:                       CALL check_err(iret)
   983:           !           Define water surface elevation attributes
   984:                       iret = nf90_put_att(sta%ncid, sta%station_hg_data_id,
   985:                &             'long_name',
   986:                &             'station phase of tidal harmonic constituents')
   987:                       CALL check_err(iret)
   988:                       iret = nf90_put_att(sta%ncid, sta%station_hg_data_id,
   989:                &             'standard_name', 'sta_hc_phs')
   990:                       CALL check_err(iret)
   991:         I             CALL putUnitsAttribute(sta%ncid, sta%station_hg_data_id,
   992:                &           'deg','deg')
   993:                       iret = nf90_put_att(sta%ncid, sta%station_hg_data_id,
   994:                &         '_FillValue',doubleval)
   995:                       CALL check_err(iret)
   996:           
   997:                       sta%statnames => STATNAME
   998:           
   999:                    CASE(52) !       F O R T . 5 2        WJP 02.20.2018
  1000:           
  1001:                       sta%station_data_dims(2) = sta%num_sta_dim_id
  1002:                       sta%station_data_dims(1) = sta%num_v_nodes_dim_id
  1003:                       iret = nf90_def_var(sta%ncid, 'u-vel-amp', NF90_DOUBLE,
  1004:                &             sta%station_data_dims, sta%ha_u_station_data_id)
  1005:                       CALL check_err(iret)
  1006:                       iret = nf90_def_var(sta%ncid, 'u-vel-phs', NF90_DOUBLE,
  1007:                &             sta%station_data_dims, sta%hg_u_station_data_id)
  1008:                       CALL check_err(iret)
  1009:                       iret = nf90_def_var(sta%ncid, 'v-vel-amp', NF90_DOUBLE,
  1010:                &             sta%station_data_dims, sta%ha_v_station_data_id)
  1011:                       CALL check_err(iret)
  1012:                       iret = nf90_def_var(sta%ncid, 'v-vel-phs', NF90_DOUBLE,
  1013:                &             sta%station_data_dims, sta%hg_v_station_data_id)
  1014:                       CALL check_err(iret)
  1015:                          ! u amp
  1016:                       iret = nf90_put_att(sta%ncid, sta%ha_u_station_data_id,
  1017:                &      'long_name',
  1018:                &  'station tidal harmonic amplitude of east/west velocity')
  1019:                       CALL check_err(iret)
  1020:                       iret = nf90_put_att(sta%ncid, sta%ha_u_station_data_id,
  1021:                &                   'standard_name',
  1022:                &       'sta_hc_amp_east_vel')
  1023:                       CALL check_err(iret)
  1024:         I             CALL putUnitsAttribute(sta%ncid,sta%ha_u_station_data_id,
  1025:                &           'm/s', 'ft/s')
  1026:                       iret = nf90_put_att(sta%ncid, sta%ha_u_station_data_id,
  1027:                &             '_FillValue', doubleval)
  1028:                       CALL check_err(iret)
  1029:                       iret = nf90_put_att(sta%ncid, sta%ha_u_station_data_id,
  1030:                &             'dry_Value', doubleval)
  1031:                       CALL check_err(iret)
  1032:                          ! u phs
  1033:                       iret = nf90_put_att(sta%ncid, sta%hg_u_station_data_id,
  1034:                &         'long_name',
  1035:                &  'station tidal harmonic phase of east/west velocity')
  1036:                       CALL check_err(iret)
  1037:                       iret = nf90_put_att(sta%ncid, sta%hg_u_station_data_id,
  1038:                &                   'standard_name',
  1039:                &       'sta_hc_phs_east_vel')
  1040:                       CALL check_err(iret)
  1041:         I             CALL putUnitsAttribute(sta%ncid,sta%hg_u_station_data_id,
  1042:                &           'deg','deg')
  1043:                       iret = nf90_put_att(sta%ncid, sta%hg_u_station_data_id,
  1044:                &             '_FillValue', doubleval)
  1045:                       CALL check_err(iret)
  1046:                       iret = nf90_put_att(sta%ncid, sta%hg_u_station_data_id,
  1047:                &             'dry_Value', doubleval)
  1048:                       CALL check_err(iret)
  1049:                          ! v amp
  1050:                       iret = nf90_put_att(sta%ncid,sta%ha_v_station_data_id,
  1051:                &         'long_name',
  1052:                &  'station tidal harmonic amplitude of north/south velocity')
  1053:                       CALL check_err(iret)
  1054:                       iret = nf90_put_att(sta%ncid, sta%ha_v_station_data_id,
  1055:                &         'standard_name',
  1056:                &         'sta_hc_amp_north_vel')
  1057:                       CALL check_err(iret)
  1058:         I             CALL putUnitsAttribute(sta%ncid,sta%ha_v_station_data_id,
  1059:                &           'm/s','ft/s')
  1060:                       iret = nf90_put_att(sta%ncid, sta%ha_v_station_data_id,
  1061:                &             '_FillValue', doubleval)
  1062:                       CALL check_err(iret)
  1063:                       iret = nf90_put_att(sta%ncid, sta%ha_v_station_data_id,
  1064:                &             'dry_Value', doubleval)
  1065:                       CALL check_err(iret)
  1066:                          ! v phs
  1067:                       iret = nf90_put_att(sta%ncid,sta%hg_v_station_data_id,
  1068:                &         'long_name',
  1069:                &  'station tidal harmonic phase of north/south velocity')
  1070:                       CALL check_err(iret)
  1071:                       iret = nf90_put_att(sta%ncid, sta%hg_v_station_data_id,
  1072:                &         'standard_name',
  1073:                &         'sta_hc_phs_north_vel')
  1074:                       CALL check_err(iret)
  1075:         I             CALL putUnitsAttribute(sta%ncid,sta%hg_v_station_data_id,
  1076:                &           'deg','deg')
  1077:                       iret = nf90_put_att(sta%ncid, sta%hg_v_station_data_id,
  1078:                &             '_FillValue', doubleval)
  1079:                       CALL check_err(iret)
  1080:                       iret = nf90_put_att(sta%ncid, sta%hg_v_station_data_id,
  1081:                &             'dry_Value', doubleval)
  1082:                       CALL check_err(iret)
  1083:           
  1084:                       sta%statnames => STATNAMEV
  1085:           
  1086:                    CASE(61) !       F O R T . 6 1
  1087:           
  1088:                       sta%station_data_dims(1) = sta%num_sta_dim_id
  1089:                       sta%station_data_dims(2) = sta%myTime%timenc_dim_id
  1090:                       iret = nf90_def_var(sta%ncid, 'zeta', NF90_DOUBLE,
  1091:                &             sta%station_data_dims, sta%station_data_id)
  1092:                       CALL check_err(iret)
  1093:           !           Define water surface elevation attributes
  1094:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1095:                &             'long_name', 'water surface elevation above geoid')
  1096:                       CALL check_err(iret)
  1097:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1098:                &             'standard_name', 'sea_surface_height_above_geoid')
  1099:                       CALL check_err(iret)
  1100:         I             CALL putUnitsAttribute(sta%ncid, sta%station_data_id,
  1101:                &           'm', 'ft')
  1102:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1103:                &         '_FillValue',doubleval)
  1104:                       CALL check_err(iret)
  1105:           !            iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1106:           !     &             'positive', 'up')
  1107:           !            CALL check_err(iret)
  1108:                       sta%statnames => STATNAME
  1109:           
  1110:                    CASE(62) !       F O R T . 6 2
  1111:           
  1112:                       sta%station_data_dims(1) = sta%num_sta_dim_id
  1113:                       sta%station_data_dims(2) = sta%myTime%timenc_dim_id
  1114:                       iret = nf90_def_var(sta%ncid, 'u-vel', NF90_DOUBLE,
  1115:                &             sta%station_data_dims, sta%u_station_data_id)
  1116:                       CALL check_err(iret)
  1117:                       iret = nf90_def_var(sta%ncid, 'v-vel', NF90_DOUBLE,
  1118:                &             sta%station_data_dims, sta%v_station_data_id)
  1119:                       CALL check_err(iret)
  1120:                       if (ics.ne.1) then
  1121:                          ! u
  1122:                          iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1123:                &         'long_name',
  1124:                &    'station water column vertically averaged east/west velocity')
  1125:                          CALL check_err(iret)
  1126:           
  1127:                          iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1128:                &                   'standard_name',
  1129:                &       'station_eastward_water_velocity_depth_averaged')
  1130:                          CALL check_err(iret)
  1131:                          iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1132:                &                'positive', 'east')
  1133:                          CALL check_err(iret)
  1134:                          ! v
  1135:                          iret = nf90_put_att(sta%ncid,sta%v_station_data_id,
  1136:                &         'long_name',
  1137:                & 'station water column vertically averaged north/south velocity')
  1138:                          CALL check_err(iret)
  1139:                          iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1140:                &         'standard_name',
  1141:                &         'station_northward_water_velocity_depth_averaged')
  1142:                          CALL check_err(iret)
  1143:                          iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1144:                &         'positive', 'north')
  1145:                          CALL check_err(iret)
  1146:                       else
  1147:                          ! u
  1148:                          iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1149:                &               'long_name', 'station water column vertically '
  1150:                &               //'averaged velocity in x-direction')
  1151:                          CALL check_err(iret)
  1152:           
  1153:                          iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1154:                &             'standard_name',
  1155:                &             'station_x_water_velocity_depth_averaged')
  1156:                          CALL check_err(iret)
  1157:                          iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1158:                &                'positive', 'right')
  1159:                          CALL check_err(iret)
  1160:                          ! v
  1161:                          iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1162:                &                'long_name',
  1163:                &            'station water column vertically averaged velocity '
  1164:                &            //'in y-direction')
  1165:                          CALL check_err(iret)
  1166:                          iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1167:                &         'standard_name',
  1168:                &         'station_y_water_velocity_depth_averaged')
  1169:                          CALL check_err(iret)
  1170:                          iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1171:                &         'positive',
  1172:                &         '90 degrees counterclockwise from x water velocity')
  1173:                          CALL check_err(iret)
  1174:                       endif
  1175:           
  1176:         I             CALL putUnitsAttribute(sta%ncid, sta%u_station_data_id,
  1177:                &      'm s-1', 'ft s-1')
  1178:                       iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1179:                &             '_FillValue', doubleval)
  1180:                       CALL check_err(iret)
  1181:                       iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1182:                &             'dry_Value', doubleval)
  1183:                       CALL check_err(iret)
  1184:         I             CALL putUnitsAttribute(sta%ncid, sta%v_station_data_id,
  1185:                &      'm s-1','ft s-1')
  1186:                       iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1187:                &      '_FillValue', doubleval)
  1188:                       CALL check_err(iret)
  1189:                       iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1190:                &      'dry_Value', doubleval)
  1191:                       CALL check_err(iret)
  1192:                       sta%statnames => STATNAMEV
  1193:           
  1194:                    CASE(71) !         F  O R T . 7 1
  1195:           
  1196:                       sta%station_data_dims(1) = sta%num_sta_dim_id
  1197:                       sta%station_data_dims(2) = sta%myTime%timenc_dim_id
  1198:           
  1199:                       iret = nf90_def_var(sta%ncid, 'pressure', NF90_DOUBLE,
  1200:                &         sta%station_data_dims, sta%station_data_id)
  1201:                       CALL check_err(iret)
  1202:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1203:                &         'long_name', 'station air pressure at sea level')
  1204:                       CALL check_err(iret)
  1205:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1206:                &         'standard_name', 'station_air_pressure_at_sea_level')
  1207:                       CALL check_err(iret)
  1208:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1209:                &         'units', 'meters of water')
  1210:                       CALL check_err(iret)
  1211:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1212:                &         '_FillValue', doubleval)
  1213:                       CALL check_err(iret)
  1214:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1215:                &         'positive', 'up')
  1216:                       CALL check_err(iret)
  1217:                       sta%statnames => STATNAMEM
  1218:           
  1219:                    CASE(72)  !      F O R T . 7 2
  1220:           
  1221:                       sta%station_data_dims(1) = sta%num_sta_dim_id
  1222:                       sta%station_data_dims(2) = sta%myTime%timenc_dim_id
  1223:                       iret = nf90_def_var(sta%ncid, 'windx', NF90_DOUBLE,
  1224:                &         sta%station_data_dims, sta%u_station_data_id)
  1225:                       CALL check_err(iret)
  1226:                       iret = nf90_def_var(sta%ncid, 'windy', NF90_DOUBLE,
  1227:                &         sta%station_data_dims, sta%v_station_data_id)
  1228:                       CALL check_err(iret)
  1229:           C
  1230:                       if (ics.ne.1) then
  1231:                          select case(abs(nws))
  1232:                             case(1,2)
  1233:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1234:                &                      'long_name', 'station wind stress u-component')
  1235:                               CALL check_err(iret)
  1236:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1237:                &                     'standard_name',
  1238:                &                     'station_eastward_surface_wind_stress')
  1239:                               CALL check_err(iret)
  1240:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1241:                &                     'positive', 'east')
  1242:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1243:                &                     'long_name', 'station wind stress v-component')
  1244:                               CALL check_err(iret)
  1245:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1246:                &                    'standard_name',
  1247:                &                    'station_northward_surface_wind_stress')
  1248:                               CALL check_err(iret)
  1249:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1250:                &                     'positive', 'north')
  1251:                               CALL check_err(iret)
  1252:                             case default
  1253:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1254:                &                     'long_name', 'station wind speed at 10m u-component')
  1255:                               CALL check_err(iret)
  1256:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1257:                &                     'standard_name',
  1258:                &                     'station_eastward_wind')
  1259:                               CALL check_err(iret)
  1260:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1261:                &                     'positive', 'east')
  1262:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1263:                &                     'long_name',
  1264:                &                     'station wind speed at 10m v-component')
  1265:                               CALL check_err(iret)
  1266:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1267:                &                     'standard_name', 'station_northward_wind')
  1268:                               CALL check_err(iret)
  1269:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1270:                &                     'positive', 'north')
  1271:                          end select
  1272:                       else
  1273:                          select case(abs(nws))
  1274:                             case(1,2)
  1275:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1276:                &                     'long_name',
  1277:                &                     'station wind stress in x-direction')
  1278:                               CALL check_err(iret)
  1279:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1280:                &                     'standard_name',
  1281:                &                     'station_x_surface_wind_stress')
  1282:                               CALL check_err(iret)
  1283:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1284:                &                     'positive', 'right')
  1285:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1286:                &                     'long_name',
  1287:                &                     'station wind stress in y-direction')
  1288:                               CALL check_err(iret)
  1289:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1290:                &                     'standard_name',
  1291:                &                     'station_y_surface_wind_stress')
  1292:                              CALL check_err(iret)
  1293:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1294:                &                    'positive',
  1295:                & '90 degrees counterclockwise from wind velocity in x-direction')
  1296:                             case default
  1297:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1298:                &                      'long_name',
  1299:                &                      'station wind velocity in x-direction')
  1300:                               CALL check_err(iret)
  1301:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1302:                &                     'standard_name', 'station_x_wind')
  1303:                               CALL check_err(iret)
  1304:                               iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1305:                &                     'positive', 'right')
  1306:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1307:                &                     'long_name',
  1308:                &                     'station wind velocity in y-direction')
  1309:                               CALL check_err(iret)
  1310:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1311:                &                     'standard_name',
  1312:                &                     'station_y_wind')
  1313:                               CALL check_err(iret)
  1314:                               iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1315:                &                     'positive',
  1316:                &  '90 degrees counterclockwise from wind velocity in x-direction')
  1317:                                CALL check_err(iret)
  1318:                          end select
  1319:                       endif
  1320:           
  1321:                       if (abs(nws).gt.2.and.abs(nws).lt.100) then
  1322:         I                call putUnitsAttribute(sta%ncid, sta%u_station_data_id,
  1323:                &              'm s-1', 'ft s-1')
  1324:         I                call putUnitsAttribute(sta%ncid, sta%v_station_data_id,
  1325:                &              'm s-1', 'ft s-1')
  1326:                       else
  1327:         I                call putUnitsAttribute(sta%ncid, sta%u_station_data_id,
  1328:                &              'm2 s-2', 'ft s-2')
  1329:         I                call putUnitsAttribute(sta%ncid, sta%u_station_data_id,
  1330:                &              'm2 s-2', 'ft s-2')
  1331:                       endif
  1332:           
  1333:                       iret = nf90_put_att(sta%ncid, sta%u_station_data_id,
  1334:                &             '_FillValue', doubleval)
  1335:                       CALL check_err(iret)
  1336:                       iret = nf90_put_att(sta%ncid, sta%v_station_data_id,
  1337:                &             '_FillValue', doubleval)
  1338:                       CALL check_err(iret)
  1339:                       sta%statnames => STATNAMEM
  1340:           
  1341:           C++ GML 20200605
  1342:                    CASE(91) !         F  O R T . 9 1
  1343:           
  1344:                       sta%station_data_dims(1) = sta%num_sta_dim_id
  1345:                       sta%station_data_dims(2) = sta%myTime%timenc_dim_id
  1346:           
  1347:                       iret = nf90_def_var(sta%ncid, 'iceaf', NF90_DOUBLE,
  1348:                &         sta%station_data_dims, sta%station_data_id)
  1349:                       CALL check_err(iret)
  1350:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1351:                &         'long_name', 'station sea-ice af')
  1352:                       CALL check_err(iret)
  1353:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1354:                &         'standard_name', 'station_sea-ice area fraction')
  1355:                       CALL check_err(iret)
  1356:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1357:                &         'units', 'unitless')
  1358:                       CALL check_err(iret)
  1359:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1360:                &         '_FillValue', doubleval)
  1361:                       CALL check_err(iret)
  1362:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1363:                &         'positive', 'up')
  1364:                       CALL check_err(iret)
  1365:                       sta%statnames => STATNAMEM
  1366:           c ++ GML
  1367:           
  1368:                    CASE(109) !       O F F S E T . 6 1
  1369:           
  1370:                       sta%station_data_dims(1) = sta%num_sta_dim_id
  1371:                       sta%station_data_dims(2) = sta%myTime%timenc_dim_id
  1372:                       iret = nf90_def_var(sta%ncid, 'dynamicWaterlevelCorrection', NF90_DOUBLE,
  1373:                &             sta%station_data_dims, sta%station_data_id)
  1374:                       CALL check_err(iret)
  1375:           !           Define water surface elevation attributes
  1376:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1377:                &         'long_name',
  1378:                &         'dynamic water surface correction above water level')
  1379:                       CALL check_err(iret)
  1380:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1381:                &         'standard_name',
  1382:                &         'dynamic_sea_surface_correction_above_water_level')
  1383:                       CALL check_err(iret)
  1384:         I             CALL putUnitsAttribute(sta%ncid, sta%station_data_id,
  1385:                &           'm', 'ft')
  1386:                       iret = nf90_put_att(sta%ncid, sta%station_data_id,
  1387:                &         '_FillValue',doubleval)
  1388:                       CALL check_err(iret)
  1389:                       sta%statnames => STATNAME
  1390:           
  1391:           
  1392:                    CASE DEFAULT
  1393:                       write(scratchMessage,
  1394:                &       '("No netCDF for station files with unit number ",i0,".")') descript1 % lun
  1395:                       call allMessage(ERROR,scratchMessage)
  1396:                 END SELECT
  1397:                 iret = nf90_put_att(sta%ncid,sta%u_station_data_id,
  1398:                &      '_FillValue', doubleval)
  1399:                 CALL check_err(iret)
  1400:                 iret = nf90_put_att(sta%ncid,sta%u_station_data_id,
  1401:                &      'dry_Value', doubleval)
  1402:                 CALL check_err(iret)
  1403:                 iret = nf90_put_att(sta%ncid,sta%v_station_data_id,
  1404:                &      '_FillValue',  doubleval)
  1405:                 CALL check_err(iret)
  1406:                 iret = nf90_put_att(sta%ncid,sta%v_station_data_id,
  1407:                &      'dry_Value', doubleval)
  1408:                 CALL check_err(iret)
  1409:                 iret = nf90_put_att(sta%ncid,sta%w_station_data_id,
  1410:                &      '_FillValue',  doubleval)
  1411:                 CALL check_err(iret)
  1412:                 iret = nf90_put_att(sta%ncid,sta%w_station_data_id,
  1413:                &      'dry_Value',  doubleval)
  1414:                 CALL check_err(iret)
  1415:           C
  1416:           C     jgf50.44: Automatically turn on compression if we are using the
  1417:           C     netcdf4 file format.
  1418:           #ifdef NETCDF_CAN_DEFLATE
  1419:                 IF (abs(descript1%specifier).eq.5) THEN
  1420:                    SELECT CASE(descript1 % lun)
  1421:                    CASE(41)
  1422:                       iret = nf90_def_var_deflate(sta%ncid, sta%u_station_data_id,
  1423:                &          1, 1, 2)
  1424:                       CALL check_err(iret)
  1425:                       IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
  1426:                          iret = nf90_def_var_deflate(sta%ncid,
  1427:                &                sta%v_station_data_id, 1, 1, 2)
  1428:                          CALL check_err(iret)
  1429:                       ENDIF
  1430:                       IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
  1431:                          iret = nf90_def_var_deflate(sta%ncid,
  1432:                &                sta%w_station_data_id, 1, 1, 2)
  1433:                          CALL check_err(iret)
  1434:                       ENDIF
  1435:                    CASE(42,43)
  1436:                       iret = nf90_def_var_deflate(sta%ncid, sta%u_station_data_id,
  1437:                &          1, 1, 2)
  1438:                       CALL check_err(iret)
  1439:                       iret = nf90_def_var_deflate(sta%ncid,
  1440:                &             sta%v_station_data_id, 1, 1, 2)
  1441:                       CALL check_err(iret)
  1442:                       iret = nf90_def_var_deflate(sta%ncid,
  1443:                &             sta%w_station_data_id, 1, 1, 2)
  1444:                       CALL check_err(iret)
  1445:                    CASE(51)
  1446:                       CALL check_err(nf90_def_var_deflate(sta%ncid, sta%station_ha_data_id,
  1447:                &             1, 1, 2))
  1448:                       CALL check_err(nf90_def_var_deflate(sta%ncid, sta%station_hg_data_id,
  1449:                &             1, 1, 2))
  1450:                    CASE(52)
  1451:                       CALL check_err(nf90_def_var_deflate(sta%ncid, sta%ha_u_station_data_id,
  1452:                &             1, 1, 2))
  1453:                       CALL check_err(nf90_def_var_deflate(sta%ncid, sta%hg_u_station_data_id,
  1454:                &             1, 1, 2))
  1455:                       CALL check_err(nf90_def_var_deflate(sta%ncid, sta%ha_v_station_data_id,
  1456:                &             1, 1, 2))
  1457:                       CALL check_err(nf90_def_var_deflate(sta%ncid, sta%hg_v_station_data_id,
  1458:                &             1, 1, 2))
  1459:                    CASE(61,71,91,109) ! GML added 91 20210727
  1460:                       iret = nf90_def_var_deflate(sta%ncid, sta%station_data_id,
  1461:                &             1, 1, 2)
  1462:                       CALL check_err(iret)
  1463:                    CASE(62,72)
  1464:                       iret = nf90_def_var_deflate(sta%ncid, sta%u_station_data_id,
  1465:                &             1, 1, 2)
  1466:                       CALL check_err(iret)
  1467:                       iret = nf90_def_var_deflate(sta%ncid, sta%v_station_data_id,
  1468:                &             1, 1, 2)
  1469:                       CALL check_err(iret)
  1470:                    CASE DEFAULT ! should be unreachable
  1471:                       write(scratchMessage,
  1472:                &       '("No netCDF for station files with unit number ",i0,".")') descript1 % lun
  1473:                       call allMessage(ERROR,scratchMessage)
  1474:                    END SELECT
  1475:                 ENDIF
  1476:           #endif
  1477:           !
  1478:           !     Define station names and code attributes
  1479:                 iret = nf90_put_att(sta%ncid,sta%station_id,'long_name',
  1480:                &       'station name')
  1481:                 CALL check_err(iret)
  1482:           !
  1483:           !     Define time attributes
  1484:         I       CALL defineTimeAttributes(sta%ncid, sta%myTime)
  1485:           C
  1486:           C     define metadata and selected fort.15 parameters in netcdf file
  1487:                 CALL defineMetaData(sta%ncid)
  1488:           !
  1489:           !     Leave define mode
  1490:                 iret = nf90_enddef(sta%ncid)
  1491:                 CALL check_err(iret)
  1492:           !
  1493:           !     Store station name(s)
  1494:                 iret = nf90_put_var(sta%ncid, sta%station_id, sta%statnames(:) )
  1495:                 CALL check_err(iret)
  1496:           C
  1497:           C     Store station locations
  1498:                 iret = nf90_put_var(sta%ncid, sta%x_id, sta%x)
  1499:                 CALL check_err(iret)
  1500:                 iret = nf90_put_var(sta%ncid, sta%y_id, sta%y)
  1501:                 CALL check_err(iret)
  1502:           
  1503:                 !WJP 02.20.2018 Store const name(s)
  1504: *======>        IF (any(stationLunsHA.eq.descript1 % lun)) THEN
  1505:         I         CALL addHarmonicAnalysisParametersToNetcdfFile(sta%ncid)
  1506:                 ENDIF
  1507:           
  1508:           C
  1509:           C     now close the initialized netcdf file
  1510:                 iret = nf90_close(sta%ncid)
  1511:                 CALL check_err(iret)
  1512:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  1513:                 call allMessage(DEBUG,"Return.")
  1514:           #endif
  1515:                 call unsetMessageSource()
  1516:           C-----------------------------------------------------------------------
  1517:                 END SUBROUTINE initStationFile


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:47 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITSTATIONFILE
INLINE LIST

  ROOT: NETCDFIO::INITSTATIONFILE (netcdfio.F:595)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:626)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:638)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::CREATENETCDFOUTPUTFILE (netcdfio.F:655)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:3957)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4001)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4021)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4025)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4041)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4074)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_CREATE (netcdfio.F:4079)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4080)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:4082)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4084)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:4086)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4088)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4094)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::UPDATEMETADATA (netcdfio.F:663)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10726)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:10731)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10732)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_REDEF (netcdfio.F:10734)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10735)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10736)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10737)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10738)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10739)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10740)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10741)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10742)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10743)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10744)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10745)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10746)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10747)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10748)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10749)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10750)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10751)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10752)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10753)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10754)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10755)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10756)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10757)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10758)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10759)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10760)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10761)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10767)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10769)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:10770)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10771)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:10773)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10774)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10778)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:668)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:683)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:685)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:686)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:687)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:689)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE (netcdfio.F:696)
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3842)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3842)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3844)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3844)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3849)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3851)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3852)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3852)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3857)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3857)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3859)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3859)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3860)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3860)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3862)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3862)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3864)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3864)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3866)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3866)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3868)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3868)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3872)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3872)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3877)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3883)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3883)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3887)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3887)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3888)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3888)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3890)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3890)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3892)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3892)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3894)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3894)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3896)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3896)
      *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:698)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:704)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:706)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:710)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:712)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:714)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:716)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINECOORDINATEATTRIBUTES (netcdfio.F:720)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10264)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10272)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10273)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10274)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10275)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10276)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10277)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10278)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10279)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10281)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10282)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10283)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10284)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10285)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10286)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10287)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10288)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10291)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10293)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10294)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10295)
      *** Source for routine not found.
   -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:10297)
    -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
       *** Source for routine not found.
    -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
       *** Source for routine not found.
    -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
       *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10298)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10299)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10301)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10303)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10304)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10305)
      *** Source for routine not found.
   -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:10306)
    -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
       *** Source for routine not found.
    -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
       *** Source for routine not found.
    -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
       *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10307)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10309)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10315)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:729)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:731)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:733)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:738)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:740)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:745)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:747)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:749)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:752)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:753)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:759)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:761)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:764)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:767)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:768)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:775)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:778)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:781)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:784)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:785)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:791)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:793)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:794)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:796)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:797)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:799)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:804)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:806)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:809)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:812)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:813)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:815)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:819)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:822)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:825)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:828)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:829)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:831)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:835)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:838)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:841)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:844)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:845)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:847)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:852)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:854)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:856)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:859)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:860)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:862)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:866)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:868)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:873)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:874)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:877)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:881)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:883)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:885)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:888)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:889)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:892)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:894)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:896)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:898)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:903)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:905)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:906)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:908)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:909)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:911)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:916)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:918)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:921)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:923)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:927)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:930)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:933)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:936)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:940)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:943)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:946)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:949)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:952)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:954)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:963)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:965)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:967)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:970)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:971)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:973)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:974)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:976)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:978)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:980)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:982)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:984)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:987)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:988)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:990)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:991)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:993)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:995)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1003)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1005)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1006)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1008)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1009)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1011)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1012)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1014)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1016)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1019)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1020)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1023)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1024)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1026)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1028)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1029)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1031)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1033)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1036)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1037)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1040)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1041)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1043)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1045)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1046)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1048)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1050)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1053)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1054)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1057)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1058)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1060)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1062)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1063)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1065)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1067)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1070)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1071)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1074)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1075)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1077)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1079)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1080)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1082)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1090)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1092)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1094)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1096)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1097)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1099)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1100)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1102)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1104)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1114)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1116)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1117)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1119)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1122)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1125)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1127)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1130)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1131)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1133)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1135)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1138)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1139)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1142)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1143)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1145)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1148)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1151)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1153)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1156)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1157)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1159)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1161)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1165)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1166)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1169)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1170)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1173)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1176)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1178)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1180)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1181)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1183)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1184)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1186)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1188)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1189)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1191)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1199)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1201)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1202)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1204)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1205)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1207)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1208)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1210)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1211)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1213)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1214)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1216)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1223)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1225)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1226)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1228)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1233)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1235)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1236)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1239)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1240)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1242)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1244)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1245)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1248)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1249)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1251)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1253)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1255)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1256)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1259)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1260)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1262)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1265)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1266)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1268)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1269)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1275)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1278)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1279)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1282)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1283)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1285)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1288)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1289)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1292)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1293)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1297)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1300)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1301)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1303)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1304)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1306)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1309)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1310)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1313)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1314)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1317)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1322)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1324)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1327)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1329)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1333)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1335)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1336)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1338)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1347)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1349)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1350)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1352)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1353)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1355)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1356)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1358)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1359)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1361)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1362)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1364)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1372)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1374)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1376)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1379)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1380)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1383)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1384)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1386)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1388)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:1395)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1397)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1399)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1400)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1402)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1403)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1405)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1406)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1408)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1409)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1411)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1412)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1414)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1479)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1481)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINETIMEATTRIBUTES (netcdfio.F:1484)
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10431)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10433)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10434)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10436)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10438)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10440)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10441)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10443)
      *** Source for routine not found.
  -> NOINLINE: NETCDFIO::DEFINEMETADATA (netcdfio.F:1487)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:1490)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1491)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_TEXT (netcdfio.F:1494)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1495)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:1498)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1499)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:1500)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1501)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE (netcdfio.F:1505)
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3919)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3919)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_TEXT (netcdfio.F:3920)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3920)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3922)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3922)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3923)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3923)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3924)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3924)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3925)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3925)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3926)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3926)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:1510)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1511)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:1515)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:47 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITSTATIONFILE
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3997)
  LOOP END

  LOOP BEGIN: (netcdfio.F:678)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:678)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:678)
  LOOP END

  LOOP BEGIN: (netcdfio.F:679)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:679)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:679)
  LOOP END

  LOOP BEGIN: (netcdfio.F:675)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:675)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:675)
  LOOP END

  LOOP BEGIN: (netcdfio.F:675)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:675)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:675)
  LOOP END

  LOOP BEGIN: (netcdfio.F:676)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:676)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:676)
  LOOP END

  LOOP BEGIN: (netcdfio.F:676)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:676)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:676)
  LOOP END

  LOOP BEGIN: (netcdfio.F:913)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:913)
  LOOP END

  LOOP BEGIN: (netcdfio.F:913)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:913)
  LOOP END

  LOOP BEGIN: (netcdfio.F:916)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:916)
  LOOP END

  LOOP BEGIN: (netcdfio.F:919)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:919)
  LOOP END

  LOOP BEGIN: (netcdfio.F:919)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:919)
  LOOP END

  LOOP BEGIN: (netcdfio.F:921)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:921)
  LOOP END

  LOOP BEGIN: (netcdfio.F:925)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:925)
  LOOP END

  LOOP BEGIN: (netcdfio.F:925)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:925)
  LOOP END

  LOOP BEGIN: (netcdfio.F:927)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:927)
  LOOP END

  LOOP BEGIN: (netcdfio.F:931)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:931)
  LOOP END

  LOOP BEGIN: (netcdfio.F:931)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:931)
  LOOP END

  LOOP BEGIN: (netcdfio.F:933)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:933)
  LOOP END

  LOOP BEGIN: (netcdfio.F:938)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:938)
  LOOP END

  LOOP BEGIN: (netcdfio.F:938)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:938)
  LOOP END

  LOOP BEGIN: (netcdfio.F:940)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:940)
  LOOP END

  LOOP BEGIN: (netcdfio.F:944)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:944)
  LOOP END

  LOOP BEGIN: (netcdfio.F:944)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:944)
  LOOP END

  LOOP BEGIN: (netcdfio.F:946)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:946)
  LOOP END

  LOOP BEGIN: (netcdfio.F:850)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:850)
  LOOP END

  LOOP BEGIN: (netcdfio.F:850)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:850)
  LOOP END

  LOOP BEGIN: (netcdfio.F:852)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:852)
  LOOP END

  LOOP BEGIN: (netcdfio.F:855)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:855)
  LOOP END

  LOOP BEGIN: (netcdfio.F:855)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:855)
  LOOP END

  LOOP BEGIN: (netcdfio.F:856)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:856)
  LOOP END

  LOOP BEGIN: (netcdfio.F:864)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:864)
  LOOP END

  LOOP BEGIN: (netcdfio.F:864)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:864)
  LOOP END

  LOOP BEGIN: (netcdfio.F:866)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:866)
  LOOP END

  LOOP BEGIN: (netcdfio.F:869)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:869)
  LOOP END

  LOOP BEGIN: (netcdfio.F:869)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:869)
  LOOP END

  LOOP BEGIN: (netcdfio.F:870)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:870)
  LOOP END

  LOOP BEGIN: (netcdfio.F:879)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:879)
  LOOP END

  LOOP BEGIN: (netcdfio.F:879)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:879)
  LOOP END

  LOOP BEGIN: (netcdfio.F:881)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:884)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:884)
  LOOP END

  LOOP BEGIN: (netcdfio.F:884)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:884)
  LOOP END

  LOOP BEGIN: (netcdfio.F:885)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:885)
  LOOP END

  LOOP BEGIN: (netcdfio.F:802)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:802)
  LOOP END

  LOOP BEGIN: (netcdfio.F:802)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:802)
  LOOP END

  LOOP BEGIN: (netcdfio.F:804)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:804)
  LOOP END

  LOOP BEGIN: (netcdfio.F:807)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:807)
  LOOP END

  LOOP BEGIN: (netcdfio.F:807)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:807)
  LOOP END

  LOOP BEGIN: (netcdfio.F:809)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:809)
  LOOP END

  LOOP BEGIN: (netcdfio.F:817)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:817)
  LOOP END

  LOOP BEGIN: (netcdfio.F:817)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:817)
  LOOP END

  LOOP BEGIN: (netcdfio.F:819)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:819)
  LOOP END

  LOOP BEGIN: (netcdfio.F:823)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:823)
  LOOP END

  LOOP BEGIN: (netcdfio.F:823)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:823)
  LOOP END

  LOOP BEGIN: (netcdfio.F:825)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:825)
  LOOP END

  LOOP BEGIN: (netcdfio.F:833)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:833)
  LOOP END

  LOOP BEGIN: (netcdfio.F:833)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:833)
  LOOP END

  LOOP BEGIN: (netcdfio.F:835)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:835)
  LOOP END

  LOOP BEGIN: (netcdfio.F:839)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:839)
  LOOP END

  LOOP BEGIN: (netcdfio.F:839)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:839)
  LOOP END

  LOOP BEGIN: (netcdfio.F:841)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:841)
  LOOP END

  LOOP BEGIN: (netcdfio.F:743)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:743)
  LOOP END

  LOOP BEGIN: (netcdfio.F:743)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:743)
  LOOP END

  LOOP BEGIN: (netcdfio.F:745)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:745)
  LOOP END

  LOOP BEGIN: (netcdfio.F:748)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:748)
  LOOP END

  LOOP BEGIN: (netcdfio.F:748)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:748)
  LOOP END

  LOOP BEGIN: (netcdfio.F:749)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:749)
  LOOP END

  LOOP BEGIN: (netcdfio.F:757)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:757)
  LOOP END

  LOOP BEGIN: (netcdfio.F:757)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:757)
  LOOP END

  LOOP BEGIN: (netcdfio.F:759)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:759)
  LOOP END

  LOOP BEGIN: (netcdfio.F:762)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:762)
  LOOP END

  LOOP BEGIN: (netcdfio.F:762)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:762)
  LOOP END

  LOOP BEGIN: (netcdfio.F:764)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:764)
  LOOP END

  LOOP BEGIN: (netcdfio.F:773)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:773)
  LOOP END

  LOOP BEGIN: (netcdfio.F:773)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:773)
  LOOP END

  LOOP BEGIN: (netcdfio.F:775)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:775)
  LOOP END

  LOOP BEGIN: (netcdfio.F:779)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:779)
  LOOP END

  LOOP BEGIN: (netcdfio.F:779)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:779)
  LOOP END

  LOOP BEGIN: (netcdfio.F:781)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:781)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. : DATE_STRING (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10438)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNDES (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNID (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:47 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITSTATIONFILE
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 49 [s0-s12 s15-s16 s18-s40 s53-s63]
      Vector registers         :  8 [v56-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 12512 bytes
      Register spill area      :  1072 bytes
      Parameter area           :   120 bytes
      Register save area       :   176 bytes
      User data area           : 11136 bytes
      Others                   :     8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:678)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:679)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:675)
    *** Estimated execution cycle                       : 95
  LOOP END

  LOOP BEGIN: (netcdfio.F:675)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:676)
    *** Estimated execution cycle                       : 95
  LOOP END

  LOOP BEGIN: (netcdfio.F:676)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:913)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:913)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:916)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:919)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:919)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:921)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:925)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:925)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:927)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:931)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:931)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:933)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:938)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:938)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:940)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:944)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:944)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:946)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:850)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:850)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:852)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:855)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:855)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:856)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:864)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:864)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:866)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:869)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:869)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:870)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:879)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:879)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:881)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:884)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:884)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:885)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:802)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:802)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:804)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:807)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:807)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:809)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:817)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:817)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:819)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:823)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:823)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:825)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:833)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:833)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:835)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:839)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:839)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:841)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:743)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:743)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:745)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:748)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:748)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:749)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:757)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:757)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:759)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:762)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:762)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:764)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:773)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:773)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:775)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:779)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:779)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:781)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNODALDATAFILE
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  1547: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  1563: vec( 101): Vectorized loop.
  1567: inl(1222): Inlined: NETCDFIO::CREATENETCDFOUTPUTFILE
  4001: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  4021: inl(1212): Source for routine not found.: GLOBAL::SCREENMESSAGE
  4041: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  4079: inl(1212): Source for routine not found.: NETCDF::NF90_CREATE
  4080: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  4082: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_DIM
  4086: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
 10804: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
 10805: inl(1212): Source for routine not found.: NETCDF::NF90_GET_ATT_TEXT
 10807: inl(1212): Source for routine not found.: NETCDF::NF90_GET_ATT_ONE_FOURBYTEINT
 10809: inl(1212): Source for routine not found.: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL
 10818: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
 10820: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
 10822: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE
  1587: inl(1222): Inlined: NETCDFIO::READMETADATA
 10734: inl(1212): Source for routine not found.: NETCDF::NF90_REDEF
 10736: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10740: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT
 10744: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
 10770: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
  1595: inl(1222): Inlined: NETCDFIO::UPDATEMETADATA
  1606: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::INITNETCDFCOORD
  1608: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::DEFINEMESHVARIABLES
  1611: opt(1418): Constant-length loop is expanded.
  1612: inl(1222): Inlined: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE
  3855: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_ONEDIM
  1635: vec( 103): Unvectorized loop.
  1635: vec( 118): Unvectorizable data type.: ATT_TEXT
  1636: vec( 103): Unvectorized loop.
  1636: vec( 108): Unvectorizable loop structure.
  1639: vec( 103): Unvectorized loop.
  1639: vec( 118): Unvectorizable data type.: ATT_TEXT
  1640: vec( 103): Unvectorized loop.
  1640: vec( 108): Unvectorizable loop structure.
  1643: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1647: vec( 103): Unvectorized loop.
  1647: vec( 118): Unvectorizable data type.: ATT_TEXT
  1648: vec( 103): Unvectorized loop.
  1648: vec( 108): Unvectorizable loop structure.
  1651: vec( 103): Unvectorized loop.
  1651: vec( 118): Unvectorizable data type.: ATT_TEXT
  1652: vec( 103): Unvectorized loop.
  1652: vec( 108): Unvectorizable loop structure.
  1655: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1660: vec( 103): Unvectorized loop.
  1660: vec( 118): Unvectorizable data type.: ATT_TEXT
  1661: vec( 103): Unvectorized loop.
  1661: vec( 108): Unvectorizable loop structure.
  1664: vec( 103): Unvectorized loop.
  1664: vec( 118): Unvectorizable data type.: ATT_TEXT
  1665: vec( 103): Unvectorized loop.
  1665: vec( 108): Unvectorizable loop structure.
  1668: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1686: vec( 103): Unvectorized loop.
  1686: vec( 118): Unvectorizable data type.: ATT_TEXT
  1688: vec( 103): Unvectorized loop.
  1688: vec( 108): Unvectorizable loop structure.
  1691: vec( 103): Unvectorized loop.
  1691: vec( 118): Unvectorizable data type.: ATT_TEXT
  1692: vec( 103): Unvectorized loop.
  1692: vec( 108): Unvectorizable loop structure.
  1699: vec( 103): Unvectorized loop.
  1699: vec( 118): Unvectorizable data type.: ATT_TEXT
  1701: vec( 103): Unvectorized loop.
  1701: vec( 108): Unvectorizable loop structure.
  1704: vec( 103): Unvectorized loop.
  1704: vec( 118): Unvectorizable data type.: ATT_TEXT
  1705: vec( 103): Unvectorized loop.
  1705: vec( 108): Unvectorizable loop structure.
  1712: vec( 103): Unvectorized loop.
  1712: vec( 118): Unvectorizable data type.: ATT_TEXT
  1714: vec( 103): Unvectorized loop.
  1714: vec( 108): Unvectorizable loop structure.
  1717: vec( 103): Unvectorized loop.
  1717: vec( 118): Unvectorizable data type.: ATT_TEXT
  1719: vec( 103): Unvectorized loop.
  1719: vec( 108): Unvectorizable loop structure.
  1727: vec( 103): Unvectorized loop.
  1727: vec( 118): Unvectorizable data type.: ATT_TEXT
  1729: vec( 103): Unvectorized loop.
  1729: vec( 108): Unvectorizable loop structure.
  1732: vec( 103): Unvectorized loop.
  1732: vec( 118): Unvectorizable data type.: ATT_TEXT
  1733: vec( 103): Unvectorized loop.
  1733: vec( 108): Unvectorizable loop structure.
  1740: vec( 103): Unvectorized loop.
  1740: vec( 118): Unvectorizable data type.: ATT_TEXT
  1742: vec( 103): Unvectorized loop.
  1742: vec( 108): Unvectorizable loop structure.
  1745: vec( 103): Unvectorized loop.
  1745: vec( 118): Unvectorizable data type.: ATT_TEXT
  1746: vec( 103): Unvectorized loop.
  1746: vec( 108): Unvectorizable loop structure.
  1754: vec( 103): Unvectorized loop.
  1754: vec( 118): Unvectorizable data type.: ATT_TEXT
  1756: vec( 103): Unvectorized loop.
  1756: vec( 108): Unvectorizable loop structure.
  1759: vec( 103): Unvectorized loop.
  1759: vec( 118): Unvectorizable data type.: ATT_TEXT
  1760: vec( 103): Unvectorized loop.
  1760: vec( 108): Unvectorizable loop structure.
  1768: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1770: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1772: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1789: vec( 103): Unvectorized loop.
  1789: vec( 118): Unvectorizable data type.: ATT_TEXT
  1791: vec( 103): Unvectorized loop.
  1791: vec( 108): Unvectorizable loop structure.
  1794: vec( 103): Unvectorized loop.
  1794: vec( 118): Unvectorizable data type.: ATT_TEXT
  1796: vec( 103): Unvectorized loop.
  1796: vec( 108): Unvectorizable loop structure.
  1800: vec( 103): Unvectorized loop.
  1800: vec( 118): Unvectorizable data type.: ATT_TEXT
  1802: vec( 103): Unvectorized loop.
  1802: vec( 108): Unvectorizable loop structure.
  1805: vec( 103): Unvectorized loop.
  1805: vec( 118): Unvectorizable data type.: ATT_TEXT
  1807: vec( 103): Unvectorized loop.
  1807: vec( 108): Unvectorizable loop structure.
  1811: vec( 103): Unvectorized loop.
  1811: vec( 118): Unvectorizable data type.: ATT_TEXT
  1813: vec( 103): Unvectorized loop.
  1813: vec( 108): Unvectorizable loop structure.
  1816: vec( 103): Unvectorized loop.
  1816: vec( 118): Unvectorizable data type.: ATT_TEXT
  1817: vec( 103): Unvectorized loop.
  1817: vec( 108): Unvectorizable loop structure.
  1822: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1824: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1832: vec( 103): Unvectorized loop.
  1832: vec( 108): Unvectorizable loop structure.
  1835: vec( 103): Unvectorized loop.
  1835: vec( 118): Unvectorizable data type.: ATT_TEXT
  1836: vec( 103): Unvectorized loop.
  1836: vec( 108): Unvectorizable loop structure.
  1839: vec( 103): Unvectorized loop.
  1839: vec( 118): Unvectorizable data type.: ATT_TEXT
  1840: vec( 103): Unvectorized loop.
  1840: vec( 108): Unvectorizable loop structure.
  1843: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1855: vec( 103): Unvectorized loop.
  1855: vec( 108): Unvectorizable loop structure.
  1874: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1881: vec( 103): Unvectorized loop.
  1881: vec( 108): Unvectorizable loop structure.
  1900: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1912: vec( 103): Unvectorized loop.
  1912: vec( 108): Unvectorizable loop structure.
  1931: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1938: vec( 103): Unvectorized loop.
  1938: vec( 108): Unvectorizable loop structure.
  1957: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1964: vec( 103): Unvectorized loop.
  1964: vec( 108): Unvectorizable loop structure.
  1983: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  1990: vec( 103): Unvectorized loop.
  1990: vec( 108): Unvectorizable loop structure.
  2009: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2020: vec( 103): Unvectorized loop.
  2020: vec( 108): Unvectorizable loop structure.
  2038: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2049: vec( 103): Unvectorized loop.
  2049: vec( 108): Unvectorizable loop structure.
  2067: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2076: vec( 103): Unvectorized loop.
  2076: vec( 118): Unvectorizable data type.: VARNAMES
  2078: vec( 103): Unvectorized loop.
  2078: vec( 108): Unvectorizable loop structure.
  2081: vec( 103): Unvectorized loop.
  2081: vec( 108): Unvectorizable loop structure.
  2118: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2120: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2136: vec( 103): Unvectorized loop.
  2136: vec( 108): Unvectorizable loop structure.
  2139: vec( 103): Unvectorized loop.
  2139: vec( 108): Unvectorizable loop structure.
  2188: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2190: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2225: vec( 103): Unvectorized loop.
  2225: vec( 118): Unvectorizable data type.: VARNAMES
  2227: vec( 103): Unvectorized loop.
  2227: vec( 108): Unvectorizable loop structure.
  2231: vec( 103): Unvectorized loop.
  2231: vec( 108): Unvectorizable loop structure.
  2271: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2273: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2311: vec( 103): Unvectorized loop.
  2311: vec( 108): Unvectorizable loop structure.
  2329: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2340: vec( 103): Unvectorized loop.
  2340: vec( 108): Unvectorizable loop structure.
  2369: vec( 103): Unvectorized loop.
  2369: vec( 118): Unvectorizable data type.: VARNAMES
  2370: vec( 103): Unvectorized loop.
  2370: vec( 118): Unvectorizable data type.: VARNAMES
  2372: vec( 103): Unvectorized loop.
  2372: vec( 108): Unvectorizable loop structure.
  2377: vec( 103): Unvectorized loop.
  2377: vec( 108): Unvectorizable loop structure.
  2432: vec( 103): Unvectorized loop.
  2432: vec( 108): Unvectorizable loop structure.
  2435: vec( 103): Unvectorized loop.
  2435: vec( 108): Unvectorizable loop structure.
  2528: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2530: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2533: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2535: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2566: vec( 103): Unvectorized loop.
  2566: vec( 118): Unvectorizable data type.: VARNAMES
  2568: vec( 103): Unvectorized loop.
  2568: vec( 108): Unvectorizable loop structure.
  2572: vec( 103): Unvectorized loop.
  2572: vec( 108): Unvectorizable loop structure.
  2642: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2644: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2647: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2649: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2679: vec( 103): Unvectorized loop.
  2679: vec( 118): Unvectorizable data type.: VARNAMES
  2680: vec( 103): Unvectorized loop.
  2680: vec( 118): Unvectorizable data type.: VARNAMES
  2682: vec( 103): Unvectorized loop.
  2682: vec( 108): Unvectorizable loop structure.
  2686: vec( 103): Unvectorized loop.
  2686: vec( 108): Unvectorizable loop structure.
  2703: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2705: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2735: vec( 103): Unvectorized loop.
  2735: vec( 108): Unvectorizable loop structure.
  2745: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2766: vec( 103): Unvectorized loop.
  2766: vec( 108): Unvectorizable loop structure.
  2779: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2802: vec( 103): Unvectorized loop.
  2802: vec( 118): Unvectorizable data type.: VARNAMES
  2803: vec( 103): Unvectorized loop.
  2803: vec( 118): Unvectorizable data type.: VARNAMES
  2806: vec( 103): Unvectorized loop.
  2806: vec( 108): Unvectorizable loop structure.
  2809: vec( 103): Unvectorized loop.
  2809: vec( 108): Unvectorizable loop structure.
  2824: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  2826: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3423: vec( 103): Unvectorized loop.
  3423: vec( 118): Unvectorizable data type.: VARNAMES
  3425: vec( 103): Unvectorized loop.
  3425: vec( 108): Unvectorizable loop structure.
  3428: vec( 103): Unvectorized loop.
  3428: vec( 108): Unvectorizable loop structure.
  3464: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3466: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3479: vec( 103): Unvectorized loop.
  3479: vec( 118): Unvectorizable data type.: VARNAMES
  3481: vec( 103): Unvectorized loop.
  3481: vec( 108): Unvectorizable loop structure.
  3484: vec( 103): Unvectorized loop.
  3484: vec( 108): Unvectorizable loop structure.
  3520: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3522: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3536: vec( 103): Unvectorized loop.
  3536: vec( 118): Unvectorizable data type.: VARNAMES
  3537: vec( 103): Unvectorized loop.
  3537: vec( 108): Unvectorizable loop structure.
  3566: vec( 103): Unvectorized loop.
  3566: vec( 118): Unvectorizable data type.: VARNAMES
  3567: vec( 103): Unvectorized loop.
  3567: vec( 108): Unvectorizable loop structure.
  3594: vec( 103): Unvectorized loop.
  3594: vec( 118): Unvectorizable data type.: VARNAMES
  3596: vec( 103): Unvectorized loop.
  3596: vec( 108): Unvectorizable loop structure.
  3599: vec( 103): Unvectorized loop.
  3599: vec( 108): Unvectorizable loop structure.
  3634: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3636: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3650: vec( 103): Unvectorized loop.
  3650: vec( 118): Unvectorizable data type.: VARNAMES
  3651: vec( 103): Unvectorized loop.
  3651: vec( 108): Unvectorizable loop structure.
  3671: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  3780: inl(1222): Inlined: NETCDFIO::DEFINETIMEATTRIBUTES
  3783: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::DEFINEMETADATA
  3790: inl(1222): Inlined: NETCDFIO::PUTMESHVARIABLES
 10347: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
 10364: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_2D_FOURBYTEINT
 10370: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT
  3919: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  3920: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_TEXT
  3805: opt(1418): Constant-length loop is expanded.
  3806: inl(1222): Inlined: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE
  3812: inl(1212): Source for routine not found.: GLOBAL::LOGMESSAGE
  3812: vec( 103): Unvectorized loop.
  3812: vec( 108): Unvectorizable loop structure.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNODALDATAFILE
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  1526:                 SUBROUTINE initNodalDataFile(dat, descript1, reterr,
  1527:                &   descript2, descript3)
  1528:                 USE SIZES, ONLY : MNWPROC, MNPROC, MYPROC
  1529:                 USE GLOBAL, ONLY : OutputDataDescript_t, NWS, C3D, IDEN, NE_G, NP_G
  1530:                 USE GLOBAL_3DVS, ONLY : NFEN
  1531:                 USE MESH, ONLY : ICS
  1532:                 USE HARM, ONLY: NAMEFR
  1533:                 IMPLICIT NONE
  1534:           C
  1535:                 type(nodalData), intent(inout) :: dat
  1536:                 type(OutputDataDescript_t), intent(inout) :: descript1
  1537:                 type(OutputDataDescript_t), intent(inout), optional :: descript2
  1538:                 type(OutputDataDescript_t), intent(inout), optional :: descript3
  1539:                 LOGICAL, intent(out) :: reterr
  1540:           C
  1541:                 INTEGER n    ! node counter
  1542:                 INTEGER iret ! success or failure of netcdf call
  1543:                 integer :: nodalLunsHA(2) = (/ 53, 54 /)
  1544:                 REAL(8),ALLOCATABLE :: defaultValue(:)
  1545:                 CHARACTER(len=1024) :: att_text  ! metadata
  1546:           C
  1547:                 call setMessageSource("initNodalDataFile")
  1548:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  1549:                 call allMessage(DEBUG,"Enter.")
  1550:           #endif
  1551:                 reterr = .false.
  1552:                 dat%myMesh => adcircMesh
  1553:                 IF (dat%myMesh%initialized .eqv..false.) THEN
  1554:                    dat%myMesh%num_nodes = NP_G
  1555:                    dat%myMesh%num_elems = NE_G
  1556:                    IF (C3D.eqv..true.) THEN
  1557:                       dat%myMesh%num_v_nodes = NFEN
  1558:                    ENDIF
  1559:                    dat%myMesh%nface_len = 3
  1560:                 ENDIF
  1561:                 ALLOCATE(dat%myTime%timenc(dat%myTime%timenc_len))
  1562:                 ALLOCATE(defaultValue(dat%myMesh%num_nodes))
  1563: V======>        defaultValue(:) = descript1%initial_value
  1564:                 dat%myTime%initialized = .true.
  1565:           C
  1566:           C     Initialize netCDF output file, creating a new one if necessary.
  1567:         I       CALL createNetCDFOutputFile(dat%ncid, dat%myFile, dat%myTime,
  1568:                &                            descript1, reterr)
  1569:                 !
  1570:                 ! if we didn't need to create a file, update metadata and return
  1571:                 IF (dat%myFile%createFile.eqv..false.) THEN
  1572:                    IF ( (reterr.eqv..false.) .and.
  1573:                &        ( (abs(descript1%specifier).eq.NETCDF3) .or.
  1574:                &          (abs(descript1%specifier).eq.NETCDF4) ) ) then
  1575:                       !
  1576:                       ! jgf52.08.25: This subroutine is called in the case where
  1577:                       ! a non-NetCDF min/max file will be written, but a NetCDF min/max
  1578:                       ! file will be read. If this is the case, then don't update metadata
  1579:                       ! in the netcdf file.
  1580:                       !
  1581:           Cobell...   The writers don't read the fort.15, so they need to
  1582:           C           assume ADCPREP has placed the correct info on the first
  1583:           C           pass, then call updateMetaData.
  1584:                       IF ((MNWPROC.GT.0).AND.
  1585:                &          (writerReadMetaData.eqv..false.).AND.
  1586:                &          (MYPROC.NE.0)) THEN
  1587:         I                 CALL ReadMetaData(dat%ncid,dat%myFile)
  1588:                           writerReadMetaData=.TRUE.
  1589:                           dat%myMesh%num_nodes = NP_G
  1590:                           dat%myMesh%num_elems = NE_G
  1591:                       ENDIF
  1592:                       ! jgf52.08.22: Only update meta data in serial, in parallel
  1593:                       ! this was updated by adcprep
  1594:                       if (mnproc.eq.1) then
  1595:         I                CALL updateMetaData(dat%ncid,dat%myFile)
  1596:                       endif
  1597:                    ENDIF
  1598:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  1599:                    call allMessage(DEBUG,"Return.")
  1600:           #endif
  1601:                    call unsetMessageSource()
  1602:                    RETURN
  1603:                 ENDIF
  1604:           C
  1605:                 IF (dat%myMesh%initialized.eqv..false.) THEN
  1606:                    CALL initNetCDFCoord(dat%myMesh)
  1607:                 ENDIF
  1608:                 CALL defineMeshVariables(dat%ncid, dat%myMesh, dat%myFile)
  1609:           
  1610:                 !WJP 02.20.2018 Writing in constituent information for harmonic file
  1611: *======>        IF (any(nodalLunsHA.eq.descript1 % lun)) THEN
  1612:         I          CALL defineHarmonicAnalysisParametersinNetcdfFile(descript1,nodaldat=dat)
  1613:                 ENDIF
  1614:           c
  1615:                 SELECT CASE(descript1 % lun)
  1616:           C
  1617:                    CASE(44)
  1618:                       dat%nodal_data_dims_3D(1) = dat%myMesh%num_nodes_dim_id
  1619:                       dat%nodal_data_dims_3D(2) = dat%myMesh%num_v_nodes_dim_id
  1620:                       dat%nodal_data_dims_3D(3) = dat%myTime%timenc_dim_id
  1621:                       iret = nf90_def_var(dat%ncid, 'sigmat', NF90_DOUBLE,
  1622:                &             dat%nodal_data_dims_3D, dat%u_nodal_data_id)
  1623:                       CALL check_err(iret)
  1624:                       IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
  1625:                          iret = nf90_def_var(dat%ncid, 'salinity', NF90_DOUBLE,
  1626:                &             dat%nodal_data_dims_3D, dat%v_nodal_data_id)
  1627:                          CALL check_err(iret)
  1628:                       ENDIF
  1629:                       IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
  1630:                          iret = nf90_def_var(dat%ncid, 'temperature', NF90_DOUBLE,
  1631:                &             dat%nodal_data_dims_3D, dat%w_nodal_data_id)
  1632:                          CALL check_err(iret)
  1633:                       ENDIF
  1634:                       ! sigma t
  1635: +======>              att_text = "water column vertically varying density"
  1636:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  1637:                &            'long_name', trim(att_text))
  1638:                       CALL check_err(iret)
  1639: +======>              att_text = "water_density_vertically_varying"
  1640:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  1641:                &             'standard_name', trim(att_text))
  1642:                       CALL check_err(iret)
  1643:         I             CALL putUnitsAttribute(dat%ncid, dat%u_nodal_data_id,
  1644:                &           "kg/m^3", "n/a")
  1645:                       ! salinity
  1646:                       IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
  1647: +======>                 att_text = "water column vertically varying salinity"
  1648:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  1649:                &            'long_name',trim(att_text))
  1650:                          CALL check_err(iret)
  1651: +======>                 att_text = "water_salinity_vertically_varying"
  1652:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  1653:                &             'standard_name', trim(att_text))
  1654:                          CALL check_err(iret)
  1655:         I                CALL putUnitsAttribute(dat%ncid, dat%v_nodal_data_id,
  1656:                &           "PSU", "PSU")
  1657:                       ENDIF
  1658:                       ! temperature
  1659:                       IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
  1660: +======>                 att_text = "water column vertically varying temperature"
  1661:                          iret = nf90_put_att(dat%ncid, dat%w_nodal_data_id,
  1662:                &            'long_name',trim(att_text))
  1663:                          CALL check_err(iret)
  1664: +======>                 att_text = "water_temperature_vertically_varying"
  1665:                          iret = nf90_put_att(dat%ncid, dat%w_nodal_data_id,
  1666:                &             'standard_name',trim(att_text))
  1667:                          CALL check_err(iret)
  1668:         I                CALL putUnitsAttribute(dat%ncid, dat%w_nodal_data_id,
  1669:                &           "Celsius", "Fahrenheit")
  1670:                       ENDIF
  1671:                    CASE(45)
  1672:                       dat%nodal_data_dims_3D(1) = dat%myMesh%num_nodes_dim_id
  1673:                       dat%nodal_data_dims_3D(2) = dat%myMesh%num_v_nodes_dim_id
  1674:                       dat%nodal_data_dims_3D(3) = dat%myTime%timenc_dim_id
  1675:                       iret = nf90_def_var(dat%ncid, 'u-vel3D', NF90_DOUBLE,
  1676:                &             dat%nodal_data_dims_3D, dat%u_nodal_data_id)
  1677:                       CALL check_err(iret)
  1678:                       iret = nf90_def_var(dat%ncid, 'v-vel3D', NF90_DOUBLE,
  1679:                &             dat%nodal_data_dims_3D, dat%v_nodal_data_id)
  1680:                       CALL check_err(iret)
  1681:                       iret = nf90_def_var(dat%ncid, 'w-vel3D', NF90_DOUBLE,
  1682:                &             dat%nodal_data_dims_3D, dat%w_nodal_data_id)
  1683:                       CALL check_err(iret)
  1684:                       if (ics.ne.1) then
  1685:                          ! u
  1686: +======>                 att_text =
  1687:                &         'water column vertically varying east/west velocity'
  1688:                          iret = nf90_put_att(dat%ncid,
  1689:                &         dat%u_nodal_data_id, 'long_name', trim(att_text))
  1690:                          CALL check_err(iret)
  1691: +======>                 att_text = 'eastward_water_velocity_vertically_varying'
  1692:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  1693:                &             'standard_name', trim(att_text))
  1694:                          CALL check_err(iret)
  1695:                          iret = nf90_put_att(dat%ncid,
  1696:                &             dat%u_nodal_data_id, 'positive','east')
  1697:                          CALL check_err(iret)
  1698:                          ! v
  1699: +======>                 att_text =
  1700:                &         'water column vertically varying north/south velocity'
  1701:                          iret = nf90_put_att(dat%ncid,
  1702:                &            dat%v_nodal_data_id, 'long_name',trim(att_text))
  1703:                          CALL check_err(iret)
  1704: +======>                 att_text = 'northward_water_velocity_vertically_varying'
  1705:                          iret = nf90_put_att(dat%ncid,
  1706:                &            dat%v_nodal_data_id, 'standard_name',trim(att_text))
  1707:                          CALL check_err(iret)
  1708:                          iret = nf90_put_att(dat%ncid,
  1709:                &            dat%v_nodal_data_id, 'positive', 'north')
  1710:                          CALL check_err(iret)
  1711:                          ! w
  1712: +======>                 att_text =
  1713:                &         'water column vertically varying up/down velocity'
  1714:                          iret = nf90_put_att(dat%ncid, dat%w_nodal_data_id,
  1715:                &            'long_name',trim(att_text))
  1716:                          CALL check_err(iret)
  1717: +======>                 att_text =
  1718:                &            'upward_water_velocity_vertically_varying'
  1719:                          iret = nf90_put_att(dat%ncid, dat%w_nodal_data_id,
  1720:                &           'standard_name', trim(att_text))
  1721:                          CALL check_err(iret)
  1722:                          iret = nf90_put_att(dat%ncid,
  1723:                &           dat%w_nodal_data_id, 'positive', 'up')
  1724:                          CALL check_err(iret)
  1725:                       else
  1726:                          ! u
  1727: +======>                 att_text
  1728:                & = 'water column vertically varying velocity in x-direction'
  1729:                          iret = nf90_put_att(dat%ncid,
  1730:                &            dat%u_nodal_data_id,'long_name', trim(att_text))
  1731:                          CALL check_err(iret)
  1732: +======>                 att_text = 'x_water_velocity_vertically_varying'
  1733:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  1734:                &             'standard_name', trim(att_text))
  1735:                          CALL check_err(iret)
  1736:                          iret = nf90_put_att(dat%ncid,
  1737:                &            dat%u_nodal_data_id, 'positive', 'right')
  1738:                          CALL check_err(iret)
  1739:                          ! v
  1740: +======>                 att_text =
  1741:                & 'water column vertically varying velocity in y-direction'
  1742:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  1743:                &           'long_name', trim(att_text))
  1744:                          CALL check_err(iret)
  1745: +======>                 att_text = 'station_y_water_velocity_vertically_varying'
  1746:                          iret = nf90_put_att(dat%ncid,
  1747:                &            dat%v_nodal_data_id, 'standard_name', trim(att_text))
  1748:                          CALL check_err(iret)
  1749:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  1750:                &           'positive', '90 degrees counterclockwise from x'//
  1751:                &            'water velocity')
  1752:                          CALL check_err(iret)
  1753:                          ! w
  1754: +======>                 att_text = 'water column vertically '
  1755:                &          //'varying velocity in z-direction'
  1756:                          iret = nf90_put_att(dat%ncid,
  1757:                &            dat%w_nodal_data_id, 'long_name', trim(att_text))
  1758:                          CALL check_err(iret)
  1759: +======>                 att_text = 'station_z_water_velocity_vertically_varying'
  1760:                          iret = nf90_put_att(dat%ncid,
  1761:                &            dat%w_nodal_data_id, 'standard_name', trim(att_text))
  1762:                          CALL check_err(iret)
  1763:                          iret = nf90_put_att(dat%ncid,
  1764:                &            dat%w_nodal_data_id, 'positive',
  1765:                &            '90 degrees counterclockwise from x water velocity')
  1766:                          CALL check_err(iret)
  1767:                       endif
  1768:         I             CALL putUnitsAttribute(dat%ncid,dat%u_nodal_data_id,
  1769:                &         'm s-1', 'ft s-1')
  1770:         I             CALL putUnitsAttribute(dat%ncid,dat%v_nodal_data_id,
  1771:                &         'm s-1', 'ft s-1')
  1772:         I             CALL putUnitsAttribute(dat%ncid,dat%w_nodal_data_id,
  1773:                &         'm s-1', 'ft s-1')
  1774:           
  1775:                    CASE(46) !       F O R T . 4 6
  1776:                       dat%nodal_data_dims_3D(1) = dat%myMesh%num_nodes_dim_id
  1777:                       dat%nodal_data_dims_3D(2) = dat%myMesh%num_v_nodes_dim_id
  1778:                       dat%nodal_data_dims_3D(3) = dat%myTime%timenc_dim_id
  1779:                       iret = nf90_def_var(dat%ncid, 'q20', NF90_DOUBLE,
  1780:                &          dat%nodal_data_dims_3D, dat%u_nodal_data_id)
  1781:                       CALL check_err(iret)
  1782:                       iret = nf90_def_var(dat%ncid, 'l', NF90_DOUBLE,
  1783:                &          dat%nodal_data_dims_3D, dat%v_nodal_data_id)
  1784:                       CALL check_err(iret)
  1785:                       iret = nf90_def_var(dat%ncid, 'ev', NF90_DOUBLE,
  1786:                &          dat%nodal_data_dims_3D, dat%w_nodal_data_id)
  1787:                       CALL check_err(iret)
  1788:                       ! q20
  1789: +======>              att_text =
  1790:                &  'water column vertically varying turbulent kinetic energy'
  1791:                       iret = nf90_put_att(dat%ncid,
  1792:                &         dat%u_nodal_data_id, 'long_name', trim(att_text))
  1793:                       CALL check_err(iret)
  1794: +======>              att_text =
  1795:                &         'turbulent_kinetic_energy_vertically_varying'
  1796:                       iret = nf90_put_att(dat%ncid,
  1797:                &             dat%u_nodal_data_id,'standard_name',trim(att_text))
  1798:                       CALL check_err(iret)
  1799:                       ! l
  1800: +======>              att_text =
  1801:                &         'water column vertically varying mixing length'
  1802:                       iret = nf90_put_att(dat%ncid,
  1803:                &            dat%v_nodal_data_id, 'long_name',trim(att_text))
  1804:                       CALL check_err(iret)
  1805: +======>              att_text =
  1806:                &            'water_mixing_length_vertically_varying'
  1807:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  1808:                &           'standard_name', trim(att_text))
  1809:                          CALL check_err(iret)
  1810:                       !  ev
  1811: +======>              att_text =
  1812:                &        'water column vertically varying eddy viscosity'
  1813:                          iret = nf90_put_att(dat%ncid,
  1814:                &            dat%w_nodal_data_id, 'long_name', trim(att_text))
  1815:                          CALL check_err(iret)
  1816: +======>                 att_text = 'water_eddy_viscosity_vertically_varying'
  1817:                          iret = nf90_put_att(dat%ncid,
  1818:                &            dat%w_nodal_data_id, 'standard_name', trim(att_text))
  1819:                          CALL check_err(iret)
  1820:           C            CALL putUnitsAttribute(dat%ncid,dat%u_nodal_data_id,
  1821:           C     &      'm s-2', 'ft s-1') !TODO: jgf49.48.01: units for q20??
  1822:         I             CALL putUnitsAttribute(dat%ncid,dat%v_nodal_data_id,
  1823:                &      "meters","n/a")
  1824:         I             CALL putUnitsAttribute(dat%ncid,dat%w_nodal_data_id,
  1825:                &      "m^2/s","n/a")
  1826:           C
  1827:                    CASE(47)
  1828:           C
  1829:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  1830:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  1831: +======>              dat%varnames(1) = 'qsurfkp1'
  1832:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  1833:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  1834:                       CALL check_err(iret)
  1835: +======>              att_text = "sea surface temperature at the k+1 time level"
  1836:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  1837:                &            'long_name', trim(att_text))
  1838:                       CALL check_err(iret)
  1839: +======>              att_text = "future sea surface temperature"
  1840:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  1841:                &             'standard_name', trim(att_text))
  1842:                       CALL check_err(iret)
  1843:         I             CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  1844:                &           "Celsius", "Fahrenheit")
  1845:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  1846:                &             '_FillValue', doubleval)
  1847:                       CALL check_err(iret)
  1848:           C        WJP 02.20.2018: added fort.53-54 harmonic outputs
  1849:                    CASE(53)
  1850:           C
  1851:                       dat%nodal_data_dims(2) = dat%myMesh%num_nodes_dim_id
  1852:                       dat%nodal_data_dims(1) = dat%myMesh%num_v_nodes_dim_id
  1853:           !           Amplitude
  1854: +======>              dat%varnames(1) = 'amp'
  1855:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  1856:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%ha_nodal_data_id)
  1857:                       CALL check_err(iret)
  1858:                       iret = nf90_put_att(dat%ncid, dat%ha_nodal_data_id,
  1859:                &            'long_name',
  1860:                &      'amplitude of tidal harmonic constituent elevation')
  1861:                       CALL check_err(iret)
  1862:                       iret = nf90_put_att(dat%ncid, dat%ha_nodal_data_id,
  1863:                &             'standard_name', 'hc_elev_amp')
  1864:                       CALL check_err(iret)
  1865:                       iret = nf90_put_att(dat%ncid, dat%ha_nodal_data_id,
  1866:                &             'coordinates', 'const y x')
  1867:                       CALL check_err(iret)
  1868:                       iret = nf90_put_att(dat%ncid, dat%ha_nodal_data_id,
  1869:                &             'location', 'node')
  1870:                       CALL check_err(iret)
  1871:                       iret = nf90_put_att(dat%ncid, dat%ha_nodal_data_id,
  1872:                &             'mesh', 'adcirc_mesh')
  1873:                       CALL check_err(iret)
  1874:         I             CALL putUnitsAttribute(dat%ncid, dat%ha_nodal_data_id,
  1875:                &           'm', 'ft')
  1876:                       iret = nf90_put_att(dat%ncid, dat%ha_nodal_data_id,
  1877:                &             '_FillValue', doubleval)
  1878:                       CALL check_err(iret)
  1879:           !           Phase
  1880: +======>              dat%varnames(1) = 'phs'
  1881:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  1882:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%hg_nodal_data_id)
  1883:                       CALL check_err(iret)
  1884:                       iret = nf90_put_att(dat%ncid, dat%hg_nodal_data_id,
  1885:                &            'long_name',
  1886:                &      'phase of tidal harmonic constituent elevation')
  1887:                       CALL check_err(iret)
  1888:                       iret = nf90_put_att(dat%ncid, dat%hg_nodal_data_id,
  1889:                &             'standard_name', 'hc_elev_phs')
  1890:                       CALL check_err(iret)
  1891:                       iret = nf90_put_att(dat%ncid, dat%hg_nodal_data_id,
  1892:                &             'coordinates', 'const y x')
  1893:                       CALL check_err(iret)
  1894:                       iret = nf90_put_att(dat%ncid, dat%hg_nodal_data_id,
  1895:                &             'location', 'node')
  1896:                       CALL check_err(iret)
  1897:                       iret = nf90_put_att(dat%ncid, dat%hg_nodal_data_id,
  1898:                &             'mesh', 'adcirc_mesh')
  1899:                       CALL check_err(iret)
  1900:         I             CALL putUnitsAttribute(dat%ncid, dat%hg_nodal_data_id,
  1901:                &           'deg', 'deg')
  1902:                       iret = nf90_put_att(dat%ncid, dat%hg_nodal_data_id,
  1903:                &             '_FillValue', doubleval)
  1904:                       CALL check_err(iret)
  1905:           C
  1906:                    CASE(54)
  1907:           C
  1908:                       dat%nodal_data_dims(2) = dat%myMesh%num_nodes_dim_id
  1909:                       dat%nodal_data_dims(1) = dat%myMesh%num_v_nodes_dim_id
  1910:           !           u Amplitude
  1911: +======>              dat%varnames(1) = 'u_amp'
  1912:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  1913:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%u_ha_nodal_data_id)
  1914:                       CALL check_err(iret)
  1915:                       iret = nf90_put_att(dat%ncid, dat%u_ha_nodal_data_id,
  1916:                &            'long_name',
  1917:                &      'amplitude of tidal harmonic constituent E-W velocity')
  1918:                       CALL check_err(iret)
  1919:                       iret = nf90_put_att(dat%ncid, dat%u_ha_nodal_data_id,
  1920:                &             'standard_name', 'hc_u_amp')
  1921:                       CALL check_err(iret)
  1922:                       iret = nf90_put_att(dat%ncid, dat%u_ha_nodal_data_id,
  1923:                &             'coordinates', 'const y x')
  1924:                       CALL check_err(iret)
  1925:                       iret = nf90_put_att(dat%ncid, dat%u_ha_nodal_data_id,
  1926:                &             'location', 'node')
  1927:                       CALL check_err(iret)
  1928:                       iret = nf90_put_att(dat%ncid, dat%u_ha_nodal_data_id,
  1929:                &             'mesh', 'adcirc_mesh')
  1930:                       CALL check_err(iret)
  1931:         I             CALL putUnitsAttribute(dat%ncid, dat%u_ha_nodal_data_id,
  1932:                &           'm/s', 'ft/s')
  1933:                       iret = nf90_put_att(dat%ncid, dat%u_ha_nodal_data_id,
  1934:                &             '_FillValue', doubleval)
  1935:                       CALL check_err(iret)
  1936:           !           u Phase
  1937: +======>              dat%varnames(1) = 'u_phs'
  1938:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  1939:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%u_hg_nodal_data_id)
  1940:                       CALL check_err(iret)
  1941:                       iret = nf90_put_att(dat%ncid, dat%u_hg_nodal_data_id,
  1942:                &            'long_name',
  1943:                &      'phase of tidal harmonic constituent E-W velocity')
  1944:                       CALL check_err(iret)
  1945:                       iret = nf90_put_att(dat%ncid, dat%u_hg_nodal_data_id,
  1946:                &             'standard_name', 'hc_u_phs')
  1947:                       CALL check_err(iret)
  1948:                       iret = nf90_put_att(dat%ncid, dat%u_hg_nodal_data_id,
  1949:                &             'coordinates', 'const y x')
  1950:                       CALL check_err(iret)
  1951:                       iret = nf90_put_att(dat%ncid, dat%u_hg_nodal_data_id,
  1952:                &             'location', 'node')
  1953:                       CALL check_err(iret)
  1954:                       iret = nf90_put_att(dat%ncid, dat%u_hg_nodal_data_id,
  1955:                &             'mesh', 'adcirc_mesh')
  1956:                       CALL check_err(iret)
  1957:         I             CALL putUnitsAttribute(dat%ncid, dat%u_hg_nodal_data_id,
  1958:                &           'deg', 'deg')
  1959:                       iret = nf90_put_att(dat%ncid, dat%u_hg_nodal_data_id,
  1960:                &             '_FillValue', doubleval)
  1961:                       CALL check_err(iret)
  1962:           !           v amplitude
  1963: +======>              dat%varnames(1) = 'v_amp'
  1964:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  1965:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%v_ha_nodal_data_id)
  1966:                       CALL check_err(iret)
  1967:                       iret = nf90_put_att(dat%ncid, dat%v_ha_nodal_data_id,
  1968:                &            'long_name',
  1969:                &      'amplitude of tidal harmonic constituent N-S velocity')
  1970:                       CALL check_err(iret)
  1971:                       iret = nf90_put_att(dat%ncid, dat%v_ha_nodal_data_id,
  1972:                &             'standard_name', 'hc_v_amp')
  1973:                       CALL check_err(iret)
  1974:                       iret = nf90_put_att(dat%ncid, dat%v_ha_nodal_data_id,
  1975:                &             'coordinates', 'const y x')
  1976:                       CALL check_err(iret)
  1977:                       iret = nf90_put_att(dat%ncid, dat%v_ha_nodal_data_id,
  1978:                &             'location', 'node')
  1979:                       CALL check_err(iret)
  1980:                       iret = nf90_put_att(dat%ncid, dat%v_ha_nodal_data_id,
  1981:                &             'mesh', 'adcirc_mesh')
  1982:                       CALL check_err(iret)
  1983:         I             CALL putUnitsAttribute(dat%ncid, dat%v_ha_nodal_data_id,
  1984:                &           'm/s', 'ft/s')
  1985:                       iret = nf90_put_att(dat%ncid, dat%v_ha_nodal_data_id,
  1986:                &             '_FillValue', doubleval)
  1987:                       CALL check_err(iret)
  1988:           !           v Phase
  1989: +======>              dat%varnames(1) = 'v_phs'
  1990:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  1991:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%v_hg_nodal_data_id)
  1992:                       CALL check_err(iret)
  1993:                       iret = nf90_put_att(dat%ncid, dat%v_hg_nodal_data_id,
  1994:                &            'long_name',
  1995:                &      'phase of tidal harmonic constituent N-S velocity')
  1996:                       CALL check_err(iret)
  1997:                       iret = nf90_put_att(dat%ncid, dat%v_hg_nodal_data_id,
  1998:                &             'standard_name', 'hc_v_phs')
  1999:                       CALL check_err(iret)
  2000:                       iret = nf90_put_att(dat%ncid, dat%v_hg_nodal_data_id,
  2001:                &             'coordinates', 'const y x')
  2002:                       CALL check_err(iret)
  2003:                       iret = nf90_put_att(dat%ncid, dat%v_hg_nodal_data_id,
  2004:                &             'location', 'node')
  2005:                       CALL check_err(iret)
  2006:                       iret = nf90_put_att(dat%ncid, dat%v_hg_nodal_data_id,
  2007:                &             'mesh', 'adcirc_mesh')
  2008:                       CALL check_err(iret)
  2009:         I             CALL putUnitsAttribute(dat%ncid, dat%v_hg_nodal_data_id,
  2010:                &           'deg', 'deg')
  2011:                       iret = nf90_put_att(dat%ncid, dat%v_hg_nodal_data_id,
  2012:                &             '_FillValue', doubleval)
  2013:                       CALL check_err(iret)
  2014:           C
  2015:                    CASE(63)
  2016:           C
  2017:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2018:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2019: +======>              dat%varnames(1) = 'zeta'
  2020:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2021:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  2022:                       CALL check_err(iret)
  2023:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2024:                &            'long_name', 'water surface elevation above geoid')
  2025:                       CALL check_err(iret)
  2026:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2027:                &             'standard_name', 'sea_surface_height_above_geoid')
  2028:                       CALL check_err(iret)
  2029:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2030:                &             'coordinates', 'time y x')
  2031:                       CALL check_err(iret)
  2032:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2033:                &             'location', 'node')
  2034:                       CALL check_err(iret)
  2035:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2036:                &             'mesh', 'adcirc_mesh')
  2037:                       CALL check_err(iret)
  2038:         I             CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2039:                &           'm', 'ft')
  2040:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2041:                &             '_FillValue', doubleval)
  2042:                       CALL check_err(iret)
  2043:           C
  2044:                    CASE(90)
  2045:           C
  2046:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2047:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2048: +======>              dat%varnames(1) = 'tau0'
  2049:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2050:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  2051:                       CALL check_err(iret)
  2052:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2053:                &            'long_name', 'primitive weighting in continuity equation')
  2054:                       CALL check_err(iret)
  2055:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2056:                &             'standard_name', 'primitive_weighting_in_continuity_equation')
  2057:                       CALL check_err(iret)
  2058:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2059:                &             'coordinates', 'time y x')
  2060:                       CALL check_err(iret)
  2061:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2062:                &             'location', 'node')
  2063:                       CALL check_err(iret)
  2064:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2065:                &             'mesh', 'adcirc_mesh')
  2066:                       CALL check_err(iret)
  2067:         I             CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2068:                &           '1', '1')
  2069:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2070:                &             '_FillValue', doubleval)
  2071:                       CALL check_err(iret)
  2072:           C
  2073:                    CASE(311)
  2074:           C
  2075: +======>              dat%varnames(1) = 'zeta_max'
  2076: +======>              dat%varnames(2) = 'time_of_zeta_max'
  2077:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2078:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2079:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  2080:                       CALL check_err(iret)
  2081:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  2082:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%time_max_nodal_data_id)
  2083:                       CALL check_err(iret)
  2084:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2085:                &            'long_name', 'maximum water surface elevation'//
  2086:                &            'above geoid')
  2087:                       CALL check_err(iret)
  2088:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2089:                &            'long_name', 'time of maximum water surface elevation'//
  2090:                &            'above geoid')
  2091:                       CALL check_err(iret)
  2092:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2093:                &             'standard_name', 'maximum_sea_surface_height_'//
  2094:                &             'above_geoid')
  2095:                       CALL check_err(iret)
  2096:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2097:                &             'standard_name', 'time_of_maximum_sea_surface_height_'//
  2098:                &             'above_geoid')
  2099:                       CALL check_err(iret)
  2100:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2101:                &             'coordinates', 'y x')
  2102:                       CALL check_err(iret)
  2103:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2104:                &             'coordinates', 'y x')
  2105:                       CALL check_err(iret)
  2106:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2107:                &             'location', 'node')
  2108:                       CALL check_err(iret)
  2109:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2110:                &             'location', 'node')
  2111:                       CALL check_err(iret)
  2112:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2113:                &             'mesh', 'adcirc_mesh')
  2114:                       CALL check_err(iret)
  2115:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2116:                &             'mesh', 'adcirc_mesh')
  2117:                       CALL check_err(iret)
  2118:         I             CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  2119:                &           'm', 'ft')
  2120:         I             CALL putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  2121:                &           'sec', 'sec')
  2122:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2123:                &             '_FillValue', doubleval)
  2124:                       CALL check_err(iret)
  2125:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2126:                &             '_FillValue', doubleval)
  2127:                       CALL check_err(iret)
  2128:           
  2129:           C
  2130:                    CASE(64)
  2131:           C
  2132: +======>              dat%varnames(1) = 'u-vel'
  2133: +======>              dat%varnames(2) = 'v-vel'
  2134:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2135:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2136:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2137:                &          NF90_DOUBLE, dat%nodal_data_dims, dat%u_nodal_data_id)
  2138:                       CALL check_err(iret)
  2139:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  2140:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%v_nodal_data_id)
  2141:                       CALL check_err(iret)
  2142:                       if (ics.ne.1) then
  2143:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2144:                &                'long_name',
  2145:                &   'water column vertically averaged east/west velocity')
  2146:                          CALL check_err(iret)
  2147:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2148:                &                'standard_name', 'eastward_water_velocity')
  2149:                          CALL check_err(iret)
  2150:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2151:                &                'positive', 'east')
  2152:                          CALL check_err(iret)
  2153:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2154:                &                'long_name',
  2155:                &    'water column vertically averaged north/south velocity')
  2156:                          CALL check_err(iret)
  2157:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2158:                &               'standard_name','northward_water_velocity')
  2159:                          CALL check_err(iret)
  2160:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2161:                &                'positive', 'north')
  2162:                          CALL check_err(iret)
  2163:                       else
  2164:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2165:                &                'long_name',
  2166:                &  'water column vertically averaged velocity in x-direction')
  2167:                          CALL check_err(iret)
  2168:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2169:                &               'standard_name',
  2170:                &               'x_water_velocity_depth_averaged')
  2171:                          CALL check_err(iret)
  2172:                          iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2173:                &                'positive', 'right')
  2174:                          CALL check_err(iret)
  2175:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2176:                &                'long_name',
  2177:                &       'water column vertically averaged velocity in y-direction')
  2178:                          CALL check_err(iret)
  2179:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2180:                &               'standard_name',
  2181:                &               'y_water_velocity_depth_averaged')
  2182:                          CALL check_err(iret)
  2183:                          iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2184:                &             'positive',
  2185:                &             '90 degrees counterclockwise from x water velocity')
  2186:                          CALL check_err(iret)
  2187:                       endif
  2188:         I             CALL putUnitsAttribute(dat%ncid, dat%u_nodal_data_id,
  2189:                &           'm s-1', 'ft s-1')
  2190:         I             CALL putUnitsAttribute(dat%ncid, dat%v_nodal_data_id,
  2191:                &           'm s-1', 'ft s-1')
  2192:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2193:                &           '_FillValue',  doubleval)
  2194:                       CALL check_err(iret)
  2195:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2196:                &           '_FillValue',  doubleval)
  2197:                       CALL check_err(iret)
  2198:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2199:                &           'dry_Value',  doubleval)
  2200:                       CALL check_err(iret)
  2201:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2202:                &            'dry_Value',  doubleval)
  2203:                       CALL check_err(iret)
  2204:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2205:                &           'coordinates',  'time y x')
  2206:                       CALL check_err(iret)
  2207:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2208:                &           'coordinates',  'time y x')
  2209:                       CALL check_err(iret)
  2210:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2211:                &           'location',  'node')
  2212:                       CALL check_err(iret)
  2213:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2214:                &           'location',  'node')
  2215:                       CALL check_err(iret)
  2216:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2217:                &           'mesh',  'adcirc_mesh')
  2218:                       CALL check_err(iret)
  2219:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2220:                &           'mesh',  'adcirc_mesh')
  2221:                       CALL check_err(iret)
  2222:           
  2223:                    CASE(312)
  2224: +======>              dat%varnames(1) = 'vel_max'
  2225: +======>              dat%varnames(2) = 'time_of_vel_max'
  2226:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2227:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2228:                &             NF90_DOUBLE, dat%nodal_data_dims_max,
  2229:                &             dat%max_nodal_data_id)
  2230:                       CALL check_err(iret)
  2231:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  2232:                &             NF90_DOUBLE, dat%nodal_data_dims_max,
  2233:                &             dat%time_max_nodal_data_id)
  2234:                       CALL check_err(iret)
  2235:           
  2236:                       if (ics.ne.1) then
  2237:                          iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2238:                &                'long_name',
  2239:                &         'maximum water column vertically averaged velocity')
  2240:                          CALL check_err(iret)
  2241:                          iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2242:                &                'long_name',
  2243:                &       'time of maximum water column vertically averaged velocity')
  2244:                          CALL check_err(iret)
  2245:                          iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2246:                &         'standard_name', 'maximum_water_velocity')
  2247:                          CALL check_err(iret)
  2248:                          iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2249:                &         'standard_name', 'time_of_maximum_water_velocity')
  2250:                          CALL check_err(iret)
  2251:                       else
  2252:                          iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2253:                &                'long_name',
  2254:                &                'maximum water column vertically averaged'//
  2255:                &                'velocity')
  2256:                          CALL check_err(iret)
  2257:                          iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2258:                &                'long_name',
  2259:                &                'time of maximum water column vertically averaged'//
  2260:                &                'velocity')
  2261:                          CALL check_err(iret)
  2262:                          iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2263:                &               'standard_name',
  2264:                &               'maximum_water_velocity_depth_averaged')
  2265:                          CALL check_err(iret)
  2266:                          iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2267:                &               'standard_name',
  2268:                &               'time_of_maximum_water_velocity_depth_averaged')
  2269:                          CALL check_err(iret)
  2270:                       endif
  2271:         I             CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  2272:                &           'm s-1', 'ft s-1')
  2273:         I             CALL putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  2274:                &           'sec', 'sec')
  2275:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2276:                &           '_FillValue',  doubleval)
  2277:                       CALL check_err(iret)
  2278:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2279:                &           '_FillValue',  doubleval)
  2280:                       CALL check_err(iret)
  2281:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2282:                &           'dry_Value',  doubleval)
  2283:                       CALL check_err(iret)
  2284:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2285:                &           'dry_Value',  doubleval)
  2286:                       CALL check_err(iret)
  2287:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2288:                &           'coordinates',  'y x')
  2289:                       CALL check_err(iret)
  2290:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2291:                &           'coordinates',  'y x')
  2292:                       CALL check_err(iret)
  2293:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2294:                &           'location',  'node')
  2295:                       CALL check_err(iret)
  2296:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2297:                &           'location',  'node')
  2298:                       CALL check_err(iret)
  2299:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2300:                &           'mesh',  'adcirc_mesh')
  2301:                       CALL check_err(iret)
  2302:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2303:                &           'mesh',  'adcirc_mesh')
  2304:                       CALL check_err(iret)
  2305:           C
  2306:                    CASE(173)
  2307:           C
  2308:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2309:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2310: +======>              dat%varnames(1) = 'winddrag'
  2311:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2312:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  2313:                       CALL check_err(iret)
  2314:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2315:                &            'long_name', 'wind drag coefficient at sea level')
  2316:                       CALL check_err(iret)
  2317:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2318:                &             'standard_name', 'wind drag coefficient')
  2319:                       CALL check_err(iret)
  2320:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2321:                &             'coordinates', 'time y x')
  2322:                       CALL check_err(iret)
  2323:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2324:                &             'location', 'node')
  2325:                       CALL check_err(iret)
  2326:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2327:                &             'mesh', 'adcirc_mesh')
  2328:                       CALL check_err(iret)
  2329:         I             CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2330:                &           'unitless', 'unitless')
  2331:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2332:                &             '_FillValue', doubleval)
  2333:                       CALL check_err(iret)
  2334:           C
  2335:                    CASE(73)
  2336:           C
  2337: +======>              dat%varnames(1) = 'pressure'
  2338:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2339:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2340:                       iret = nf90_def_var(dat%ncid,
  2341:                &              trim(dat%varnames(1)),NF90_DOUBLE,
  2342:                &              dat%nodal_data_dims,
  2343:                &              dat%nodal_data_id)
  2344:                       CALL check_err(iret)
  2345:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2346:                &             'long_name','air pressure at sea level')
  2347:                       CALL check_err(iret)
  2348:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2349:                &             'standard_name', 'air_pressure_at_sea_level')
  2350:                       CALL check_err(iret)
  2351:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id, 'units',
  2352:                &             'meters of water')
  2353:                       CALL check_err(iret)
  2354:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2355:                &            '_FillValue', doubleval)
  2356:                       CALL check_err(iret)
  2357:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2358:                &            'coordinates', 'time y x')
  2359:                       CALL check_err(iret)
  2360:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2361:                &            'location', 'node')
  2362:                       CALL check_err(iret)
  2363:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2364:                &            'mesh', 'adcirc_mesh')
  2365:                       CALL check_err(iret)
  2366:           C
  2367:                    CASE(313)
  2368:           C
  2369: +======>              dat%varnames(1) = 'pressure_min'
  2370: +======>              dat%varnames(2) = 'time_of_pressure_min'
  2371:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2372:                       iret = nf90_def_var(dat%ncid,
  2373:                &              trim(dat%varnames(1)),NF90_DOUBLE,
  2374:                &              dat%nodal_data_dims_max,
  2375:                &              dat%max_nodal_data_id)
  2376:                       CALL check_err(iret)
  2377:                       iret = nf90_def_var(dat%ncid,
  2378:                &              trim(dat%varnames(2)),NF90_DOUBLE,
  2379:                &              dat%nodal_data_dims_max,
  2380:                &              dat%time_max_nodal_data_id)
  2381:                       CALL check_err(iret)
  2382:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2383:                &             'long_name','minimum air pressure at sea level')
  2384:                       CALL check_err(iret)
  2385:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2386:                &             'long_name','time of minimum air pressure at sea level')
  2387:                       CALL check_err(iret)
  2388:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2389:                &             'standard_name', 'minimum_air_pressure_at_sea_level')
  2390:                       CALL check_err(iret)
  2391:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2392:                &             'standard_name',
  2393:                &         'time_of_minimum_air_pressure_at_sea_level')
  2394:                       CALL check_err(iret)
  2395:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,'units',
  2396:                &             'meters of water')
  2397:                       CALL check_err(iret)
  2398:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,'units',
  2399:                &             'seconds')
  2400:                       CALL check_err(iret)
  2401:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2402:                &            '_FillValue', doubleval)
  2403:                       CALL check_err(iret)
  2404:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2405:                &            '_FillValue', doubleval)
  2406:                       CALL check_err(iret)
  2407:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2408:                &            'coordinates', 'y x')
  2409:                       CALL check_err(iret)
  2410:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2411:                &            'coordinates', 'y x')
  2412:                       CALL check_err(iret)
  2413:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2414:                &            'location', 'node')
  2415:                       CALL check_err(iret)
  2416:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2417:                &            'location', 'node')
  2418:                       CALL check_err(iret)
  2419:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2420:                &            'mesh', 'adcirc_mesh')
  2421:                       CALL check_err(iret)
  2422:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2423:                &            'mesh', 'adcirc_mesh')
  2424:                       CALL check_err(iret)
  2425:           C
  2426:                    CASE(74)
  2427:           C
  2428: +======>              dat%varnames(1) = 'windx'
  2429: +======>              dat%varnames(2) = 'windy'
  2430:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2431:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2432:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2433:                &      NF90_DOUBLE, dat%nodal_data_dims,dat%u_nodal_data_id)
  2434:                       CALL check_err(iret)
  2435:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  2436:                &             NF90_DOUBLE, dat%nodal_data_dims,dat%v_nodal_data_id)
  2437:                       CALL check_err(iret)
  2438:                       if (ics.ne.1) then
  2439:                          select case(abs(nws))
  2440:                             case(1,2)
  2441:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2442:                &                      'long_name',
  2443:                &                       'wind stress u-component')
  2444:                                CALL check_err(iret)
  2445:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2446:                &                      'standard_name',
  2447:                &                      'eastward_surface_wind_stress')
  2448:                                CALL check_err(iret)
  2449:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2450:                &                      'positive', 'east')
  2451:                                CALL check_err(iret)
  2452:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2453:                &                       'long_name',
  2454:                &                       'wind stress v-component')
  2455:                                CALL check_err(iret)
  2456:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2457:                &                      'standard_name',
  2458:                &                      'northward_surface_wind_stress')
  2459:                                CALL check_err(iret)
  2460:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2461:                &                      'positive', 'north')
  2462:                                CALL check_err(iret)
  2463:                             case default
  2464:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2465:                &               'long_name', 'wind speed at 10m u-component')
  2466:                                CALL check_err(iret)
  2467:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2468:                &                      'standard_name', 'eastward_wind')
  2469:                                CALL check_err(iret)
  2470:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2471:                &                     'positive', 'east')
  2472:                                CALL check_err(iret)
  2473:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2474:                &                     'long_name', 'wind speed at 10m v-component')
  2475:                                CALL check_err(iret)
  2476:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2477:                &                       'standard_name', 'northward_wind')
  2478:                                CALL check_err(iret)
  2479:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2480:                &                      'positive', 'north')
  2481:                          end select
  2482:                       else
  2483:                          select case(abs(nws))
  2484:                             case(1,2)
  2485:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2486:                &                       'long_name','wind stress in x-direction')
  2487:                                CALL check_err(iret)
  2488:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2489:                &                      'standard_name','x_surface_wind_stress')
  2490:                                CALL check_err(iret)
  2491:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2492:                &                      'positive', 'right')
  2493:                                CALL check_err(iret)
  2494:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2495:                &                       'long_name','wind stress in y-direction')
  2496:                                CALL check_err(iret)
  2497:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2498:                &                       'standard_name','y_surface_wind_stress')
  2499:                                CALL check_err(iret)
  2500:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2501:                &                     'positive',
  2502:                & '90 degrees counterclockwise from wind velocity in x-direction')
  2503:                                CALL check_err(iret)
  2504:                             case default
  2505:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2506:                &                      'long_name','wind velocity in x-direction')
  2507:                                CALL check_err(iret)
  2508:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2509:                &                      'standard_name','x_wind')
  2510:                                CALL check_err(iret)
  2511:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2512:                &                     'positive', 'right')
  2513:           
  2514:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2515:                &                       'long_name','wind velocity in y-direction')
  2516:                                CALL check_err(iret)
  2517:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2518:                &                      'standard_name', 'y_wind')
  2519:                                CALL check_err(iret)
  2520:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2521:                &                      'positive',
  2522:                & '90 degrees counterclockwise from wind velocity in x-direction')
  2523:                                CALL check_err(iret)
  2524:                          end select
  2525:                       endif
  2526:                       select case(abs(nws))
  2527:                          case(1,2)
  2528:         I                call putUnitsAttribute(dat%ncid, dat%u_nodal_data_id,
  2529:                &              'm2 s-2', 'lbf s-2')
  2530:         I                call putUnitsAttribute(dat%ncid, dat%v_nodal_data_id,
  2531:                &              'm2 s-2', 'lbf s-2')
  2532:                          case default
  2533:         I                call putUnitsAttribute(dat%ncid, dat%u_nodal_data_id,
  2534:                &              'm s-1', 'ft s-1')
  2535:         I                call putUnitsAttribute(dat%ncid, dat%v_nodal_data_id,
  2536:                &              'm s-1', 'ft s-1')
  2537:                       end select
  2538:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2539:                &             '_FillValue', doubleval)
  2540:                       CALL check_err(iret)
  2541:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2542:                &             '_FillValue', doubleval)
  2543:                       CALL check_err(iret)
  2544:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2545:                &             'coordinates', 'time y x')
  2546:                       CALL check_err(iret)
  2547:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2548:                &             'coordinates', 'time y x')
  2549:                       CALL check_err(iret)
  2550:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2551:                &             'location', 'node')
  2552:                       CALL check_err(iret)
  2553:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2554:                &             'location', 'node')
  2555:                       CALL check_err(iret)
  2556:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2557:                &             'mesh', 'adcirc_mesh')
  2558:                       CALL check_err(iret)
  2559:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2560:                &             'mesh', 'adcirc_mesh')
  2561:                       CALL check_err(iret)
  2562:           C
  2563:                    CASE(314)
  2564:           C
  2565: +======>              dat%varnames(1) = 'wind_max'
  2566: +======>              dat%varnames(2) = 'time_of_wind_max'
  2567:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2568:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2569:                &             NF90_DOUBLE, dat%nodal_data_dims_max,
  2570:                &             dat%max_nodal_data_id)
  2571:                       CALL check_err(iret)
  2572:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  2573:                &             NF90_DOUBLE, dat%nodal_data_dims_max,
  2574:                &             dat%time_max_nodal_data_id)
  2575:                       CALL check_err(iret)
  2576:                       if (ics.ne.1) then
  2577:                          select case(abs(nws))
  2578:                             case(1,2)
  2579:                                iret=nf90_put_att(dat%ncid,dat%max_nodal_data_id,
  2580:                &                      'long_name',
  2581:                &                       'maximum wind stress')
  2582:                                CALL check_err(iret)
  2583:                                iret=nf90_put_att(dat%ncid,dat%time_max_nodal_data_id,
  2584:                &                      'long_name',
  2585:                &                       'time of maximum wind stress')
  2586:                                CALL check_err(iret)
  2587:                                iret=nf90_put_att(dat%ncid,dat%max_nodal_data_id,
  2588:                &                      'standard_name',
  2589:                &                      'maximum_surface_wind_stress')
  2590:                                CALL check_err(iret)
  2591:                                iret=nf90_put_att(dat%ncid,dat%time_max_nodal_data_id,
  2592:                &                      'standard_name',
  2593:                &                      'time_of_maximum_surface_wind_stress')
  2594:                                CALL check_err(iret)
  2595:                             case default
  2596:                                iret=nf90_put_att(dat%ncid,dat%max_nodal_data_id,
  2597:                &               'long_name', 'maximum wind velocity')
  2598:                                CALL check_err(iret)
  2599:                                iret=nf90_put_att(dat%ncid,dat%time_max_nodal_data_id,
  2600:                &               'long_name', 'time of maximum wind velocity')
  2601:                                CALL check_err(iret)
  2602:                                iret=nf90_put_att(dat%ncid,dat%max_nodal_data_id,
  2603:                &                      'standard_name', 'maximum_wind')
  2604:                                CALL check_err(iret)
  2605:                                iret=nf90_put_att(dat%ncid,dat%time_max_nodal_data_id,
  2606:                &                      'standard_name', 'time_of_maximum_wind')
  2607:                                CALL check_err(iret)
  2608:                          end select
  2609:                       else
  2610:                          select case(abs(nws))
  2611:                             case(1,2)
  2612:                                iret=nf90_put_att(dat%ncid,dat%max_nodal_data_id,
  2613:                &                    'long_name','maximum wind stress')
  2614:                                CALL check_err(iret)
  2615:                                iret=nf90_put_att(dat%ncid,dat%time_max_nodal_data_id,
  2616:                &                    'long_name','time of maximum wind stress')
  2617:                                CALL check_err(iret)
  2618:                                iret=nf90_put_att(dat%ncid,dat%max_nodal_data_id,
  2619:                &                    'standard_name','maximum_surface_wind_stress')
  2620:                                CALL check_err(iret)
  2621:                                iret=nf90_put_att(dat%ncid,dat%time_max_nodal_data_id,
  2622:                &                    'standard_name',
  2623:                &                    'time_of_maximum_surface_wind_stress')
  2624:                                CALL check_err(iret)
  2625:                             case default
  2626:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2627:                &                   'long_name','maximum wind velocity')
  2628:                             CALL check_err(iret)
  2629:                             iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2630:                &                   'long_name','time of maximum wind velocity')
  2631:                             CALL check_err(iret)
  2632:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2633:                &                   'standard_name','maximum_wind')
  2634:                             CALL check_err(iret)
  2635:                             iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2636:                &                   'standard_name','time_of_maximum_wind')
  2637:                             CALL check_err(iret)
  2638:                          end select
  2639:                       endif
  2640:                       select case(abs(nws))
  2641:                          case(1,2)
  2642:         I                call putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  2643:                &              'm2 s-2', 'lbf ft-2')
  2644:         I                call putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  2645:                &              'sec', 'sec')
  2646:                          case default
  2647:         I                call putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  2648:                &              'm s-1', 'ft s-1')
  2649:         I                call putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  2650:                &              'sec', 'sec')
  2651:                       end select
  2652:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2653:                &             '_FillValue', doubleval)
  2654:                       CALL check_err(iret)
  2655:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2656:                &             '_FillValue', doubleval)
  2657:                       CALL check_err(iret)
  2658:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2659:                &             'coordinates', 'y x')
  2660:                       CALL check_err(iret)
  2661:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2662:                &             'coordinates', 'y x')
  2663:                       CALL check_err(iret)
  2664:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2665:                &             'location', 'node')
  2666:                       CALL check_err(iret)
  2667:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2668:                &             'location', 'node')
  2669:                       CALL check_err(iret)
  2670:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2671:                &             'mesh', 'adcirc_mesh')
  2672:                       CALL check_err(iret)
  2673:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2674:                &             'mesh', 'adcirc_mesh')
  2675:                       CALL check_err(iret)
  2676:           C
  2677:                    CASE(315)
  2678:           C
  2679: +======>              dat%varnames(1) = 'radstress_max'
  2680: +======>              dat%varnames(2) = 'time_of_radstress_max'
  2681:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2682:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2683:                &            NF90_DOUBLE,dat%nodal_data_dims_max,
  2684:                &            dat%max_nodal_data_id)
  2685:                       CALL check_err(iret)
  2686:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  2687:                &            NF90_DOUBLE,dat%nodal_data_dims_max,
  2688:                &            dat%time_max_nodal_data_id)
  2689:                       CALL check_err(iret)
  2690:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2691:                &             'long_name', 'maximum radiation stress gradient')
  2692:                       CALL check_err(iret)
  2693:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2694:                &             'long_name',
  2695:                &             'time of maximum radiation stress gradient')
  2696:                       CALL check_err(iret)
  2697:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2698:                &             'standard_name', 'maximum_radiation_stress')
  2699:                       CALL check_err(iret)
  2700:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2701:                &             'standard_name', 'time_of_maximum_radiation_stress')
  2702:                       CALL check_err(iret)
  2703:         I             CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  2704:                &           'm-2 s-2', 'lbf ft-2')
  2705:         I             CALL putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  2706:                &           'sec', 'sec')
  2707:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2708:                &             '_FillValue', doubleval)
  2709:                       CALL check_err(iret)
  2710:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2711:                &             '_FillValue', doubleval)
  2712:                       CALL check_err(iret)
  2713:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2714:                &             'location', 'node')
  2715:                       CALL check_err(iret)
  2716:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2717:                &             'location', 'node')
  2718:                       CALL check_err(iret)
  2719:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2720:                &             'coordinates', 'y x')
  2721:                       CALL check_err(iret)
  2722:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2723:                &             'coordinates', 'y x')
  2724:                       CALL check_err(iret)
  2725:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2726:                &             'mesh', 'adcirc_mesh')
  2727:                       CALL check_err(iret)
  2728:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  2729:                &             'mesh', 'adcirc_mesh')
  2730:                       CALL check_err(iret)
  2731:           
  2732:                   CASE(77)
  2733: +======>              dat%varnames(1) = 'weir_dz'
  2734:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2735:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2736:                &        NF90_DOUBLE,dat%nodal_data_dims_max,dat%nodal_data_id)
  2737:                       CALL check_err(iret)
  2738:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2739:                &           'long_name',
  2740:                &           'elevation change in weir boundary condition')
  2741:                       CALL check_err(iret)
  2742:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2743:                &           'standard_name','weir_elevation_change')
  2744:                       CALL check_err(iret)
  2745:         I             CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2746:                &           'm', 'ft')
  2747:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2748:                &           'location', 'node')
  2749:                       CALL check_err(iret)
  2750:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2751:                &             'coordinates', 'y x')
  2752:                       CALL check_err(iret)
  2753:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2754:                &             '_FillValue', 0.0d0)
  2755:                       CALL check_err(iret)
  2756:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2757:                &             'mesh', 'adcirc_mesh')
  2758:                       CALL check_err(iret)
  2759:           
  2760:           C++ GML 20200528
  2761:                    CASE(93)
  2762: +======>              dat%varnames(1) = 'iceaf'
  2763:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2764:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2765:           
  2766:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2767:                &             NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  2768:                       CALL check_err(iret)
  2769:           
  2770:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2771:                &           'long_name', 'sea-ice af')
  2772:                       CALL check_err(iret)
  2773:           
  2774:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2775:                &           'standard_name', 'sea-ice area fraction')
  2776:                       CALL check_err(iret)
  2777:           
  2778:                       !
  2779:         I             call putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2780:                &                 'unitless', 'unitless')
  2781:           
  2782:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2783:                &             '_FillValue', doubleval)
  2784:                       CALL check_err(iret)
  2785:           
  2786:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2787:                &             'coordinates', 'time y x')
  2788:                       CALL check_err(iret)
  2789:           
  2790:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2791:                &             'location', 'node')
  2792:                       CALL check_err(iret)
  2793:           
  2794:           
  2795:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2796:                &             'mesh', 'adcirc_mesh')
  2797:                       CALL check_err(iret)
  2798:           C++
  2799:           
  2800:                    CASE(164)
  2801:           C
  2802: +======>              dat%varnames(1) = 'radstress_x'
  2803: +======>              dat%varnames(2) = 'radstress_y'
  2804:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2805:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2806:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2807:                &      NF90_DOUBLE, dat%nodal_data_dims, dat%u_nodal_data_id)
  2808:                       CALL check_err(iret)
  2809:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  2810:                &             NF90_DOUBLE, dat%nodal_data_dims,dat%v_nodal_data_id)
  2811:                       CALL check_err(iret)
  2812:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2813:                &            'long_name', 'radiation stress gradient x component')
  2814:                       CALL check_err(iret)
  2815:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2816:                &            'long_name', 'radiation stress gradient y component')
  2817:                       CALL check_err(iret)
  2818:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2819:                &             'standard_name', 'radiation_stress_gradient_x')
  2820:                       CALL check_err(iret)
  2821:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2822:                &             'standard_name', 'radiation_stress_gradient_y')
  2823:                       CALL check_err(iret)
  2824:         I             CALL putUnitsAttribute(dat%ncid, dat%u_nodal_data_id,
  2825:                &           'm-2 s-2', 'ft-2 s-2')
  2826:         I             CALL putUnitsAttribute(dat%ncid, dat%v_nodal_data_id,
  2827:                &           'm-2 s-2', 'ft-2 s-2')
  2828:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2829:                &             '_FillValue', doubleval)
  2830:                       CALL check_err(iret)
  2831:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2832:                &             '_FillValue', doubleval)
  2833:                       CALL check_err(iret)
  2834:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2835:                &             'location', 'node')
  2836:                       CALL check_err(iret)
  2837:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2838:                &             'location', 'node')
  2839:                       CALL check_err(iret)
  2840:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2841:                &             'coordinates', 'time y x')
  2842:                       CALL check_err(iret)
  2843:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2844:                &             'coordinates', 'time y x')
  2845:                       CALL check_err(iret)
  2846:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  2847:                &             'mesh', 'adcirc_mesh')
  2848:                       CALL check_err(iret)
  2849:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  2850:                &             'mesh', 'adcirc_mesh')
  2851:                       CALL check_err(iret)
  2852:           C
  2853:           
  2854:           #if defined CSWAN || defined ADCSWAN
  2855:           C
  2856:           C
  2857:                    CASE(301)
  2858:           C
  2859:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2860:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2861:                       dat%varnames(1) = 'swan_HS'
  2862:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2863:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  2864:                       CALL check_err(iret)
  2865:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2866:                &            'long_name', 'significant wave height')
  2867:                       CALL check_err(iret)
  2868:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2869:                &             'standard_name',
  2870:                &             'sea_surface_wave_significant_height')
  2871:                       CALL check_err(iret)
  2872:                       CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2873:                &           'm', 'ft')
  2874:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2875:                &             '_FillValue', doubleval)
  2876:                       CALL check_err(iret)
  2877:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2878:                &            'coordinates', 'time y x')
  2879:                       CALL check_err(iret)
  2880:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2881:                &            'location', 'node')
  2882:                       CALL check_err(iret)
  2883:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2884:                &            'mesh', 'adcirc_mesh')
  2885:                       CALL check_err(iret)
  2886:           C
  2887:                    CASE(316)
  2888:           C
  2889:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2890:                       dat%varnames(1) = 'swan_HS_max'
  2891:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2892:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  2893:                       CALL check_err(iret)
  2894:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2895:                &            'long_name', 'maximum significant wave height')
  2896:                       CALL check_err(iret)
  2897:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2898:                &             'standard_name',
  2899:                &             'maximum_sea_surface_wave_significant_height')
  2900:                       CALL check_err(iret)
  2901:                       CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  2902:                &           'm', 'ft')
  2903:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2904:                &             '_FillValue', doubleval)
  2905:                       CALL check_err(iret)
  2906:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2907:                &            'coordinates', 'time y x')
  2908:                       CALL check_err(iret)
  2909:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2910:                &            'location', 'node')
  2911:                       CALL check_err(iret)
  2912:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2913:                &            'mesh', 'adcirc_mesh')
  2914:                       CALL check_err(iret)
  2915:           C
  2916:                    CASE(302)
  2917:           C
  2918:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2919:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2920:                       dat%varnames(1) = 'swan_DIR'
  2921:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2922:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  2923:                       CALL check_err(iret)
  2924:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2925:                &            'long_name', 'mean wave direction')
  2926:                       CALL check_err(iret)
  2927:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2928:                &             'standard_name', 'sea_surface_wave_to_direction')
  2929:                       CALL check_err(iret)
  2930:                       CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2931:                &           'degrees', 'degrees_CW_from_East')
  2932:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2933:                &             '_FillValue', doubleval)
  2934:                       CALL check_err(iret)
  2935:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2936:                &            'coordinates', 'time y x')
  2937:                       CALL check_err(iret)
  2938:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2939:                &            'location', 'node')
  2940:                       CALL check_err(iret)
  2941:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2942:                &            'mesh', 'adcirc_mesh')
  2943:                       CALL check_err(iret)
  2944:           C
  2945:                    CASE(317)
  2946:           C
  2947:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  2948:                       dat%varnames(1) = 'swan_DIR_max'
  2949:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2950:                &             NF90_DOUBLE, dat%nodal_data_dims_max,
  2951:                &             dat%max_nodal_data_id)
  2952:                       CALL check_err(iret)
  2953:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2954:                &            'long_name', 'maximum mean wave direction')
  2955:                       CALL check_err(iret)
  2956:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2957:                &      'standard_name', 'maximum_sea_surface_wave_to_direction')
  2958:                       CALL check_err(iret)
  2959:                       CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  2960:                &           'degrees', 'degrees_CW_from_East')
  2961:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2962:                &             '_FillValue', doubleval)
  2963:                       CALL check_err(iret)
  2964:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2965:                &            'coordinates', 'y x')
  2966:                       CALL check_err(iret)
  2967:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2968:                &            'location', 'node')
  2969:                       CALL check_err(iret)
  2970:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  2971:                &            'mesh', 'adcirc_mesh')
  2972:                       CALL check_err(iret)
  2973:           C
  2974:                    CASE(303)
  2975:           C
  2976:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  2977:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  2978:                       dat%varnames(1) = 'swan_TM01'
  2979:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  2980:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  2981:                       CALL check_err(iret)
  2982:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2983:                &            'long_name', 'mean absolute wave period')
  2984:                       CALL check_err(iret)
  2985:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2986:                &             'standard_name',
  2987:                &      'sea_surface_wave_mean_period_from_variance_spectral'//
  2988:                &      '_density_first_frequency_moment')
  2989:                       CALL check_err(iret)
  2990:                       CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  2991:                &           's', 's')
  2992:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2993:                &             '_FillValue', doubleval)
  2994:                       CALL check_err(iret)
  2995:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2996:                &            'coordinates', 'time y x')
  2997:                       CALL check_err(iret)
  2998:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  2999:                &            'location', 'node')
  3000:                       CALL check_err(iret)
  3001:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3002:                &            'mesh', 'adcirc_mesh')
  3003:                       CALL check_err(iret)
  3004:           C
  3005:                    CASE(318)
  3006:           C
  3007:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3008:                       dat%varnames(1) = 'swan_TM01_max'
  3009:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3010:                &             NF90_DOUBLE, dat%nodal_data_dims_max,
  3011:                &             dat%max_nodal_data_id)
  3012:                       CALL check_err(iret)
  3013:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3014:                &            'long_name', 'maximum TM01 mean wave period')
  3015:                       CALL check_err(iret)
  3016:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3017:                &             'standard_name',
  3018:                &      'maximum_sea_surface_wave_mean_period_from_variance_'//
  3019:                &      'spectral_density_first_frequency_moment')
  3020:                       CALL check_err(iret)
  3021:                       CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3022:                &           's', 's')
  3023:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3024:                &             '_FillValue', doubleval)
  3025:                       CALL check_err(iret)
  3026:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3027:                &            'coordinates', 'y x')
  3028:                       CALL check_err(iret)
  3029:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3030:                &            'location', 'node')
  3031:                       CALL check_err(iret)
  3032:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3033:                &            'mesh', 'adcirc_mesh')
  3034:                       CALL check_err(iret)
  3035:           C
  3036:                    CASE(304)
  3037:           C
  3038:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  3039:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  3040:                       dat%varnames(1) = 'swan_TPS'
  3041:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3042:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  3043:                       CALL check_err(iret)
  3044:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3045:                &            'long_name', 'smoothed peak period')
  3046:                       CALL check_err(iret)
  3047:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3048:                &             'standard_name','sea_surface_wave_period_'//
  3049:                &             'at_variance_spectral_density_maximum')
  3050:                       CALL check_err(iret)
  3051:                       CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  3052:                &           's', 's')
  3053:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3054:                &             '_FillValue', doubleval)
  3055:                       CALL check_err(iret)
  3056:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3057:                &            'coordinates', 'time y x')
  3058:                       CALL check_err(iret)
  3059:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3060:                &            'location', 'node')
  3061:                       CALL check_err(iret)
  3062:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3063:                &            'mesh', 'adcirc_mesh')
  3064:                       CALL check_err(iret)
  3065:           C
  3066:                    CASE(319)
  3067:           C
  3068:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3069:                       dat%varnames(1) = 'swan_TPS_max'
  3070:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3071:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  3072:                       CALL check_err(iret)
  3073:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3074:                &            'long_name', 'maximum smoothed peak period')
  3075:                       CALL check_err(iret)
  3076:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3077:                &             'standard_name','maximum_sea_surface_wave_period'//
  3078:                &             '_at_variance_spectral_density_maximum')
  3079:                       CALL check_err(iret)
  3080:                       CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3081:                &           's', 's')
  3082:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3083:                &             '_FillValue', doubleval)
  3084:                       CALL check_err(iret)
  3085:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3086:                &            'coordinates', 'y x')
  3087:                       CALL check_err(iret)
  3088:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3089:                &            'location', 'node')
  3090:                       CALL check_err(iret)
  3091:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3092:                &            'mesh', 'adcirc_mesh')
  3093:                       CALL check_err(iret)
  3094:           C
  3095:                    CASE(305)
  3096:           C
  3097:                       dat%varnames(1) = 'swan_windx'
  3098:                       dat%varnames(2) = 'swan_windy'
  3099:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  3100:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  3101:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3102:                &      NF90_DOUBLE,dat%nodal_data_dims,dat%u_nodal_data_id)
  3103:                       CALL check_err(iret)
  3104:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  3105:                &             NF90_DOUBLE, dat%nodal_data_dims,dat%v_nodal_data_id)
  3106:                       CALL check_err(iret)
  3107:                       if (ics.ne.1) then
  3108:                          select case(abs(nws))
  3109:                             case(1,2)
  3110:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3111:                &                      'long_name',
  3112:                &                       'wind stress u-component')
  3113:                                CALL check_err(iret)
  3114:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3115:                &                      'standard_name',
  3116:                &                      'eastward_surface_wind_stress')
  3117:                                CALL check_err(iret)
  3118:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3119:                &                      'positive', 'east')
  3120:                                CALL check_err(iret)
  3121:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3122:                &                       'long_name',
  3123:                &                       'wind stress v-component')
  3124:                                CALL check_err(iret)
  3125:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3126:                &                      'standard_name',
  3127:                &                      'northward_surface_wind_stress')
  3128:                                CALL check_err(iret)
  3129:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3130:                &                      'positive', 'north')
  3131:                                CALL check_err(iret)
  3132:                             case default
  3133:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3134:                &               'long_name', 'wind speed at 10m u-component')
  3135:                                CALL check_err(iret)
  3136:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3137:                &                      'standard_name', 'eastward_wind')
  3138:                                CALL check_err(iret)
  3139:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3140:                &                     'positive', 'east')
  3141:                                CALL check_err(iret)
  3142:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3143:                &                     'long_name', 'wind speed at 10m v-component')
  3144:                                CALL check_err(iret)
  3145:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3146:                &                       'standard_name', 'northward_wind')
  3147:                                CALL check_err(iret)
  3148:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3149:                &                      'positive', 'north')
  3150:                          end select
  3151:                       else
  3152:                          select case(abs(nws))
  3153:                             case(1,2)
  3154:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3155:                &                       'long_name','wind stress in x-direction')
  3156:                                CALL check_err(iret)
  3157:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3158:                &                      'standard_name','x_surface_wind_stress')
  3159:                                CALL check_err(iret)
  3160:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3161:                &                      'positive', 'right')
  3162:                                CALL check_err(iret)
  3163:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3164:                &                       'long_name','wind stress in y-direction')
  3165:                                CALL check_err(iret)
  3166:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3167:                &                       'standard_name','y_surface_wind_stress')
  3168:                                CALL check_err(iret)
  3169:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3170:                &                     'positive',
  3171:                & '90 degrees counterclockwise from wind velocity in x-direction')
  3172:                             case default
  3173:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3174:                &                      'long_name','wind velocity in x-direction')
  3175:                                CALL check_err(iret)
  3176:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3177:                &                      'standard_name','x_wind')
  3178:                                CALL check_err(iret)
  3179:                                iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3180:                &                     'positive', 'right')
  3181:                                CALL check_err(iret)
  3182:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3183:                &                       'long_name','wind velocity in y-direction')
  3184:                                CALL check_err(iret)
  3185:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3186:                &                      'standard_name', 'y_wind')
  3187:                                CALL check_err(iret)
  3188:                                iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3189:                &                      'positive',
  3190:                & '90 degrees counterclockwise from wind velocity in x-direction')
  3191:                                CALL check_err(iret)
  3192:                          end select
  3193:                       endif
  3194:           
  3195:                       select case(abs(nws))
  3196:                          case(1,2)
  3197:                          call putUnitsAttribute(dat%ncid, dat%u_nodal_data_id,
  3198:                &                 'm2 s-2', 'ft s-2')
  3199:                          call putUnitsAttribute(dat%ncid, dat%v_nodal_data_id,
  3200:                &                 'm2 s-2', 'ft s-2')
  3201:                          case default
  3202:                          call putUnitsAttribute(dat%ncid, dat%u_nodal_data_id,
  3203:                &                 'm s-1', 'ft s-1')
  3204:                          call putUnitsAttribute(dat%ncid, dat%v_nodal_data_id,
  3205:                &                 'm s-1', 'ft s-1')
  3206:                       end select
  3207:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3208:                &             '_FillValue', doubleval)
  3209:                       CALL check_err(iret)
  3210:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3211:                &             '_FillValue', doubleval)
  3212:                       CALL check_err(iret)
  3213:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3214:                &             'location', 'node')
  3215:                       CALL check_err(iret)
  3216:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3217:                &             'location', 'node')
  3218:                       CALL check_err(iret)
  3219:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3220:                &             'coordinates', 'time y x')
  3221:                       CALL check_err(iret)
  3222:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3223:                &             'coordinates', 'time y x')
  3224:                       CALL check_err(iret)
  3225:                       iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3226:                &             'mesh', 'adcirc_mesh')
  3227:                       CALL check_err(iret)
  3228:                       iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3229:                &             'mesh', 'adcirc_mesh')
  3230:                       CALL check_err(iret)
  3231:           C
  3232:                    CASE(320)
  3233:           C
  3234:                       dat%varnames(1) = 'swan_wind_max'
  3235:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3236:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3237:                &      NF90_DOUBLE,dat%nodal_data_dims_max,dat%max_nodal_data_id)
  3238:                       CALL check_err(iret)
  3239:                       if (ics.ne.1) then
  3240:                          select case(abs(nws))
  3241:                             case(1,2)
  3242:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3243:                &                  'long_name',
  3244:                &                  'maximum wind stress')
  3245:                             CALL check_err(iret)
  3246:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3247:                &                   'standard_name',
  3248:                &                   'maximum_surface_wind_stress')
  3249:                             CALL check_err(iret)
  3250:                             case default
  3251:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3252:                &           'long_name', 'maximum wind velocity')
  3253:                             CALL check_err(iret)
  3254:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3255:                &                   'standard_name', 'maximum_wind')
  3256:                             CALL check_err(iret)
  3257:                          end select
  3258:                       else
  3259:                          select case(abs(nws))
  3260:                             case(1,2)
  3261:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3262:                &            'long_name','maximum wind stress')
  3263:                             CALL check_err(iret)
  3264:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3265:                &            'standard_name','maximum_surface_wind_stress')
  3266:                             CALL check_err(iret)
  3267:                             case default
  3268:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3269:                &            'long_name','maximum wind velocity')
  3270:                             CALL check_err(iret)
  3271:                             iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3272:                &            'standard_name','maximum_wind')
  3273:                             CALL check_err(iret)
  3274:                          end select
  3275:                       endif
  3276:                       select case(abs(nws))
  3277:                          case(1,2)
  3278:                          call putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3279:                &                 'm2 s-2', 'ft s-2')
  3280:                          case default
  3281:                          call putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3282:                &                 'm s-1', 'ft s-1')
  3283:                       end select
  3284:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3285:                &             '_FillValue', doubleval)
  3286:                       CALL check_err(iret)
  3287:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3288:                &             'location', 'node')
  3289:                       CALL check_err(iret)
  3290:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3291:                &             'coordinates', 'y x')
  3292:                       CALL check_err(iret)
  3293:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3294:                &             'mesh', 'adcirc_mesh')
  3295:                       CALL check_err(iret)
  3296:           C
  3297:                    CASE(306)
  3298:           C
  3299:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  3300:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  3301:                       dat%varnames(1) = 'swan_TM02'
  3302:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3303:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  3304:                       CALL check_err(iret)
  3305:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3306:                &            'long_name', 'mean absoloute zero crossing period')
  3307:                       CALL check_err(iret)
  3308:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3309:                &             'standard_name',
  3310:                &      'sea_surface_wave_mean_period_from_variance_spectral'//
  3311:                &      '_density_second_frequency_moment')
  3312:                       CALL check_err(iret)
  3313:                       CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  3314:                &           's', 's')
  3315:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3316:                &             '_FillValue', doubleval)
  3317:                       CALL check_err(iret)
  3318:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3319:                &            'coordinates', 'time y x')
  3320:                       CALL check_err(iret)
  3321:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3322:                &            'location', 'node')
  3323:                       CALL check_err(iret)
  3324:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3325:                &            'mesh', 'adcirc_mesh')
  3326:                       CALL check_err(iret)
  3327:           C
  3328:                    CASE(321)
  3329:           C
  3330:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3331:                       dat%varnames(1) = 'swan_TM02_max'
  3332:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3333:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  3334:                       CALL check_err(iret)
  3335:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3336:                &            'long_name', 'maximum TM02 mean wave period')
  3337:                       CALL check_err(iret)
  3338:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3339:                &             'standard_name',
  3340:                &      'maximum_sea_surface_wave_mean_period_from_variance_'//
  3341:                &      'spectral_density_second_frequency_moment')
  3342:                       CALL check_err(iret)
  3343:                       CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3344:                &           's', 's')
  3345:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3346:                &             '_FillValue', doubleval)
  3347:                       CALL check_err(iret)
  3348:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3349:                &            'coordinates', 'y x')
  3350:                       CALL check_err(iret)
  3351:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3352:                &            'location', 'node')
  3353:                       CALL check_err(iret)
  3354:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3355:                &            'mesh', 'adcirc_mesh')
  3356:                       CALL check_err(iret)
  3357:           C
  3358:                    CASE(307)
  3359:           C
  3360:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  3361:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  3362:                       dat%varnames(1) = 'swan_TMM10'
  3363:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3364:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  3365:                       CALL check_err(iret)
  3366:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3367:                &            'long_name', 'mean absolute wave period')
  3368:                       CALL check_err(iret)
  3369:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3370:                &             'standard_name',
  3371:                &      'sea_surface_wave_mean_period_from_variance_spectral'//
  3372:                &      '_density_inverse_frequency_moment')
  3373:                       CALL check_err(iret)
  3374:                       CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  3375:                &           's', 's')
  3376:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3377:                &             '_FillValue', doubleval)
  3378:                       CALL check_err(iret)
  3379:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3380:                &            'coordinates', 'time y x')
  3381:                       CALL check_err(iret)
  3382:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3383:                &            'location', 'node')
  3384:                       CALL check_err(iret)
  3385:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3386:                &            'mesh', 'adcirc_mesh')
  3387:                       CALL check_err(iret)
  3388:           C
  3389:                    CASE(322)
  3390:           C
  3391:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3392:                       dat%varnames(1) = 'swan_TMM10_max'
  3393:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3394:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  3395:                       CALL check_err(iret)
  3396:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3397:                &            'long_name', 'maximum TMM10 mean wave period')
  3398:                       CALL check_err(iret)
  3399:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3400:                &             'standard_name',
  3401:                &      'maximum_sea_surface_wave_mean_period_from_variance_'//
  3402:                &      'spectral_density_inverse_frequency_moment')
  3403:                       CALL check_err(iret)
  3404:                       CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3405:                &           's', 's')
  3406:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3407:                &             '_FillValue', doubleval)
  3408:                       CALL check_err(iret)
  3409:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3410:                &            'coordinates', 'y x')
  3411:                       CALL check_err(iret)
  3412:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3413:                &            'location', 'node')
  3414:                       CALL check_err(iret)
  3415:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3416:                &            'mesh', 'adcirc_mesh')
  3417:                       CALL check_err(iret)
  3418:           #endif
  3419:                    ! inundationtime.63
  3420:                    CASE(400)
  3421:           C
  3422: +======>              dat%varnames(1) = 'inun_time'
  3423: +======>              dat%varnames(2) = 'onset_inun_time'
  3424:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3425:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3426:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  3427:                       CALL check_err(iret)
  3428:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  3429:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%time_max_nodal_data_id)
  3430:                       CALL check_err(iret)
  3431:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3432:                &      'long_name', 'total time of inundation beyond the threshold')
  3433:                       CALL check_err(iret)
  3434:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3435:                &            'long_name',
  3436:                &            'time of onset of inundation beyond the threshold')
  3437:                       CALL check_err(iret)
  3438:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3439:                &             'standard_name',
  3440:                &             'total_time_of_inundation_beyond_the_threshold')
  3441:                       CALL check_err(iret)
  3442:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3443:                &             'standard_name',
  3444:                &             'time_of_onset_of_inundation_beyond_the_threshold')
  3445:                       CALL check_err(iret)
  3446:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3447:                &             'coordinates', 'y x')
  3448:                       CALL check_err(iret)
  3449:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3450:                &             'coordinates', 'y x')
  3451:                       CALL check_err(iret)
  3452:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3453:                &             'location', 'node')
  3454:                       CALL check_err(iret)
  3455:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3456:                &             'location', 'node')
  3457:                       CALL check_err(iret)
  3458:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3459:                &             'mesh', 'adcirc_mesh')
  3460:                       CALL check_err(iret)
  3461:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3462:                &             'mesh', 'adcirc_mesh')
  3463:                       CALL check_err(iret)
  3464:         I             CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3465:                &           'm', 'ft')
  3466:         I             CALL putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  3467:                &           'sec', 'sec')
  3468:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3469:                &             '_FillValue', doubleval)
  3470:                       CALL check_err(iret)
  3471:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3472:                &             '_FillValue', doubleval)
  3473:                       CALL check_err(iret)
  3474:           
  3475:                    ! maxinundepth.63
  3476:                    CASE(401)
  3477:           C
  3478: +======>              dat%varnames(1) = 'inun_max'
  3479: +======>              dat%varnames(2) = 'time_of_inun_max'
  3480:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3481:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3482:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  3483:                       CALL check_err(iret)
  3484:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  3485:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%time_max_nodal_data_id)
  3486:                       CALL check_err(iret)
  3487:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3488:                &            'long_name', 'maximum water inundation depth'//
  3489:                &            'above geoid')
  3490:                       CALL check_err(iret)
  3491:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3492:                &            'long_name', 'time of maximum water inundation depth'//
  3493:                &            'above geoid')
  3494:                       CALL check_err(iret)
  3495:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3496:                &             'standard_name', 'maximum_water_inundation_depth')
  3497:                       CALL check_err(iret)
  3498:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3499:                &             'standard_name',
  3500:                &             'time_of_maximum_water_inundation_depth')
  3501:                       CALL check_err(iret)
  3502:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3503:                &             'coordinates', 'y x')
  3504:                       CALL check_err(iret)
  3505:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3506:                &             'coordinates', 'y x')
  3507:                       CALL check_err(iret)
  3508:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3509:                &             'location', 'node')
  3510:                       CALL check_err(iret)
  3511:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3512:                &             'location', 'node')
  3513:                       CALL check_err(iret)
  3514:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3515:                &             'mesh', 'adcirc_mesh')
  3516:                       CALL check_err(iret)
  3517:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3518:                &             'mesh', 'adcirc_mesh')
  3519:                       CALL check_err(iret)
  3520:         I             CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3521:                &           'm', 'ft')
  3522:         I             CALL putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  3523:                &           'sec', 'sec')
  3524:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3525:                &             '_FillValue', doubleval)
  3526:                       CALL check_err(iret)
  3527:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3528:                &             '_FillValue', doubleval)
  3529:                       CALL check_err(iret)
  3530:           
  3531:                   ! initiallydry.63
  3532:                   CASE(402)
  3533:           C
  3534:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  3535:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  3536: +======>              dat%varnames(1) = 'initiallydry'
  3537:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3538:                &         NF90_INT, dat%nodal_data_dims, dat%nodal_data_id)
  3539:                       CALL check_err(iret)
  3540:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3541:                &            'long_name',
  3542:                &            'dry nodes at cold start')
  3543:                       CALL check_err(iret)
  3544:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3545:                &             'standard_name', 'initially_dry')
  3546:                       CALL check_err(iret)
  3547:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3548:                &             'coordinates', 'time y x')
  3549:                       CALL check_err(iret)
  3550:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3551:                &             'location', 'node')
  3552:                       CALL check_err(iret)
  3553:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3554:                &             'mesh', 'adcirc_mesh')
  3555:                       CALL check_err(iret)
  3556:           
  3557:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3558:                &             '_FillValue', intFillValue)
  3559:                       CALL check_err(iret)
  3560:           
  3561:                   ! endrisinginun.63
  3562:                   CASE(403)
  3563:           C
  3564:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  3565:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  3566: +======>              dat%varnames(1) = 'endrisinginun'
  3567:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3568:                &         NF90_INT, dat%nodal_data_dims, dat%nodal_data_id)
  3569:                       CALL check_err(iret)
  3570:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3571:                &            'long_name',
  3572:                &            'rising inundation at the end of the simulation')
  3573:                       CALL check_err(iret)
  3574:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3575:                &             'standard_name', 'end_rising_inundation')
  3576:                       CALL check_err(iret)
  3577:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3578:                &             'coordinates', 'time y x')
  3579:                       CALL check_err(iret)
  3580:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3581:                &             'location', 'node')
  3582:                       CALL check_err(iret)
  3583:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3584:                &             'mesh', 'adcirc_mesh')
  3585:                       CALL check_err(iret)
  3586:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3587:                &             '_FillValue', intFillValue)
  3588:                       CALL check_err(iret)
  3589:           C
  3590:                    ! everdried.63
  3591:                    CASE(404)
  3592:           C
  3593: +======>              dat%varnames(1) = 'everdried'
  3594: +======>              dat%varnames(2) = 'time_of_everdried'
  3595:                       dat%nodal_data_dims_max(1) = dat%myMesh%num_nodes_dim_id
  3596:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3597:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%max_nodal_data_id)
  3598:                       CALL check_err(iret)
  3599:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(2)),
  3600:                &      NF90_DOUBLE, dat%nodal_data_dims_max, dat%time_max_nodal_data_id)
  3601:                       CALL check_err(iret)
  3602:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3603:                &            'long_name', 'ever dried')
  3604:                       CALL check_err(iret)
  3605:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3606:                &            'long_name',
  3607:                &            'time of most recent drying occurrence')
  3608:                       CALL check_err(iret)
  3609:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3610:                &             'standard_name', 'ever_dried')
  3611:                       CALL check_err(iret)
  3612:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3613:                &             'standard_name',
  3614:                &             'time_of_most_recent_drying_occurrence')
  3615:                       CALL check_err(iret)
  3616:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3617:                &             'coordinates', 'y x')
  3618:                       CALL check_err(iret)
  3619:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3620:                &             'coordinates', 'y x')
  3621:                       CALL check_err(iret)
  3622:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3623:                &             'location', 'node')
  3624:                       CALL check_err(iret)
  3625:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3626:                &             'location', 'node')
  3627:                       CALL check_err(iret)
  3628:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3629:                &             'mesh', 'adcirc_mesh')
  3630:                       CALL check_err(iret)
  3631:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3632:                &             'mesh', 'adcirc_mesh')
  3633:                       CALL check_err(iret)
  3634:         I             CALL putUnitsAttribute(dat%ncid, dat%max_nodal_data_id,
  3635:                &           'unitless', 'unitless')
  3636:         I             CALL putUnitsAttribute(dat%ncid, dat%time_max_nodal_data_id,
  3637:                &           'sec', 'sec')
  3638:                       iret = nf90_put_att(dat%ncid, dat%max_nodal_data_id,
  3639:                &             '_FillValue', doubleval)
  3640:                       CALL check_err(iret)
  3641:                       iret = nf90_put_att(dat%ncid, dat%time_max_nodal_data_id,
  3642:                &             '_FillValue', doubleval)
  3643:                       CALL check_err(iret)
  3644:           
  3645:                    !jgf: dynamicWaterlevelCorrection.63
  3646:                    CASE(108)
  3647:           C
  3648:                       dat%nodal_data_dims(1) = dat%myMesh%num_nodes_dim_id
  3649:                       dat%nodal_data_dims(2) = dat%myTime%timenc_dim_id
  3650: +======>              dat%varnames(1) = 'dynamicWaterlevelCorrection'
  3651:                       iret = nf90_def_var(dat%ncid,trim(dat%varnames(1)),
  3652:                &         NF90_DOUBLE, dat%nodal_data_dims, dat%nodal_data_id)
  3653:                       CALL check_err(iret)
  3654:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3655:                &         'long_name',
  3656:                &         'dynamic water surface correction above water level')
  3657:                       CALL check_err(iret)
  3658:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3659:                &         'standard_name',
  3660:                &         'dynamic_sea_surface_correction_above_water_level')
  3661:                       CALL check_err(iret)
  3662:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3663:                &             'coordinates', 'time y x')
  3664:                       CALL check_err(iret)
  3665:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3666:                &             'location', 'node')
  3667:                       CALL check_err(iret)
  3668:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3669:                &             'mesh', 'adcirc_mesh')
  3670:                       CALL check_err(iret)
  3671:         I             CALL putUnitsAttribute(dat%ncid, dat%nodal_data_id,
  3672:                &           'm', 'ft')
  3673:                       iret = nf90_put_att(dat%ncid, dat%nodal_data_id,
  3674:                &             '_FillValue', doubleval)
  3675:                       CALL check_err(iret)
  3676:           
  3677:                    CASE DEFAULT
  3678:                       write(scratchMessage,
  3679:                &       '("No netCDF for files with unit number ",i0,".")') descript1 % lun
  3680:                       call allMessage(ERROR,scratchMessage)
  3681:                 END SELECT
  3682:           
  3683:                 IF (IDEN.ne.44) THEN
  3684:                    iret = nf90_put_att(dat%ncid, dat%u_nodal_data_id,
  3685:                &      '_FillValue',  doubleval)
  3686:                    CALL check_err(iret)
  3687:                    iret = nf90_put_att(dat%ncid, dat%v_nodal_data_id,
  3688:                &      '_FillValue',  doubleval)
  3689:                    CALL check_err(iret)
  3690:                    iret = nf90_put_att(dat%ncid, dat%w_nodal_data_id,
  3691:                &      '_FillValue',  doubleval)
  3692:                    CALL check_err(iret)
  3693:                 ENDIF
  3694:           
  3695:           
  3696:           C
  3697:           C     jgf50.44: Automatically turn on compression if we are using the
  3698:           C     netcdf4 file format.
  3699:           #ifdef NETCDF_CAN_DEFLATE
  3700:                 IF (abs(descript1%specifier).eq.NETCDF4) THEN
  3701:                    SELECT CASE(descript1 % lun)
  3702:                    CASE(44)
  3703:                       iret = nf90_def_var_deflate(dat%ncid, dat%u_nodal_data_id,
  3704:                &          1, 1, 2)
  3705:                       CALL check_err(iret)
  3706:                       IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
  3707:                          iret = nf90_def_var_deflate(dat%ncid, dat%v_nodal_data_id,
  3708:                &                1, 1, 2)
  3709:                          CALL check_err(iret)
  3710:                       ENDIF
  3711:                       IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
  3712:                          iret = nf90_def_var_deflate(dat%ncid, dat%w_nodal_data_id,
  3713:                &                1, 1, 2)
  3714:                          CALL check_err(iret)
  3715:                       ENDIF
  3716:                    CASE(45,46)
  3717:                       iret = nf90_def_var_deflate(dat%ncid, dat%u_nodal_data_id,
  3718:                &          1, 1, 2)
  3719:                       CALL check_err(iret)
  3720:                       iret = nf90_def_var_deflate(dat%ncid, dat%v_nodal_data_id,
  3721:                &             1, 1, 2)
  3722:                       CALL check_err(iret)
  3723:                       iret = nf90_def_var_deflate(dat%ncid, dat%w_nodal_data_id,
  3724:                &             1, 1, 2)
  3725:                       CALL check_err(iret)
  3726:                    CASE(47,63,73,77,90,93,173,301:304,306,307,402,403,108) ! GML added 93 20210727
  3727:                       iret = nf90_def_var_deflate(dat%ncid, dat%nodal_data_id,
  3728:                &             1, 1, 2)
  3729:                       CALL check_err(iret)
  3730:                    !WJP 02.20.2018: added fort.53-54 harmonic outputs
  3731:                    CASE(53)
  3732:                       iret = nf90_def_var_deflate(dat%ncid, dat%ha_nodal_data_id,
  3733:                &             1, 1, 2)
  3734:                       CALL check_err(iret)
  3735:                       iret = nf90_def_var_deflate(dat%ncid, dat%hg_nodal_data_id,
  3736:                &             1, 1, 2)
  3737:                       CALL check_err(iret)
  3738:                    CASE(54)
  3739:                       iret = nf90_def_var_deflate(dat%ncid, dat%u_ha_nodal_data_id,
  3740:                &             1, 1, 2)
  3741:                       CALL check_err(iret)
  3742:                       iret = nf90_def_var_deflate(dat%ncid, dat%u_hg_nodal_data_id,
  3743:                &             1, 1, 2)
  3744:                       CALL check_err(iret)
  3745:                       iret = nf90_def_var_deflate(dat%ncid, dat%v_ha_nodal_data_id,
  3746:                &             1, 1, 2)
  3747:                       CALL check_err(iret)
  3748:                       iret = nf90_def_var_deflate(dat%ncid, dat%v_hg_nodal_data_id,
  3749:                &             1, 1, 2)
  3750:                       CALL check_err(iret)
  3751:                    CASE(64,74,164,305)
  3752:                       iret = nf90_def_var_deflate(dat%ncid, dat%u_nodal_data_id,
  3753:                &             1, 1, 2)
  3754:                       CALL check_err(iret)
  3755:                       iret = nf90_def_var_deflate(dat%ncid, dat%v_nodal_data_id,
  3756:                &             1, 1, 2)
  3757:                       CALL check_err(iret)
  3758:                    CASE(311:315,400,401,404)  !adcirc max/min values
  3759:                       iret = nf90_def_var_deflate(dat%ncid, dat%max_nodal_data_id,
  3760:                &             1, 1, 2)
  3761:                       CALL check_err(iret)
  3762:                       iret = nf90_def_var_deflate(dat%ncid, dat%time_max_nodal_data_id,
  3763:                &             1, 1, 2)
  3764:                       CALL check_err(iret)
  3765:                    CASE(316:322)  !swan max/min values
  3766:                       iret = nf90_def_var_deflate(dat%ncid, dat%max_nodal_data_id,
  3767:                &             1, 1, 2)
  3768:                       CALL check_err(iret)
  3769:                    CASE DEFAULT ! should be unreachable
  3770:                       write(scratchMessage,
  3771:                &       '("No netCDF for files with unit number ",i0,".")') descript1 % lun
  3772:                       call allMessage(ERROR,scratchMessage)
  3773:                    END SELECT
  3774:                 ENDIF
  3775:           #endif
  3776:           C
  3777:           C     RJW added 9/13/2010
  3778:           C     to include time atributes in global data files
  3779:           C     Define time attributes
  3780:         I       CALL defineTimeAttributes(dat%ncid, dat%myTime)
  3781:           C
  3782:           C     define metadata and selected fort.15 parameters in netcdf file
  3783:                 CALL defineMetaData(dat%ncid)
  3784:           C
  3785:           C     Leave define mode
  3786:                 iret = nf90_enddef(dat%ncid)
  3787:                 CALL check_err(iret)
  3788:           C
  3789:           C     write mesh to netcdf file
  3790:         I       CALL putMeshVariables(dat%ncid,dat%myMesh)
  3791:                 !
  3792:                 ! jgf52.08.11: Initialize max/min values b/c they will be read in
  3793:                 ! at the start of a hotstart run. The square of the initialized
  3794:                 ! values will be compared with the sum of the squares of
  3795:                 ! vector values in the live running code. Uninitialized values
  3796:                 ! of -99999 become large and positive when squared, meaning that
  3797:                 ! we will never be able set a new peak in the running code if
  3798:                 ! we leave the max/min values uninitialized.
  3799:                 IF ( (dat%myFile%createFile.eqv..true.).and.
  3800:                &     (descript1%readMaxMin.eqv..true.)) THEN
  3801:                     iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,defaultValue)
  3802:                     CALL check_err(iret)
  3803:                 ENDIF
  3804:           C
  3805: *======>        IF (any(nodalLunsHA.eq.descript1 % lun)) THEN
  3806:         I         CALL addHarmonicAnalysisParametersToNetcdfFile(dat%ncid)
  3807:                 ENDIF
  3808:           C     now close the initialized netcdf file
  3809:                 iret = nf90_close(dat%ncid)
  3810:                 CALL check_err(iret)
  3811:           
  3812:                 call logMessage(INFO,'Initialized "'//trim(dat%myFile%filename)//
  3813:                &   '" file.')
  3814:           
  3815:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  3816:                 call allMessage(DEBUG,"Return.")
  3817:           #endif
  3818:                 call unsetMessageSource()
  3819:           C-----------------------------------------------------------------------
  3820:                 END SUBROUTINE initNodalDataFile


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNODALDATAFILE
INLINE LIST

  ROOT: NETCDFIO::INITNODALDATAFILE (netcdfio.F:1526)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:1547)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::CREATENETCDFOUTPUTFILE (netcdfio.F:1567)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:3957)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4001)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4021)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4025)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4041)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4074)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_CREATE (netcdfio.F:4079)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4080)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:4082)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4084)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:4086)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4088)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4094)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::READMETADATA (netcdfio.F:1587)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10800)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:10804)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10804)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_TEXT (netcdfio.F:10805)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10805)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_TEXT (netcdfio.F:10806)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10806)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_FOURBYTEINT (netcdfio.F:10807)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10807)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_FOURBYTEINT (netcdfio.F:10808)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10808)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10809)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10809)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10810)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10810)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10811)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10811)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10812)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10812)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10813)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10813)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10814)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10814)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10815)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10815)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10816)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10816)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10817)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10817)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:10818)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10818)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:10819)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10819)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:10820)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10820)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:10821)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10821)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:10822)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10822)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10826)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::UPDATEMETADATA (netcdfio.F:1595)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10726)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:10731)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10732)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_REDEF (netcdfio.F:10734)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10735)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10736)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10737)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10738)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10739)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10740)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10741)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10742)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10743)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10744)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10745)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10746)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10747)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10748)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10749)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10750)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10751)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10752)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10753)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10754)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10755)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10756)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10757)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10758)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10759)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10760)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10761)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10767)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10769)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:10770)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10771)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:10773)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10774)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10778)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:1601)
     *** Source for routine not found.
  -> NOINLINE: NETCDFIO::INITNETCDFCOORD (netcdfio.F:1606)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::DEFINEMESHVARIABLES (netcdfio.F:1608)
     *** Expansion routine is too big for automatic expansion.
  -> INLINE: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE (netcdfio.F:1612)
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3842)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3842)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3844)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3844)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3849)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3851)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3852)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3852)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3857)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3857)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3859)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3859)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3860)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3860)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3862)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3862)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3864)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3864)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3866)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3866)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3868)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3868)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3872)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3872)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3877)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3883)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3883)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3887)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3887)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3888)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3888)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3890)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3890)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3892)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3892)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3894)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3894)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3896)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3896)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1621)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1623)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1625)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1627)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1630)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1632)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1636)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1638)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1640)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1642)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1643)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1648)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1650)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1652)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1654)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1655)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1661)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1663)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1665)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1667)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1668)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1675)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1677)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1678)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1680)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1681)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1683)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1688)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1690)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1692)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1694)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1695)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1697)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1701)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1703)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1705)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1707)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1708)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1710)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1714)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1716)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1719)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1721)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1722)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1724)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1729)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1731)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1733)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1736)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1738)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1742)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1744)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1746)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1748)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1749)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1752)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1756)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1758)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1760)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1762)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1763)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1766)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1768)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1770)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1772)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1779)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1781)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1782)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1784)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1785)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1787)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1791)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1793)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1796)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1798)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1802)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1804)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1807)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1809)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1813)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1815)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1817)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1819)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1822)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1824)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1832)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1834)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1836)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1838)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1840)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1842)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1843)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1845)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1847)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1855)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1857)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1858)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1861)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1862)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1864)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1865)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1867)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1868)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1871)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1873)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1874)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1876)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1878)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1881)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1883)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1884)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1887)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1888)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1890)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1891)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1893)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1894)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1896)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1897)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1899)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1900)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1902)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1904)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1912)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1914)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1915)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1918)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1919)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1921)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1922)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1924)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1925)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1927)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1928)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1930)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1931)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1933)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1935)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1938)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1940)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1941)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1944)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1945)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1947)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1948)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1950)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1951)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1953)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1954)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1956)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1957)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1959)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1961)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1964)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1966)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1967)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1970)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1971)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1973)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1974)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1976)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1977)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1979)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1980)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1982)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:1983)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:1985)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1987)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:1990)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1992)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1993)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1996)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:1997)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:1999)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2000)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2002)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2003)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2005)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2006)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2008)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2009)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2011)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2013)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2020)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2022)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2023)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2025)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2026)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2028)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2029)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2031)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2032)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2034)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2035)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2037)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2038)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2040)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2042)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2049)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2051)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2052)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2054)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2055)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2057)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2058)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2060)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2061)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2063)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2064)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2066)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2067)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2069)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2071)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2078)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2080)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2081)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2083)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2084)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2087)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2088)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2091)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2092)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2095)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2096)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2099)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2100)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2102)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2103)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2105)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2106)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2108)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2109)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2111)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2112)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2114)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2115)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2117)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2118)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2120)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2122)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2124)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2125)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2127)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2136)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2138)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2139)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2141)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2143)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2146)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2147)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2149)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2150)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2152)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2153)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2156)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2157)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2159)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2160)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2162)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2164)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2167)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2168)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2171)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2172)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2174)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2175)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2178)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2179)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2182)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2183)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2186)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2188)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2190)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2192)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2194)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2195)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2197)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2198)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2200)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2201)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2203)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2204)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2206)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2207)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2209)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2210)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2212)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2213)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2215)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2216)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2218)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2219)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2221)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2227)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2230)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2231)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2234)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2237)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2240)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2241)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2244)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2245)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2247)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2248)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2250)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2252)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2256)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2257)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2261)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2262)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2265)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2266)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2269)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2271)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2273)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2275)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2277)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2278)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2280)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2281)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2283)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2284)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2286)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2287)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2289)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2290)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2292)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2293)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2295)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2296)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2298)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2299)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2301)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2302)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2304)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2311)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2313)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2314)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2316)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2317)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2319)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2320)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2322)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2323)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2325)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2326)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2328)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2329)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2331)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2333)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2340)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2344)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2345)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2347)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2348)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2350)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2351)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2353)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2354)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2356)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2357)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2359)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2360)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2362)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2363)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2365)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2372)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2376)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2377)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2381)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2382)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2384)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2385)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2387)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2388)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2390)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2391)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2394)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2395)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2397)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2398)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2400)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2401)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2403)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2404)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2406)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2407)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2409)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2410)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2412)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2413)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2415)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2416)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2418)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2419)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2421)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2422)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2424)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2432)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2434)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2435)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2437)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2441)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2444)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2445)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2448)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2449)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2451)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2452)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2455)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2456)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2459)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2460)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2462)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2464)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2466)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2467)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2469)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2470)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2472)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2473)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2475)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2476)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2478)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2479)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2485)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2487)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2488)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2490)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2491)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2493)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2494)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2496)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2497)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2499)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2500)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2503)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2505)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2507)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2508)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2510)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2511)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2514)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2516)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2517)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2519)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2520)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2523)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2528)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2530)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2533)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2535)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2538)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2540)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2541)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2543)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2544)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2546)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2547)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2549)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2550)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2552)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2553)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2555)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2556)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2558)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2559)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2561)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2568)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2571)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2572)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2575)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2579)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2582)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2583)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2586)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2587)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2590)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2591)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2594)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2596)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2598)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2599)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2601)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2602)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2604)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2605)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2607)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2612)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2614)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2615)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2617)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2618)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2620)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2621)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2624)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2626)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2628)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2629)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2631)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2632)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2634)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2635)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2637)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2642)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2644)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2647)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2649)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2652)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2654)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2655)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2657)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2658)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2660)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2661)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2663)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2664)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2666)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2667)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2669)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2670)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2672)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2673)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2675)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2682)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2685)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2686)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2689)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2690)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2692)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2693)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2696)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2697)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2699)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2700)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2702)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2703)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2705)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2707)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2709)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2710)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2712)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2713)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2715)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2716)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2718)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2719)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2721)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2722)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2724)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2725)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2727)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2728)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2730)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2737)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2738)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2741)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2742)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2744)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2745)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2747)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2749)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2750)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2752)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2753)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2755)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2756)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2758)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2766)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2768)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2770)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2772)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2774)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2776)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2779)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2782)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2784)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2786)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2788)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2790)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2792)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2795)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2797)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2806)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2808)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:2809)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2811)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2812)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2814)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2815)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2817)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2818)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2820)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2821)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2823)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2824)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:2826)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2828)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2830)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:2831)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2833)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2834)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2836)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2837)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2839)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2840)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2842)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2843)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2845)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2846)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2848)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:2849)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:2851)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3425)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3427)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3428)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3430)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3431)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3433)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3434)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3437)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3438)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3441)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3442)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3445)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3446)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3448)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3449)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3451)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3452)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3454)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3455)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3457)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3458)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3460)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3461)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3463)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:3464)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:3466)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3468)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3470)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3471)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3473)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3481)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3483)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3484)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3486)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3487)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3490)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3491)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3494)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3495)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3497)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3498)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3501)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3502)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3504)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3505)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3507)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3508)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3510)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3511)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3513)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3514)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3516)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3517)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3519)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:3520)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:3522)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3524)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3526)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3527)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3529)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3537)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3539)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3540)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3543)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3544)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3546)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3547)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3549)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3550)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3552)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3553)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3555)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:3557)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3559)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3567)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3569)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3570)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3573)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3574)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3576)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3577)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3579)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3580)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3582)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3583)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3585)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:3586)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3588)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3596)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3598)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3599)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3601)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3602)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3604)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3605)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3608)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3609)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3611)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3612)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3615)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3616)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3618)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3619)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3621)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3622)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3624)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3625)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3627)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3628)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3630)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3631)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3633)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:3634)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:3636)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3638)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3640)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3641)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3643)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3651)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3653)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3654)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3657)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3658)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3661)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3662)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3664)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3665)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3667)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3668)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3670)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:3671)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3673)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3675)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:3680)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3684)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3686)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3687)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3689)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:3690)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3692)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINETIMEATTRIBUTES (netcdfio.F:3780)
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10431)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10433)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10434)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10436)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10438)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10440)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10441)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10443)
      *** Source for routine not found.
  -> NOINLINE: NETCDFIO::DEFINEMETADATA (netcdfio.F:3783)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:3786)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3787)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTMESHVARIABLES (netcdfio.F:3790)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10341)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10347)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10348)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10349)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10350)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10352)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10353)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10357)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10358)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_FOURBYTEINT (netcdfio.F:10364)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10366)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10370)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10371)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10372)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10374)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10375)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10376)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10380)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10381)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10382)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10383)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10384)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10385)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10387)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10388)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10389)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10390)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10392)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10393)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10394)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10395)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10397)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10398)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10399)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10400)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10401)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10402)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10411)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3801)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3802)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE (netcdfio.F:3806)
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3919)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3919)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_TEXT (netcdfio.F:3920)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3920)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3922)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3922)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3923)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3923)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3924)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3924)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3925)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3925)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3926)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3926)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:3809)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3810)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::LOGMESSAGE (netcdfio.F:3812)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:3818)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNODALDATAFILE
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:1563)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:1563)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:1563)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3997)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3593)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3593)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3594)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3594)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3594)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3594)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3596)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3596)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3599)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3599)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3566)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3566)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3566)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3566)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3567)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3567)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3536)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3536)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3536)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3536)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3537)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3537)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3478)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3478)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3479)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3479)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3479)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3479)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3481)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3481)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3484)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3484)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3422)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3422)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3423)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3423)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3423)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3423)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3425)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3425)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3428)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3428)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2679)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2679)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2679)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2679)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2680)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2680)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2680)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2680)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2682)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2682)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2686)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2686)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2565)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2565)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2566)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2566)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2566)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2566)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2568)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2568)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2572)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2572)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2369)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2369)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2369)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2369)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2370)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2370)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2370)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2370)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2372)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2372)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2377)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2377)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2224)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2224)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2225)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2225)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2225)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2225)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2227)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2227)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2231)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2231)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2075)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2075)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2076)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2076)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2076)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2076)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2078)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2078)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2081)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2081)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2310)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2310)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2311)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2311)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2802)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2802)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2802)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2802)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2803)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:2803)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2803)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2803)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2806)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2806)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2809)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2809)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3650)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3650)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3650)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:3650)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3651)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3651)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2762)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2762)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2766)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2766)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2048)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2048)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2049)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2049)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2733)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2733)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2735)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2735)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2428)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2428)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2429)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2429)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2432)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2432)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2435)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2435)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2337)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2337)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2340)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2340)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2132)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2132)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2133)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2133)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2136)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2136)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2139)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2139)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2019)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:2019)
  LOOP END

  LOOP BEGIN: (netcdfio.F:2020)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:2020)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1911)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:1911)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1912)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1912)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1937)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:1937)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1938)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1938)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1963)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:1963)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1964)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1964)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1989)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:1989)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1990)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1990)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1854)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:1854)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1855)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1855)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1880)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:1880)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1881)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1831)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VARNAMES (netcdfio.F:1831)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1832)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1832)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1835)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1835)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1835)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1835)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1836)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1836)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1839)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1839)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1839)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1839)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1840)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1840)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1789)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1789)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1789)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1789)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1791)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1791)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1794)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1794)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1794)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1794)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1796)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1796)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1800)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1800)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1800)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1800)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1802)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1802)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1805)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1805)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1805)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1805)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1807)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1807)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1811)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1811)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1811)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1811)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1813)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1813)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1816)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1816)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1816)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1816)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1817)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1817)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1727)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1727)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1727)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1727)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1729)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1729)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1732)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1732)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1732)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1732)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1733)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1733)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1740)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1740)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1740)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1740)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1742)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1742)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1745)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1745)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1745)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1745)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1746)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1746)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1754)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1754)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1754)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1754)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1756)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1756)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1759)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1759)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1759)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1759)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1760)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1760)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1686)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1686)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1686)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1686)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1688)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1688)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1691)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1691)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1691)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1691)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1692)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1692)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1699)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1699)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1699)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1699)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1701)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1701)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1704)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1704)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1704)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1704)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1705)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1705)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1712)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1712)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1712)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1712)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1714)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1714)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1717)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1717)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1717)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1717)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1719)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1719)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1635)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1635)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1635)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1635)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1636)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1636)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1639)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1639)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1639)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1639)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1640)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1640)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1647)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1647)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1647)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1647)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1648)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1648)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1651)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1651)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1651)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1651)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1652)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1652)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1660)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1660)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1660)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1660)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1661)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1661)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1664)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:1664)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1664)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:1664)
  LOOP END

  LOOP BEGIN: (netcdfio.F:1665)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:1665)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. : DATE_STRING (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10438)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3812)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3812)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNDES (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNID (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNODALDATAFILE
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 51 [s0-s12 s15-s16 s18-s44 s55-s63]
      Vector registers         :  1 [v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 16832 bytes
      Register spill area      :  1936 bytes
      Parameter area           :   120 bytes
      Register save area       :   176 bytes
      User data area           : 14592 bytes
      Others                   :     8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:1563)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3593)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3594)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3594)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3596)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3599)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3566)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3566)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3567)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3536)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3536)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3537)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3478)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3479)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3479)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3481)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3484)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3422)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3423)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3423)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3425)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3428)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2679)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2679)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2680)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2680)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2682)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2686)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2565)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2566)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2566)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2568)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2572)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2369)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2369)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2370)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2370)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2372)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2377)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2224)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2225)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2225)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2227)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2231)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2075)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2076)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2076)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2078)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2081)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2310)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2311)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2802)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2802)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2803)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2803)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2806)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2809)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3650)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3650)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3651)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2762)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2766)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2048)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2049)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2733)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2735)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2428)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2429)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2432)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2435)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2337)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2340)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2132)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2133)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2136)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2139)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:2019)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:2020)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1911)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1912)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1937)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1938)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1963)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1964)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1989)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1990)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1854)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1855)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1880)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1881)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1831)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1832)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1835)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1835)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1836)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1839)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1839)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1840)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1789)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1789)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1791)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1794)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1794)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1796)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1800)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1800)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1802)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1805)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1805)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1807)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1811)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1811)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1813)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1816)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1816)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1817)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1727)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1727)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1729)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1732)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1732)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1733)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1740)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1740)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1742)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1745)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1745)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1746)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1754)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1754)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1756)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1759)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1759)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1760)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1686)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1686)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1688)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1691)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1691)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1692)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1699)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1699)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1701)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1704)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1704)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1705)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1712)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1712)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1714)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1717)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1717)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1719)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1635)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1635)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1636)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1639)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1639)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1640)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1647)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1647)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1648)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1651)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1651)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1652)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1660)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1660)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1661)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1664)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:1664)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:1665)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3812)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  3842: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_DIM
  3842: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  3849: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
  3852: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
  3855: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_ONEDIM


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  3830:                 SUBROUTINE defineHarmonicAnalysisParametersInNetcdfFile(descript1,
  3831:                &                                                        nodaldat,
  3832:                &                                                        stationdat)
  3833:                   USE GLOBAL, ONLY : OutputDataDescript_t
  3834:                   IMPLICIT NONE
  3835:                   type(nodalData), intent(inout),optional :: nodaldat
  3836:                   type(stationData), intent(inout),optional :: stationdat
  3837:                   type(OutputDataDescript_t), intent(inout) :: descript1
  3838:                   INTEGER :: iret,dmy
  3839:           
  3840:                   IF(PRESENT(nodalDat))THEN
  3841:                    nodalDat%myMesh%num_v_nodes = descript1 % num_items_per_record
  3842:                    CALL check_err(nf90_def_dim(nodalDat%ncid, 'constlen', 10,
  3843:                &        nodalDat%myMesh%constl_dim_id))
  3844:                    CALL check_err(nf90_def_dim(nodalDat%ncid, 'num_const',
  3845:                &        nodalDat%myMesh%num_v_nodes, nodalDat%myMesh%num_v_nodes_dim_id))
  3846:           !        Put the constituent names in
  3847:                    nodalDat%nodal_data_dims(1) = nodalDat%myMesh%constl_dim_id
  3848:                    nodalDat%nodal_data_dims(2) = nodalDat%myMesh%num_v_nodes_dim_id
  3849:                    iret = nf90_def_var(nodalDat%ncid, 'const', NF90_CHAR,
  3850:                &          nodalDat%nodal_data_dims, nodalDat%myMesh%const_id)
  3851:                    CALL check_err(iret)
  3852:                    CALL check_err(nf90_put_att(nodalDat%ncid, nodalDat%myMesh%const_id,
  3853:                &        'long_name',
  3854:                &        'names of the tidal harmonic constituents'))
  3855:                    CALL check_err(nf90_def_var(nodalDat%ncid,'frequency',
  3856:                &          NF90_DOUBLE,nodalDat%myMesh%num_v_nodes_dim_id,dmy))
  3857:                    CALL check_err(nf90_put_att(nodalDat%ncid,dmy,
  3858:                &          'long_name','frequency of harmonic constituents'))
  3859:                    CALL check_err(nf90_put_att(nodalDat%ncid,dmy,'units','rad/s'))
  3860:                    CALL check_err(nf90_def_var(nodalDat%ncid,'nodal_factor',
  3861:                &          NF90_DOUBLE,nodalDat%myMesh%num_v_nodes_dim_id,dmy))
  3862:                    CALL check_err(nf90_put_att(nodalDat%ncid,dmy,'long_name',
  3863:                &          'nodal factor of harmonic constituents'))
  3864:                    CALL check_err(nf90_def_var(nodalDat%ncid,'equilibrium_argument',
  3865:                &          NF90_DOUBLE,nodalDat%myMesh%num_v_nodes_dim_id,dmy))
  3866:                    CALL check_err(nf90_put_att(nodalDat%ncid,dmy,'long_name',
  3867:                &          'equilibrium argument of harmonic constituents'))
  3868:                    CALL check_err(nf90_put_att(nodalDat%ncid,dmy,'units','deg'))
  3869:                   ELSEIF(PRESENT(stationDat))THEN
  3870:                    CALL check_err(nf90_def_dim(stationDat%ncid, 'constlen', 10,
  3871:                &        stationDat%constl_dim_id))
  3872:                    CALL check_err(nf90_def_dim(stationDat%ncid, 'num_const',
  3873:                &        stationDat%num_v_nodes, stationDat%num_v_nodes_dim_id))
  3874:           !        Put the constituent names in
  3875:                    stationDat%station_dims(1) = stationDat%constl_dim_id
  3876:                    stationDat%station_dims(2) = stationDat%num_v_nodes_dim_id
  3877:                    iret = nf90_def_var(stationDat%ncid, 'const', NF90_CHAR,
  3878:                &          stationDat%station_dims, stationDat%const_id)
  3879:                    CALL check_err(iret)
  3880:                    CALL check_err(nf90_put_att(stationDat%ncid, stationDat%const_id,
  3881:                &        'long_name',
  3882:                &        'names of the tidal harmonic constituents'))
  3883:                    CALL check_err(nf90_def_var(stationDat%ncid,'frequency',
  3884:                &          NF90_DOUBLE,stationDat%num_v_nodes_dim_id,dmy))
  3885:                    CALL check_err(nf90_put_att(stationDat%ncid,dmy,
  3886:                &          'long_name','frequency of harmonic constituents'))
  3887:                    CALL check_err(nf90_put_att(stationDat%ncid,dmy,'units','rad/s'))
  3888:                    CALL check_err(nf90_def_var(stationDat%ncid,'nodal_factor',
  3889:                &          NF90_DOUBLE,stationDat%num_v_nodes_dim_id,dmy))
  3890:                    CALL check_err(nf90_put_att(stationDat%ncid,dmy,'long_name',
  3891:                &          'nodal factor of harmonic constituents'))
  3892:                    CALL check_err(nf90_def_var(stationDat%ncid,'equilibrium_argument',
  3893:                &          NF90_DOUBLE,stationDat%num_v_nodes_dim_id,dmy))
  3894:                    CALL check_err(nf90_put_att(stationDat%ncid,dmy,'long_name',
  3895:                &          'equilibrium argument of harmonic constituents'))
  3896:                    CALL check_err(nf90_put_att(stationDat%ncid,dmy,'units','deg'))
  3897:                   ENDIF
  3898:           
  3899:                   RETURN
  3900:           
  3901:           C-----------------------------------------------------------------------
  3902:                 END SUBROUTINE defineHarmonicAnalysisParametersInNetcdfFile


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE
INLINE LIST

  ROOT: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE (netcdfio.F:3830)
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3842)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3842)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3844)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3844)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3849)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3851)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3852)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3852)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3855)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3855)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3857)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3857)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3859)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3859)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3860)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3860)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3862)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3862)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3864)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3864)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3866)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3866)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3868)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3868)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:3872)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3872)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:3877)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3879)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3880)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3880)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3883)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3883)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3885)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3885)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3887)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3887)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3888)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3888)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3890)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3890)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:3892)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3892)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3894)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3894)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:3896)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3896)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEHARMONICANALYSISPARAMETERSINNETCDFFILE
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 28 [s0-s12 s15-s16 s23-s32 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 528 bytes
      Register spill area      :   0 bytes
      Parameter area           : 120 bytes
      Register save area       : 176 bytes
      User data area           : 224 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  3919: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  3919: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  3920: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_TEXT
  3922: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  3912:                 SUBROUTINE addHarmonicAnalysisParametersToNetcdfFile(ncid)
  3913:                    USE GLOBAL, ONLY : OutputDataDescript_t
  3914:                    USE HARM, ONLY: NAMEFR,HAFREQ,HAFF,HAFACE
  3915:                    IMPLICIT NONE
  3916:                    INTEGER,INTENT(IN) :: ncid
  3917:                    INTEGER :: iret,dmy
  3918:           
  3919:                    CALL check_err(nf90_inq_varid(ncid,"const",dmy))
  3920:                    CALL check_err(nf90_put_var(ncid, dmy, NAMEFR(:) ))
  3921:                    CALL check_err(nf90_inq_varid(ncid,"frequency",dmy))
  3922:                    CALL check_err(nf90_put_var(ncid,dmy,HAFREQ))
  3923:                    CALL check_err(nf90_inq_varid(ncid,"nodal_factor",dmy))
  3924:                    CALL check_err(nf90_put_var(ncid,dmy,HAFF))
  3925:                    CALL check_err(nf90_inq_varid(ncid,"equilibrium_argument",dmy))
  3926:                    CALL check_err(nf90_put_var(ncid,dmy,HAFACE))
  3927:           
  3928:                    RETURN
  3929:           
  3930:           C-----------------------------------------------------------------------
  3931:                 END SUBROUTINE addHarmonicAnalysisParametersToNetcdfFile


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE
INLINE LIST

  ROOT: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE (netcdfio.F:3912)
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3919)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3919)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_TEXT (netcdfio.F:3920)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3920)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3921)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3921)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3922)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3922)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3923)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3923)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3924)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3924)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:3925)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3925)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:3926)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:3926)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::ADDHARMONICANALYSISPARAMETERSTONETCDFFILE
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 26 [s0-s6 s8-s12 s15-s16 s23-s31 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 448 bytes
      Register spill area      :   0 bytes
      Parameter area           :  56 bytes
      Register save area       : 176 bytes
      User data area           : 208 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATENETCDFOUTPUTFILE
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  3957: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  3968: vec( 103): Unvectorized loop.
  3968: vec( 108): Unvectorizable loop structure.
  3968: vec( 118): Unvectorizable data type.: FILENAME
  3970: vec( 103): Unvectorized loop.
  3970: vec( 108): Unvectorizable loop structure.
  3970: vec( 118): Unvectorizable data type.: FILENAME
  3974: vec( 103): Unvectorized loop.
  3974: vec( 108): Unvectorizable loop structure.
  3974: vec( 118): Unvectorizable data type.: FILENAME
  3997: vec( 103): Unvectorized loop.
  3997: vec( 108): Unvectorizable loop structure.
  4001: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  4021: inl(1212): Source for routine not found.: GLOBAL::SCREENMESSAGE
  4041: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  4079: inl(1212): Source for routine not found.: NETCDF::NF90_CREATE
  4080: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  4082: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_DIM
  4086: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATENETCDFOUTPUTFILE
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  3940:                 SUBROUTINE createNetCDFOutputFile(ncid, myFile, myTime,
  3941:                &                                  descript, ret_error)
  3942:                 USE SIZES, ONLY : globaldir
  3943:                 USE GLOBAL, ONLY : OutputDataDescript_t, IHOT, DEBUG, ERROR,
  3944:                &                   screenUnit, allMessage, scratchMessage
  3945:           #ifdef CMPI
  3946:                 USE MESSENGER, ONLY : MSG_FINI
  3947:           #endif
  3948:                 IMPLICIT NONE
  3949:                 INTEGER, intent(out) :: ncid
  3950:                 TYPE(fileData), intent(inout) :: myFile
  3951:                 TYPE(timeData), intent(inout) :: myTime
  3952:                 TYPE(OutputDataDescript_t), intent(inout) :: descript
  3953:                 LOGICAL, intent(out) :: ret_error
  3954:           C
  3955:                 INTEGER iret
  3956:           C
  3957:                 call setMessageSource("createNetCDFOutputFile")
  3958:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  3959:                 call allMessage(DEBUG,"Enter.")
  3960:           #endif
  3961:                 ret_error = .false.
  3962:                 myFile%createFile = .false.
  3963:                 myFile%fileFound = .false.
  3964:           
  3965:                 ! create file name
  3966:                 select case(descript%lun)
  3967:                 case(67)
  3968: +======>           myFile%filename = trim(globaldir)//'/fort.67.nc'
  3969:                 case(68)
  3970: +======>           myFile%filename = trim(globaldir)//'/fort.68.nc'
  3971:                 case default
  3972:                    ! trim(globaldir) has already been prepended to
  3973:                    ! descript%file_name
  3974: +======>           myFile%filename = trim(descript%file_name) // '.nc'
  3975:                 end select
  3976:                 !jgfdebug
  3977:                 !write(6,*) 'myFile%filename=',trim(myFile%filename),
  3978:                 !&  ' descript%file_name=',trim(descript%file_name)
  3979:           C
  3980:           C     jgf49.17.02: Simplified the criteria for creating a new netCDF
  3981:           C     output file: coldstart, overwrite upon hotstart, or output
  3982:           C     that does not already exist. These criteria do not apply to
  3983:           C     netcdf hotstart files; we will always write those when called
  3984:           C     upon to create them.
  3985:                 INQUIRE(FILE=myFile%FILENAME,EXIST=myFile%fileFound)
  3986:                 IF ((descript%lun.ne.67).and.(descript%lun.ne.68)) THEN
  3987:                    IF ((IHOT.EQ.0).OR.(descript%specifier.lt.0).OR.
  3988:                &      (myFile%fileFound.eqv..false.)) THEN
  3989:           #ifdef CMPI
  3990:                       ! jgf49.31 when this subroutine is called by ADCIRC running in
  3991:                       ! parallel, it should never create a new file, since that
  3992:                       !  is the job of adcprep ... the file cannot be created
  3993:                       ! here as a last resort since none of the processors have
  3994:                       ! access to the full domain mesh and control files, whose
  3995:                       ! data must also be stored in the netcdf output file
  3996:                       IF (myFile%fileFound.eqv..false.) THEN
  3997:                          write(scratchMessage,'(a,a,a)')
  3998:                &            "The NetCDF output file '",TRIM(myFile%FILENAME),
  3999:                &            "' was not found. "//
  4000:                &            "It should have been created by adcprep."
  4001:                          call allMessage(ERROR,scratchMessage)
  4002:                          ret_error = .true.
  4003:                       ENDIF
  4004:           #else
  4005:                       ! these lines are executed by serial adcirc and adcprep
  4006:                       !
  4007:                       ! jgf52.08.25: It may be a non-NetCDF min/max will be written,
  4008:                       ! but a netcdf min/max file of the same type may be read. In this
  4009:                       ! case, don't create a  netcdf min/max file of this type.
  4010:                       if ( (abs(descript%specifier).eq.NETCDF3) .or.
  4011:                &           (abs(descript%specifier).eq.NETCDF4) ) then
  4012:                          myFile%createFile = .true.
  4013:                          myFile%record_counter = 0
  4014:                       endif
  4015:           #endif
  4016:                    ENDIF
  4017:                 ELSE
  4018:                    ! these lines are executed to create netcdf hotstart files
  4019:           #ifdef CMPI
  4020:                    IF (myFile%fileFound.eqv..true.) THEN
  4021:                       call screenMessage(DEBUG,
  4022:                &      "Hotstart file was created by adcprep.")
  4023:                       myFile%createFile = .false.
  4024:                    ELSE
  4025:                        call screenMessage(ERROR,"Hotstart file is missing.")
  4026:                        call screenMessage(ERROR,
  4027:                &          "It should have been created by adcprep.")
  4028:                        ret_error = .true.
  4029:                    ENDIF
  4030:           #else
  4031:                    myFile%createFile = .true.
  4032:                    myFile%record_counter = 0
  4033:           #endif
  4034:                 ENDIF
  4035:           C
  4036:           C     RETURN if we don't need to create a file.
  4037:                 IF (myFile%createFile.eqv..false.) THEN
  4038:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4039:                    call allMessage(DEBUG,"Return.")
  4040:           #endif
  4041:                    call unsetMessageSource()
  4042:                    RETURN
  4043:                 ENDIF
  4044:           C
  4045:           C     set the file format (netcdf3, or netcdf4/hdf5) ... the data model will
  4046:           C     be classic (netcdf3) in any case
  4047:                 select case(abs(descript%specifier))
  4048:                 case(3,367,368)
  4049:                    myFile%ncformat = NF90_CLOBBER
  4050:           #ifdef HAVE_NETCDF4
  4051:                 case(5,567,568)
  4052:                    myFile%ncformat = ior(NF90_CLASSIC_MODEL,NF90_HDF5)
  4053:           #else
  4054:                 case(5,567,568)
  4055:                    write(scratchMessage,'(A)')
  4056:                &    "This ADCIRC executable was compiled with the "
  4057:                &    //trim(nf90_inq_libvers())//" netcdf library."
  4058:                    call allMessage(INFO,scratchMessage)
  4059:                    write(scratchMessage,'(A,I3,A)') "File format specifier '",
  4060:                &      descript%specifier,"' requires NetCDF version 4."
  4061:                    call allMessage(ERROR,scratchMessage)
  4062:                    write(scratchMessage,'(A)')
  4063:                &    "It also requires the setting of NETCDF=enable and "
  4064:                &    //"NETCDF4=enable on the make command line."
  4065:                    call allMessage(ERROR,scratchMessage)
  4066:                    write(scratchMessage,'(A)')
  4067:                &    "You must recompile ADCIRC to use NetCDF4 formatting."
  4068:                    call allMessage(ERROR,scratchMessage)
  4069:                    ret_error = .true.
  4070:           #endif
  4071:                 case default
  4072:                    write(scratchMessage,'(A,I3,A)') "File format specifier '",
  4073:                &      descript%specifier,"' is not valid."
  4074:                    call allMessage(ERROR,scratchMessage)
  4075:                    ret_error = .true.
  4076:                 end select
  4077:           
  4078:                 if ( ret_error.eqv..false. ) then
  4079:                    iret = nf90_create(myFile%FILENAME, myFile%ncformat, ncid)
  4080:                    CALL check_err(iret)
  4081:                    ! Define time
  4082:                    iret = nf90_def_dim(ncid, 'time', nf90_unlimited,
  4083:                &       myTime%timenc_dim_id)
  4084:                    CALL check_err(iret)
  4085:                    myTime%timenc_dims(1) = myTime%timenc_dim_id
  4086:                    iret = nf90_def_var(ncid, 'time', NF90_DOUBLE,
  4087:                &       myTime%timenc_dims, myTime%timenc_id)
  4088:                    CALL check_err(iret)
  4089:                 endif
  4090:           C
  4091:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4092:                 call allMessage(DEBUG,"Return.")
  4093:           #endif
  4094:                 call unsetMessageSource()
  4095:           C-----------------------------------------------------------------------
  4096:                 END SUBROUTINE createNetCDFOutputFile


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATENETCDFOUTPUTFILE
INLINE LIST

  ROOT: NETCDFIO::CREATENETCDFOUTPUTFILE (netcdfio.F:3940)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:3957)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4001)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4021)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4025)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4026)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4041)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4074)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CREATE (netcdfio.F:4079)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4080)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:4082)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4084)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:4086)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4088)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4094)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATENETCDFOUTPUTFILE
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3997)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:50 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATENETCDFOUTPUTFILE
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 41 [s0-s12 s15-s16 s18-s21 s23-s34 s54-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 3568 bytes
      Register spill area      :   40 bytes
      Parameter area           :  120 bytes
      Register save area       :  176 bytes
      User data area           : 3224 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFCOORD
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  4117: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  4126: vec( 101): Vectorized loop.
  4126: vec( 126): Idiom detected.: MAX/MIN
  4127: vec( 101): Vectorized loop.
  4127: vec( 126): Idiom detected.: MAX/MIN
  4150: vec( 101): Vectorized loop.
  4151: vec( 101): Vectorized loop.
  4153: vec( 101): Vectorized loop.
  4154: vec( 101): Vectorized loop.
  4158: vec( 101): Vectorized loop.
  4159: vec( 101): Vectorized loop.
  4161: opt(1135): Outer loop conditionally executes inner loop.
  4161: vec( 102): Partially vectorized loop.
  4164: vec( 101): Vectorized loop.
  4173: vec( 101): Vectorized loop.
  4174: vec( 101): Vectorized loop.
  4175: vec( 101): Vectorized loop.
  4176: vec( 101): Vectorized loop.
  4177: vec( 101): Vectorized loop.
  4178: vec( 101): Vectorized loop.
  4179: vec( 101): Vectorized loop.
  4180: vec( 101): Vectorized loop.
  4181: vec( 101): Vectorized loop.
  4183: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  4183: vec( 102): Partially vectorized loop.
  4200: vec( 101): Vectorized loop.
  4204: opt(3014): Moved reference within a conditional branch.
  4205: opt(3014): Moved reference within a conditional branch.
  4207: opt(3014): Moved reference within a conditional branch.
  4208: opt(3014): Moved reference within a conditional branch.
  4209: opt(3014): Moved reference within a conditional branch.
  4210: opt(3014): Moved reference within a conditional branch.
  4212: opt(3014): Moved reference within a conditional branch.
  4213: opt(3014): Moved reference within a conditional branch.
  4214: opt(3014): Moved reference within a conditional branch.
  4215: opt(3014): Moved reference within a conditional branch.
  4216: opt(3014): Moved reference within a conditional branch.
  4217: opt(3014): Moved reference within a conditional branch.
  4218: opt(3014): Moved reference within a conditional branch.
  4223: opt(1592): Outer loop unrolled inside inner loop.
  4223: vec( 101): Vectorized loop.
  4225: opt(1592): Outer loop unrolled inside inner loop.: I
  4226: vec( 101): Vectorized loop.
  4239: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFCOORD
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  4104:                 SUBROUTINE initNetCDFCoord(myMesh)
  4105:                 USE GLOBAL, ONLY : NP_G, NE_G
  4106:                 USE ADC_CONSTANTS, ONLY: RAD2DEG
  4107:                 USE MESH, ONLY : X, Y, SLAM, SFEA, ICS, NM,
  4108:                &  SLAM0, SFEA0
  4109:                 USE BOUNDARIES, ONLY : NBOU, NVEL, NOPE, NBVV, NVDLL, NBDV, NVELL,
  4110:                &  NETA, IBTYPEE, IBTYPE, IBCONNR, barlanhtr, barinhtr, barincfspr,
  4111:                &  barlancfspr, barincfsbr, pipehtr, pipecoefr, pipediamr
  4112:                 IMPLICIT NONE
  4113:                 type(meshStructure), intent(inout) :: myMesh
  4114:                 INTEGER :: i, j, k, kj  ! array indices
  4115:                 INTEGER :: max_seg_nodes  ! size of longest list of nodes on a bdry seg
  4116:           C
  4117:                 call setMessageSource("initNetCDFCoord")
  4118:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4119:                 call allMessage(DEBUG,"Enter.")
  4120:           #endif
  4121:           C
  4122:                 myMesh%nopenc = nope
  4123:                 myMesh%nbounc = nbou
  4124:                 myMesh%netanc = neta
  4125:                 myMesh%nvelnc = nvel
  4126: V======>        myMesh%max_nvdllnc = maxval(nvdll) ! dimension of seg with most nodes
  4127: V======>        myMesh%max_nvellnc = maxval(nvell) !WJP*2 dimension of seg with most nodes
  4128:           C
  4129:                 ALLOCATE(myMesh%xnc(NP_G))
  4130:                 ALLOCATE(myMesh%ync(NP_G))
  4131:                 ALLOCATE(myMesh%nvdllnc(myMesh%nopenc))
  4132:                 ALLOCATE(myMesh%ibtypeenc(myMesh%nopenc))
  4133:                 ALLOCATE(myMesh%ibtypenc(myMesh%nbounc))
  4134:                 ALLOCATE(myMesh%nvellnc(myMesh%nbounc))
  4135:           !     WJP to make nbdvnc arrays smaller:
  4136:                 ALLOCATE(myMesh%nbdvnc(myMesh%netanc)) !(myMesh%nopenc,myMesh%max_nvdllnc))
  4137:                 ALLOCATE(myMesh%nbvvnc(myMesh%nvelnc)) !(myMesh%nbounc,myMesh%max_nvellnc))
  4138:                 ALLOCATE(myMesh%element(myMesh%nface_len,NE_G))
  4139:                 ALLOCATE(myMesh%ibconnnc(myMesh%nvelnc)) !(myMesh%nbounc,myMesh%max_nvellnc))
  4140:                 ALLOCATE(myMesh%barht(myMesh%nvelnc))
  4141:                 ALLOCATE(myMesh%barsp(myMesh%nvelnc))
  4142:                 ALLOCATE(myMesh%barsb(myMesh%nvelnc))
  4143:                 ALLOCATE(myMesh%pipecoef(myMesh%nvelnc))
  4144:                 ALLOCATE(myMesh%pipediam(myMesh%nvelnc))
  4145:                 ALLOCATE(myMesh%pipeht(myMesh%nvelnc))
  4146:                 ALLOCATE(myMesh%nmnc(NE_G,myMesh%nface_len))
  4147:            
  4148:           !     Store nodal coordinates
  4149:                 if (ics.eq.1) then
  4150: V======>           myMesh%xnc = X
  4151: V======>           myMesh%ync = Y
  4152:                 else
  4153: V======>           myMesh%xnc = SLAM * RAD2DEG ! convert back to degrees
  4154: V======>           myMesh%ync = SFEA * RAD2DEG
  4155:                 endif
  4156:           !
  4157:           !     elevation specified boundary forcing segments
  4158: V======>        myMesh%nvdllnc = 0
  4159: V======>        myMesh%nbdvnc = 0
  4160:                 kj = 0 ! WJP initializing linear index
  4161: S------>        DO k=1,myMesh%nopenc
  4162: |                  myMesh%nvdllnc(k) = nvdll(k)
  4163: |                  myMesh%ibtypeenc(k) = ibtypee(k)
  4164: |V----->           DO j=1,myMesh%nvdllnc(k)
  4165: ||                    ! WJP counting the linear index
  4166: ||                    kj = kj + 1
  4167: ||                    myMesh%nbdvnc(kj) = nbdv(k,j)
  4168: |V-----            END DO
  4169: S------         END DO
  4170:           !
  4171:           !     normal flow (discharge) specified boundary segments
  4172:           !
  4173: V======>        myMesh%nvellnc = 0
  4174: V======>        myMesh%nbvvnc = 0
  4175: V======>        myMesh%ibconnnc = 0
  4176: V======>        myMesh%barht = -99999d0
  4177: V======>        myMesh%barsp = -99999d0
  4178: V======>        myMesh%barsb = -99999d0
  4179: V======>        myMesh%pipeht = -99999d0
  4180: V======>        myMesh%pipecoef = -99999d0
  4181: V======>        myMesh%pipediam = -99999d0
  4182:                 kj = 0 !WJP initializing linear index
  4183: S------>        DO k=1,myMesh%nbounc
  4184: |                  myMesh%nvellnc(k) = nvell(k)
  4185: |                  myMesh%ibtypenc(k) = ibtype(k)
  4186: |         
  4187: |                  ! Set the boundary type specific variables
  4188: |                  select case(ibtype(k))
  4189: |                  case(3,13,23)
  4190: |                      myMesh%hasWeirs = .true.
  4191: |                  case(4,14,24)
  4192: |                      myMesh%hasWeirs = .true.
  4193: |                      myMesh%hasInternalWeirs = .true.
  4194: |                  case(5,25)
  4195: |                      myMesh%hasWeirs = .true.
  4196: |                      myMesh%hasInternalWeirs = .true.
  4197: |                      myMesh%hasPipes = .true.
  4198: |                  end select
  4199: |         
  4200: |V----->           DO J=1,myMesh%nvellnc(k)
  4201: ||                    kj = kj + 1
  4202: ||                    myMesh%nbvvnc(kj) = nbvv(k,j)
  4203: ||                    if(ibtype(k).eq.3.or.ibtype(k).eq.13.or.ibtype(k).eq.23)then
  4204: ||                        myMesh%barht(kj) = barlanhtr(k,j)
  4205: ||                        myMesh%barsp(kj) = barlancfspr(k,j)
  4206: ||                    elseif(ibtype(k).eq.4.or.ibtype(k).eq.24)then
  4207: ||                        myMesh%ibconnnc(kj) = ibconnr(k,j)
  4208: ||                        myMesh%barht(kj) = barinhtr(k,j)
  4209: ||                        myMesh%barsp(kj) = barincfspr(k,j)
  4210: ||                        myMesh%barsb(kj) = barincfsbr(k,j)
  4211: ||                    elseif(ibtype(k).eq.5.or.ibtype(k).eq.25)then
  4212: ||                        myMesh%ibconnnc(kj) = ibconnr(k,j)
  4213: ||                        myMesh%barht(kj) = barinhtr(k,j)
  4214: ||                        myMesh%barsp(kj) = barincfspr(k,j)
  4215: ||                        myMesh%barsb(kj) = barincfsbr(k,j)
  4216: ||                        myMesh%pipeht(kj) = pipehtr(k,j)
  4217: ||                        myMesh%pipecoef(kj) = pipecoefr(k,j)
  4218: ||                        myMesh%pipediam(kj) = pipediamr(k,j)
  4219: ||                    endif
  4220: |V-----            END DO
  4221: S------         END DO
  4222:           !
  4223: U======>        myMesh%nmnc=NM
  4224:           !     Switch order in array for NETCDF
  4225: U------>        do i=1, NE_G
  4226: |V----->           do j=1, myMesh%nface_len
  4227: ||                    myMesh%element(j,i) = myMesh%nmnc(i,j)
  4228: |V-----            end do
  4229: U------         end do
  4230:           !       write(99,*) myMesh%nmnc
  4231:           !       write(98,*) NM
  4232:           !       write(97,*) myMesh%element
  4233:           !      stop
  4234:           C
  4235:                 myMesh%initialized = .true.
  4236:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4237:                 call allMessage(DEBUG,"Return.")
  4238:           #endif
  4239:                 call unsetMessageSource()
  4240:           C-----------------------------------------------------------------------
  4241:                 END SUBROUTINE initNetCDFCoord


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFCOORD
INLINE LIST

  ROOT: NETCDFIO::INITNETCDFCOORD (netcdfio.F:4104)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:4117)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4239)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFCOORD
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:4126)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4126)
    *** The number of VLOAD, VSTORE. :  1,  0. (netcdfio.F:4126)
    *** Idiom detected. : MAX/MIN (netcdfio.F:4126)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4127)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4127)
    *** The number of VLOAD, VSTORE. :  1,  0. (netcdfio.F:4127)
    *** Idiom detected. : MAX/MIN (netcdfio.F:4127)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4153)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4153)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4153)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4153)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4153)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4153)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4154)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4154)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4154)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4154)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4154)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4154)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4150)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4150)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4150)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4151)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4151)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4151)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4158)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4158)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4158)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4159)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4159)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4159)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4161)
    <Partially vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4161)
    *** The number of VLOAD, VSTORE. :  2,  4. (netcdfio.F:4161)

    LOOP BEGIN: (netcdfio.F:4164)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4164)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4164)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4173)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4173)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4173)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4174)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4174)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4174)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4175)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4175)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4175)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4176)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4176)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4176)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4177)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4177)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4177)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4178)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4178)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4178)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4179)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4179)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4179)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4180)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4180)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4180)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4181)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4181)
    *** The number of VLOAD, VSTORE. :  0,  1. (netcdfio.F:4181)
  LOOP END

  LOOP BEGIN: (netcdfio.F:4183)
    <Partially vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4183)
    *** The number of VLOAD, VSTORE. :  3,  3. (netcdfio.F:4183)

    LOOP BEGIN: (netcdfio.F:4200)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4200)
      *** The number of VLOAD, VSTORE. : 14, 14. (netcdfio.F:4200)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4223)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:4223)

    LOOP BEGIN: (netcdfio.F:4223)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:4223)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4223)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4223)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4223)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:4223)

    LOOP BEGIN: (netcdfio.F:4223)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4223)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:4223)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4225)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:4225)

    LOOP BEGIN: (netcdfio.F:4226)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:4226)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4226)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:4226)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4225)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:4225)

    LOOP BEGIN: (netcdfio.F:4226)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:4226)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:4226)
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFCOORD
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 61 [s0-s12 s15-s16 s18-s63]
      Vector registers         : 64 [v0-v63]
      Vector mask registers    :  9 [vm7-vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 29456 bytes
      Register spill area      : 14624 bytes
      Parameter area           :    32 bytes
      Register save area       :   176 bytes
      User data area           : 14624 bytes
      Others                   :     0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:4126)
    *** Estimated execution cycle                       : 96
  LOOP END

  LOOP BEGIN: (netcdfio.F:4127)
    *** Estimated execution cycle                       : 96
  LOOP END

  LOOP BEGIN: (netcdfio.F:4153)
    *** Estimated execution cycle                       : 100
  LOOP END

  LOOP BEGIN: (netcdfio.F:4153)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:4154)
    *** Estimated execution cycle                       : 100
  LOOP END

  LOOP BEGIN: (netcdfio.F:4154)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:4150)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:4151)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:4158)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:4159)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:4161)
    *** Estimated execution cycle                       : 220
  LOOP END

  LOOP BEGIN: (netcdfio.F:4161)
    *** Estimated execution cycle                       : 50
    *** The number of SCALAR REGISTER TRANSFER          : 13

    LOOP BEGIN: (netcdfio.F:4164)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4173)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:4174)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:4175)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:4176)
    *** Estimated execution cycle                       : 65
  LOOP END

  LOOP BEGIN: (netcdfio.F:4177)
    *** Estimated execution cycle                       : 65
  LOOP END

  LOOP BEGIN: (netcdfio.F:4178)
    *** Estimated execution cycle                       : 65
  LOOP END

  LOOP BEGIN: (netcdfio.F:4179)
    *** Estimated execution cycle                       : 65
  LOOP END

  LOOP BEGIN: (netcdfio.F:4180)
    *** Estimated execution cycle                       : 65
  LOOP END

  LOOP BEGIN: (netcdfio.F:4181)
    *** Estimated execution cycle                       : 65
  LOOP END

  LOOP BEGIN: (netcdfio.F:4183)
    *** Estimated execution cycle                       : 467
  LOOP END

  LOOP BEGIN: (netcdfio.F:4200)
    *** Estimated execution cycle                       : 205
    *** The number of SCALAR REGISTER SPILL
          Total                                         : 29
            Over basic blocks                           : 29
    *** The number of SCALAR REGISTER RESTORE
          Total                                         : 27
            Over basic blocks                           : 27
    *** The number of SCALAR REGISTER TRANSFER          : 15

    LOOP BEGIN: (netcdfio.F:4200)
      *** Estimated execution cycle                     : 596
      *** The number of SCALAR REGISTER SPILL
            Total                                       : 2
              Not enough registers                      : 2
      *** The number of SCALAR REGISTER RESTORE
            Total                                       : 5
              Not enough registers                      : 2
              Over basic blocks                         : 3
      *** The number of SCALAR REGISTER TRANSFER        : 4
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4223)
    *** Estimated execution cycle                       : 37
    *** The number of SCALAR REGISTER TRANSFER          : 6

    LOOP BEGIN: (netcdfio.F:4223)
      *** Estimated execution cycle                     : 64
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4223)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 5

    LOOP BEGIN: (netcdfio.F:4223)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4225)
    *** Estimated execution cycle                       : 42
    *** The number of SCALAR REGISTER TRANSFER          : 12

    LOOP BEGIN: (netcdfio.F:4226)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:4225)
    *** Estimated execution cycle                       : 70
    *** The number of SCALAR REGISTER TRANSFER          : 29

    LOOP BEGIN: (netcdfio.F:4226)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITEOUTARRAYNETCDF
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  4265: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  4272: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::WRITESTATIONDATA
  4281: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::WRITENODALDATA
  4396: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  4403: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITEOUTARRAYNETCDF
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  4251:                 SUBROUTINE writeOutArrayNetCDF(lun, timesec, it, descript1,
  4252:                &   descript2, descript3, descript4 )
  4253:                 USE GLOBAL, ONLY : OutputDataDescript_t, ScreenUnit
  4254:           C
  4255:                 IMPLICIT NONE
  4256:           C     args
  4257:                 INTEGER, intent(in) :: lun ! logical unit number of file to write to
  4258:                 REAL(8), intent(in) :: timesec ! seconds since cold start
  4259:                 INTEGER, intent(in) :: it   ! number of time steps since cold start
  4260:                 type(OutputDataDescript_t), intent(in) :: descript1 !describes output data
  4261:                 type(OutputDataDescript_t), intent(in), optional :: descript2 !describes output data
  4262:                 type(OutputDataDescript_t), intent(in), optional :: descript3 !describes output data
  4263:                 type(OutputDataDescript_t), intent(in), optional :: descript4 !describes output data
  4264:           C
  4265:                 call setMessageSource("writeOutArrayNetCDF")
  4266:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4267:                 call allMessage(DEBUG,"Enter.")
  4268:           #endif
  4269:           C
  4270:                 SELECT CASE(lun)
  4271:                    CASE(41)
  4272:                       CALL writeStationData(densityStations3D, lun, descript1,
  4273:                &           timesec, descript2, descript3)
  4274:                    CASE(42)
  4275:                       CALL writeStationData(velocityStations3D, lun, descript1,
  4276:                &           timesec, descript2, descript3)
  4277:                    CASE(43)
  4278:                       CALL writeStationData(turbulenceStations3D, lun, descript1,
  4279:                &           timesec, descript2, descript3)
  4280:                    CASE(44)
  4281:                       CALL writeNodalData(density3D, lun, descript1,
  4282:                &           timesec, descript2, descript3)
  4283:                    CASE(45)
  4284:                       CALL writeNodalData(velocity3D, lun, descript1,
  4285:                &           timesec, descript2, descript3)
  4286:                    CASE(46)
  4287:                       CALL writeNodalData(turbulence3D, lun, descript1,
  4288:                &           timesec, descript2, descript3)
  4289:                    CASE(47)
  4290:                       CALL writeNodalData(futureSurfaceTemperature, lun,
  4291:                &           descript1, timesec)
  4292:                    !WJP 02.20.2018: added fort.51-54 harmonic outputs
  4293:                    CASE(51)
  4294:                       CALL writeStationData(HAelevSta, lun, descript1, timesec,
  4295:                &           descript2)
  4296:                    CASE(52)
  4297:                       CALL writeStationData(HAvelSta, lun, descript1, timesec,
  4298:                &           descript2,descript3,descript4)
  4299:                    CASE(53)
  4300:                       CALL writeNodalData(HAelev, lun, descript1, timesec,
  4301:                &           descript2)
  4302:                    CASE(54)
  4303:                       CALL writeNodalData(HAVel, lun, descript1, timesec,
  4304:                &           descript2,descript3,descript4)
  4305:                    CASE(61)
  4306:                       CALL writeStationData(elevSta, lun, descript1, timesec)
  4307:                    CASE(62)
  4308:                       CALL writeStationData(velSta, lun, descript1, timesec)
  4309:                    CASE(63)
  4310:                       CALL writeNodalData(elev, lun, descript1, timesec)
  4311:                    CASE(64)
  4312:                       CALL writeNodalData(currentVel, lun, descript1, timesec)
  4313:                    CASE(71)
  4314:                       CALL writeStationData(prSta, lun, descript1, timesec)
  4315:                    CASE(72)
  4316:                       CALL writeStationData(wVelSta, lun, descript1, timesec)
  4317:                    CASE(73)
  4318:                       CALL writeNodalData(pr, lun, descript1, timesec)
  4319:                    CASE(74)
  4320:                       CALL writeNodalData(windVel, lun, descript1, timesec)
  4321:           C++ GML 20200528
  4322:                    CASE(91)
  4323:                       CALL writeStationData(IceSta, lun, descript1, timesec)
  4324:                    CASE(93)
  4325:                       CALL writeNodalData(CICEAF, lun, descript1, timesec)
  4326:           C++
  4327:                    CASE(173)
  4328:                       CALL writeNodalData(wDrag, lun, descript1, timesec)
  4329:                    CASE(77)
  4330:                       CALL writeNodalData(weirElev, lun, descript1, timesec)
  4331:                    CASE(90)
  4332:                       CALL writeNodalData(tau0nc, lun, descript1, timesec)
  4333:                    CASE(164)
  4334:                       CALL writeNodalData(rads, lun, descript1, timesec)
  4335:           #if defined CSWAN || defined ADCSWAN
  4336:                    CASE(301)
  4337:                       CALL writeNodalData(sw_hs, lun, descript1, timesec)
  4338:                    CASE(302)
  4339:                       CALL writeNodalData(sw_dir, lun, descript1, timesec)
  4340:                    CASE(303)
  4341:                       CALL writeNodalData(sw_tm01, lun, descript1, timesec)
  4342:                    CASE(304)
  4343:                       CALL writeNodalData(sw_tps, lun, descript1, timesec)
  4344:                    CASE(305)
  4345:                       CALL writeNodalData(sw_wind, lun, descript1, timesec)
  4346:                    CASE(306)
  4347:                       CALL writeNodalData(sw_tm02, lun, descript1, timesec)
  4348:                    CASE(307)
  4349:                       CALL writeNodalData(sw_tmm10, lun, descript1, timesec)
  4350:           #endif
  4351:                    CASE(311)
  4352:                       CALL writeNodalData(EtaMax, lun, descript1, timesec)
  4353:                    CASE(312)
  4354:                       CALL writeNodalData(UMax, lun, descript1, timesec)
  4355:                    CASE(313)
  4356:                       CALL writeNodalData(PrMin, lun, descript1, timesec)
  4357:                    CASE(314)
  4358:                       CALL writeNodalData(WVMax, lun, descript1, timesec)
  4359:                    CASE(315)
  4360:                       CALL writeNodalData(RSMax, lun, descript1, timesec)
  4361:           #if defined CSWAN || defined ADCSWAN
  4362:                    CASE(316)
  4363:                       CALL writeNodalData(sw_hs_max, lun, descript1, timesec)
  4364:                    CASE(317)
  4365:                       CALL writeNodalData(sw_dir_max, lun, descript1, timesec)
  4366:                    CASE(318)
  4367:                       CALL writeNodalData(sw_tm01_max, lun, descript1, timesec)
  4368:                    CASE(319)
  4369:                       CALL writeNodalData(sw_tps_max, lun, descript1, timesec)
  4370:                    CASE(320)
  4371:                       CALL writeNodalData(sw_wind_max, lun, descript1, timesec)
  4372:                    CASE(321)
  4373:                       CALL writeNodalData(sw_tm02_max, lun, descript1, timesec)
  4374:                    CASE(322)
  4375:                       CALL writeNodalData(sw_tmm10_max, lun, descript1, timesec)
  4376:           #endif
  4377:                    CASE(400)
  4378:                       CALL writeNodalData(inTime, lun, descript1, timesec)
  4379:                    CASE(401)
  4380:                       CALL writeNodalData(maxInDep, lun, descript1, timesec)
  4381:                    CASE(402)
  4382:                       CALL writeNodalData(coldDry, lun, descript1, timesec)
  4383:                    CASE(403)
  4384:                       CALL writeNodalData(eRisInun, lun, descript1, timesec)
  4385:                    CASE(404)
  4386:                       CALL writeNodalData(evrDry, lun, descript1, timesec)
  4387:           
  4388:                    CASE(108)
  4389:                       CALL writeNodalData(dynamiccorrection, lun, descript1, timesec)
  4390:                    CASE(109)
  4391:                       CALL writeStationData(dynamiccorrectionSta, lun, descript1, timesec)
  4392:           
  4393:                    CASE DEFAULT
  4394:                       write(scratchMessage,
  4395:                &       '("No netCDF for files with unit number ",i0,".")') lun
  4396:                       call allMessage(ERROR,scratchMessage)
  4397:                 END SELECT
  4398:           C
  4399:           
  4400:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4401:                 call allMessage(DEBUG,"Return.")
  4402:           #endif
  4403:                 call unsetMessageSource()
  4404:           C-----------------------------------------------------------------------
  4405:                 END SUBROUTINE writeOutArrayNetCDF


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITEOUTARRAYNETCDF
INLINE LIST

  ROOT: NETCDFIO::WRITEOUTARRAYNETCDF (netcdfio.F:4251)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:4265)
     *** Source for routine not found.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4272)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4275)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4278)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4281)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4284)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4287)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4290)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4294)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4297)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4300)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4303)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4306)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4308)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4310)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4312)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4314)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4316)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4318)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4320)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4323)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4325)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4328)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4330)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4332)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4334)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4352)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4354)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4356)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4358)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4360)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4378)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4380)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4382)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4384)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4386)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITENODALDATA (netcdfio.F:4389)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4391)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4396)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4403)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITEOUTARRAYNETCDF
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITEOUTARRAYNETCDF
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 25 [s0-s6 s8-s12 s15-s16 s18-s19 s23-s28 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2320 bytes
      Register spill area      :    8 bytes
      Parameter area           :   56 bytes
      Register save area       :  176 bytes
      User data area           : 2072 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITESTATIONDATA
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  4436: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  4447: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  4451: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  4452: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  4455: inl(1222): Inlined: NETCDFIO::SETRECORDCOUNTERANDSTORETIME
  5312: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  5314: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  5317: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  5325: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  5357: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  5369: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  4460: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  4487: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL
  4735: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITESTATIONDATA
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  4413:                 SUBROUTINE writeStationData(sta, lun, descript1, timesec,
  4414:                &   descript2, descript3, descript4)
  4415:                 USE SIZES, ONLY : MNPROC
  4416:                 USE GLOBAL, ONLY : SNAMLEN, OutputDataDescript_t, scratchMessage,
  4417:                &  IDEN
  4418:                 IMPLICIT NONE
  4419:           C
  4420:                 type(stationData), intent(inout) :: sta
  4421:                 INTEGER, intent(in) :: lun
  4422:                 type(OutputDataDescript_t), intent(in) :: descript1
  4423:                 type(OutputDataDescript_t), intent(in), optional :: descript2
  4424:                 type(OutputDataDescript_t), intent(in), optional :: descript3
  4425:                 type(OutputDataDescript_t), intent(in), optional :: descript4
  4426:                 REAL(8), intent(in) :: timesec
  4427:           C
  4428:                 REAL(8), allocatable :: storedTimes(:) ! array of time values in file
  4429:                 LOGICAL :: timeFound ! true if current time is in array of stored times
  4430:                 INTEGER i,j
  4431:                 INTEGER counti(1), starti(1), n
  4432:                 INTEGER kount(2), start(2)
  4433:                 INTEGER kount3D(4), start3D(3)
  4434:                 INTEGER iret  ! success or failure of netcdf call
  4435:           C
  4436:                 call setMessageSource("writeStationData")
  4437:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4438:                 call allMessage(DEBUG,"Enter.")
  4439:           #endif
  4440:           C
  4441:           C     jgf50.13: if netcdf output was requested, but there are no stations,
  4442:           C     don't write to the file (it doesn't exist); just return.
  4443:                 IF ( descript1 % num_fd_records.eq.0 ) THEN
  4444:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4445:                    call allMessage(DEBUG,"Return.")
  4446:           #endif
  4447:                    call unsetMessageSource()
  4448:                    RETURN
  4449:                 ENDIF
  4450:           
  4451:                 iret = nf90_open(sta%myFile%FILENAME, NF90_WRITE, sta%ncid)
  4452:                 CALL check_err(iret)
  4453:                 sta%myTime%timenc(sta%myTime%timenc_len)=timesec
  4454:           
  4455:         I       CALL setRecordCounterAndStoreTime(sta%ncid, sta%myFile,
  4456:                &   sta%myTime)
  4457:                 !
  4458:                 ! get number of vertical nodes for 3D stations
  4459:                 IF ((lun.eq.41).or.(lun.eq.42).or.(lun.eq.43)) THEN
  4460:                    iret=nf90_inq_dimid(sta%ncid,"num_v_nodes",sta%num_v_nodes_dim_id)
  4461:                    CALL check_err(iret)
  4462:                    iret=nf90_inquire_dimension(sta%ncid, sta%num_v_nodes_dim_id,
  4463:                &        len=sta%num_v_nodes)
  4464:                    CALL check_err(iret)
  4465:                    !
  4466:                    ! Set up the 3D netcdf data extents
  4467:                    kount3D(1)=sta%num_stations
  4468:                    kount3D(2)=sta%num_v_nodes
  4469:                    kount3D(3)=sta%myTime%timenc_len
  4470:                    start3D(1)=1
  4471:                    start3D(2)=1
  4472:                    start3D(3)=sta%myFile%record_counter
  4473:                 ELSE
  4474:                    ! Set up the 2D netcdf data extents
  4475:                    kount(1)=sta%num_stations
  4476:                    kount(2)=sta%myTime%timenc_len
  4477:                    start(1)=1
  4478:                    start(2)=sta%myFile%record_counter
  4479:                 ENDIF
  4480:           C
  4481:                 SELECT CASE(lun)
  4482:           
  4483:                 CASE(41)
  4484:                    iret=nf90_inq_varid(sta%ncid, "sigmat", sta%u_station_data_id)
  4485:                    CALL check_err(iret)
  4486:                    IF (MNPROC.eq.1) THEN
  4487:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4488:                &          descript1%array2D, start3D, kount3D)
  4489:                    ELSE
  4490:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4491:                &          descript1%array2D_g, start3D, kount3D)
  4492:                    ENDIF
  4493:                    CALL check_err(iret)
  4494:           
  4495:                    IF ((iden.eq.2).or.(iden.eq.4)) THEN
  4496:                       iret=nf90_inq_varid(sta%ncid, "salinity",
  4497:                &         sta%v_station_data_id)
  4498:                       CALL check_err(iret)
  4499:                       IF (MNPROC.eq.1) THEN
  4500:                          iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4501:                &             descript2%array2D, start3D, kount3D)
  4502:                       ELSE
  4503:                          iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4504:                &             descript2%array2D_g, start3D, kount3D)
  4505:                       ENDIF
  4506:           
  4507:                       CALL check_err(iret)
  4508:                    ENDIF
  4509:                    IF ((iden.eq.3).or.(iden.eq.4)) THEN
  4510:                       iret=nf90_inq_varid(sta%ncid, "temperature",
  4511:                &          sta%w_station_data_id)
  4512:                       CALL check_err(iret)
  4513:                       IF (MNPROC.eq.1) THEN
  4514:                          iret = nf90_put_var(sta%ncid, sta%w_station_data_id,
  4515:                &            descript3%array2D, start3D, kount3D)
  4516:                       ELSE
  4517:                          iret = nf90_put_var(sta%ncid, sta%w_station_data_id,
  4518:                &            descript3%array2D_g, start3D, kount3D)
  4519:                       ENDIF
  4520:                       CALL check_err(iret)
  4521:                    ENDIF
  4522:                 CASE(42)
  4523:                    iret=nf90_inq_varid(sta%ncid, "u-vel3D", sta%u_station_data_id)
  4524:                    CALL check_err(iret)
  4525:                    iret=nf90_inq_varid(sta%ncid, "v-vel3D", sta%v_station_data_id)
  4526:                    CALL check_err(iret)
  4527:                    iret=nf90_inq_varid(sta%ncid, "w-vel3D", sta%w_station_data_id)
  4528:                    CALL check_err(iret)
  4529:                    IF (MNPROC.eq.1) THEN
  4530:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4531:                &         descript1%array2D, start3D, kount3D)
  4532:                       CALL check_err(iret)
  4533:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4534:                &         descript2%array2D, start3D, kount3D)
  4535:                       CALL check_err(iret)
  4536:                       iret = nf90_put_var(sta%ncid, sta%w_station_data_id,
  4537:                &         descript3%array2D, start3D, kount3D)
  4538:                       CALL check_err(iret)
  4539:                    ELSE
  4540:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4541:                &         descript1%array2D_g, start3D, kount3D)
  4542:                       CALL check_err(iret)
  4543:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4544:                &         descript2%array2D_g, start3D, kount3D)
  4545:                       CALL check_err(iret)
  4546:                       iret = nf90_put_var(sta%ncid, sta%w_station_data_id,
  4547:                &         descript3%array2D_g, start3D, kount3D)
  4548:                       CALL check_err(iret)
  4549:                    ENDIF
  4550:           
  4551:                 CASE(43)
  4552:                    iret=nf90_inq_varid(sta%ncid, "q20", sta%u_station_data_id)
  4553:                    CALL check_err(iret)
  4554:                    iret=nf90_inq_varid(sta%ncid, "l", sta%v_station_data_id)
  4555:                    CALL check_err(iret)
  4556:                    iret=nf90_inq_varid(sta%ncid, "ev", sta%w_station_data_id)
  4557:                    CALL check_err(iret)
  4558:                    IF (MNPROC.eq.1) THEN
  4559:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4560:                &         descript1%array2D, start3D, kount3D)
  4561:                       CALL check_err(iret)
  4562:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4563:                &         descript2%array2D, start3D, kount3D)
  4564:                       CALL check_err(iret)
  4565:                       iret = nf90_put_var(sta%ncid, sta%w_station_data_id,
  4566:                &         descript3%array2D, start3D, kount3D)
  4567:                       CALL check_err(iret)
  4568:                    ELSE
  4569:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4570:                &         descript1%array2D_g, start3D, kount3D)
  4571:                       CALL check_err(iret)
  4572:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4573:                &         descript2%array2D_g, start3D, kount3D)
  4574:                       CALL check_err(iret)
  4575:                       iret = nf90_put_var(sta%ncid, sta%w_station_data_id,
  4576:                &         descript3%array2D_g, start3D, kount3D)
  4577:                       CALL check_err(iret)
  4578:                    ENDIF
  4579:                 ! WJP 02.20.2018 Adding fort.51-52.nc capabilities
  4580:                  CASE(51)
  4581:                    iret=nf90_inq_varid(sta%ncid, "amp", sta%station_ha_data_id)
  4582:                    CALL check_err(iret)
  4583:                    iret=nf90_inq_varid(sta%ncid, "phs", sta%station_hg_data_id)
  4584:                    CALL check_err(iret)
  4585:                    IF (MNPROC.eq.1) THEN
  4586:                       iret = nf90_put_var(sta%ncid, sta%station_ha_data_id,
  4587:                &           descript1%array2D)
  4588:                       CALL check_err(iret)
  4589:                       iret = nf90_put_var(sta%ncid, sta%station_hg_data_id,
  4590:                &           descript2%array2D)
  4591:                       CALL check_err(iret)
  4592:                    ELSE
  4593:                       iret = nf90_put_var(sta%ncid, sta%station_ha_data_id,
  4594:                &         descript1%array2D_g)
  4595:                       CALL check_err(iret)
  4596:                       iret = nf90_put_var(sta%ncid, sta%station_hg_data_id,
  4597:                &         descript2%array2D_g)
  4598:                       CALL check_err(iret)
  4599:                    ENDIF
  4600:           
  4601:                 CASE(52)
  4602:                    iret=nf90_inq_varid(sta%ncid, "u-vel-amp",
  4603:                &        sta%ha_u_station_data_id)
  4604:                    CALL check_err(iret)
  4605:                    iret=nf90_inq_varid(sta%ncid, "u-vel-phs",
  4606:                &        sta%hg_u_station_data_id)
  4607:                    CALL check_err(iret)
  4608:                    iret=nf90_inq_varid(sta%ncid, "v-vel-amp",
  4609:                &        sta%ha_v_station_data_id)
  4610:                    CALL check_err(iret)
  4611:                    iret=nf90_inq_varid(sta%ncid, "v-vel-phs",
  4612:                &        sta%hg_v_station_data_id)
  4613:                    CALL check_err(iret)
  4614:                    IF (MNPROC.eq.1) THEN
  4615:                       iret = nf90_put_var(sta%ncid, sta%ha_u_station_data_id,
  4616:                &         descript1%array2D)
  4617:                       CALL check_err(iret)
  4618:                       iret = nf90_put_var(sta%ncid, sta%hg_u_station_data_id,
  4619:                &         descript2%array2D)
  4620:                       CALL check_err(iret)
  4621:                       iret = nf90_put_var(sta%ncid, sta%ha_v_station_data_id,
  4622:                &         descript3%array2D)
  4623:                       CALL check_err(iret)
  4624:                       iret = nf90_put_var(sta%ncid, sta%hg_v_station_data_id,
  4625:                &         descript4%array2D)
  4626:                       CALL check_err(iret)
  4627:                    ELSE
  4628:                       iret = nf90_put_var(sta%ncid, sta%ha_u_station_data_id,
  4629:                &         descript1%array2D_g)
  4630:                       CALL check_err(iret)
  4631:                       iret = nf90_put_var(sta%ncid, sta%hg_u_station_data_id,
  4632:                &         descript2%array2D_g)
  4633:                       CALL check_err(iret)
  4634:                       iret = nf90_put_var(sta%ncid, sta%ha_v_station_data_id,
  4635:                &         descript3%array2D_g)
  4636:                       CALL check_err(iret)
  4637:                       iret = nf90_put_var(sta%ncid, sta%hg_v_station_data_id,
  4638:                &         descript4%array2D_g)
  4639:                       CALL check_err(iret)
  4640:                    ENDIF
  4641:           
  4642:                 CASE(61)
  4643:                    iret=nf90_inq_varid(sta%ncid, "zeta", sta%station_data_id)
  4644:                    CALL check_err(iret)
  4645:                    IF (MNPROC.eq.1) THEN
  4646:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4647:                &          descript1%array, start, kount)
  4648:                    ELSE
  4649:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4650:                &          descript1%array_g, start, kount)
  4651:                    ENDIF
  4652:                    CALL check_err(iret)
  4653:                 CASE(62)
  4654:                    iret=nf90_inq_varid(sta%ncid, "u-vel", sta%u_station_data_id)
  4655:                    CALL check_err(iret)
  4656:                    iret=nf90_inq_varid(sta%ncid, "v-vel", sta%v_station_data_id)
  4657:                    CALL check_err(iret)
  4658:                    IF (MNPROC.eq.1) THEN
  4659:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4660:                &          descript1%array, start, kount)
  4661:                       CALL check_err(iret)
  4662:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4663:                &          descript1%array2, start, kount)
  4664:                    ELSE
  4665:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4666:                &          descript1%array_g, start, kount)
  4667:                       CALL check_err(iret)
  4668:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4669:                &          descript1%array2_g, start, kount)
  4670:                    ENDIF
  4671:                 CASE(71)
  4672:                    iret=nf90_inq_varid(sta%ncid, "pressure", sta%station_data_id)
  4673:                    CALL check_err(iret)
  4674:                    IF (MNPROC.eq.1) THEN
  4675:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4676:                &          descript1%array, start, kount)
  4677:                    ELSE
  4678:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4679:                &          descript1%array_g, start, kount)
  4680:                    ENDIF
  4681:                    CALL check_err(iret)
  4682:                 CASE(72)
  4683:                      iret=nf90_inq_varid(sta%ncid,"windx",sta%u_station_data_id)
  4684:                      CALL check_err(iret)
  4685:                      iret=nf90_inq_varid(sta%ncid,"windy",sta%v_station_data_id)
  4686:                      CALL check_err(iret)
  4687:                    IF (MNPROC.eq.1) THEN
  4688:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4689:                &          descript1%array, start, kount)
  4690:                       CALL check_err(iret)
  4691:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4692:                &          descript1%array2, start, kount)
  4693:                    ELSE
  4694:                       iret = nf90_put_var(sta%ncid, sta%u_station_data_id,
  4695:                &          descript1%array_g, start, kount)
  4696:                       CALL check_err(iret)
  4697:                       iret = nf90_put_var(sta%ncid, sta%v_station_data_id,
  4698:                &          descript1%array2_g, start, kount)
  4699:                    ENDIF
  4700:           
  4701:           C++ GML 20200605
  4702:                 CASE(91)
  4703:                    iret=nf90_inq_varid(sta%ncid, "iceaf", sta%station_data_id)
  4704:                    CALL check_err(iret)
  4705:                    IF (MNPROC.eq.1) THEN
  4706:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4707:                &          descript1%array, start, kount)
  4708:                    ELSE
  4709:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4710:                &          descript1%array_g, start, kount)
  4711:                    ENDIF
  4712:                    CALL check_err(iret)
  4713:           C++
  4714:           
  4715:                 CASE(109)
  4716:                    iret=nf90_inq_varid(sta%ncid, "dynamicWaterlevelCorrection", sta%station_data_id)
  4717:                    CALL check_err(iret)
  4718:                    IF (MNPROC.eq.1) THEN
  4719:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4720:                &          descript1%array, start, kount)
  4721:                    ELSE
  4722:                       iret = nf90_put_var(sta%ncid, sta%station_data_id,
  4723:                &          descript1%array_g, start, kount)
  4724:                    ENDIF
  4725:                    CALL check_err(iret)
  4726:           
  4727:           
  4728:                 CASE DEFAULT
  4729:                       write(scratchMessage,
  4730:                &       '("No netCDF for station files with unit number ",i0,".")') lun
  4731:                       call allMessage(ERROR,scratchMessage)
  4732:                 END SELECT
  4733:           !
  4734:           !     Close netCDF file
  4735:           9999  iret = nf90_close(sta%ncid)
  4736:                 CALL check_err(iret)
  4737:           
  4738:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4739:                 call allMessage(DEBUG,"Return.")
  4740:           #endif
  4741:                 call unsetMessageSource()
  4742:           C-----------------------------------------------------------------------
  4743:                 end subroutine writeStationData


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITESTATIONDATA
INLINE LIST

  ROOT: NETCDFIO::WRITESTATIONDATA (netcdfio.F:4413)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:4436)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4447)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:4451)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4452)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::SETRECORDCOUNTERANDSTORETIME (netcdfio.F:4455)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:5306)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:5312)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5313)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:5314)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5316)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5317)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5318)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5325)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5326)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:5357)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5369)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5370)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:5375)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:4460)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4461)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:4462)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4464)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4484)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4485)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4487)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4490)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4493)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4496)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4498)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4500)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4503)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4507)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4510)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4512)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4514)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4517)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4520)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4523)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4524)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4525)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4526)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4527)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4528)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4530)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4532)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4533)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4535)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4536)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4538)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4540)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4542)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4543)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4545)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4546)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4548)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4552)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4553)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4554)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4555)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4556)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4557)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4559)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4561)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4562)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4564)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4565)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4567)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4569)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4571)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4572)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4574)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4575)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4577)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4581)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4582)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4583)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4584)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4586)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4588)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4589)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4591)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4593)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4595)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4596)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4598)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4602)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4604)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4605)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4607)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4608)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4610)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4611)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4613)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4615)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4617)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4618)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4620)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4621)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4623)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4624)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4626)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4628)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4630)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4631)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4633)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4634)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4636)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4637)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4639)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4643)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4644)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4646)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4649)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4652)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4654)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4655)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4656)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4657)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4659)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4661)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4662)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4665)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4667)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4668)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4672)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4673)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4675)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4678)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4681)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4683)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4684)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4685)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4686)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4688)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4690)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4691)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4694)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4696)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4697)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4703)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4704)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4706)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4709)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4712)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4716)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4717)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4719)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:4722)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4725)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4731)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:4735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4736)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4741)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITESTATIONDATA
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:5328)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5328)
    *** The number of VLOAD, VSTORE. :  1,  0. (netcdfio.F:5328)
    *** Idiom detected. : SEARCH (netcdfio.F:5329)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5351)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    <Unvectorized loop.>
    *** Unvectorizable data type. : SCRATCHFORMAT (netcdfio.F:5351)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5355)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5355)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITESTATIONDATA
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 44 [s0-s12 s15-s16 s18-s39 s57-s63]
      Vector registers         :  9 [v55-v63]
      Vector mask registers    :  2 [vm14-vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 7728 bytes
      Register spill area      :  176 bytes
      Parameter area           :   80 bytes
      Register save area       :  176 bytes
      User data area           : 7296 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:5328)
    *** Estimated execution cycle                       : 374
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5355)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENODALDATA
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  4776: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  4781: vec( 103): Unvectorized loop.
  4781: vec( 108): Unvectorizable loop structure.
  4783: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  4785: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  4786: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  4789: inl(1222): Inlined: NETCDFIO::SETRECORDCOUNTERANDSTORETIME
  5312: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  5314: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  5317: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  5325: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  5369: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  5375: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  4814: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL
  5110: opt(3014): Moved reference within a conditional branch.
  5110: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5110: vec( 101): Vectorized loop.
  5127: opt(3014): Moved reference within a conditional branch.
  5127: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5127: vec( 101): Vectorized loop.
  5131: opt(3014): Moved reference within a conditional branch.
  5131: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5131: vec( 101): Vectorized loop.
  5155: opt(3014): Moved reference within a conditional branch.
  5155: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5155: vec( 101): Vectorized loop.
  5159: opt(3014): Moved reference within a conditional branch.
  5159: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5159: vec( 101): Vectorized loop.
  5183: opt(3014): Moved reference within a conditional branch.
  5183: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5183: vec( 101): Vectorized loop.
  5201: opt(3014): Moved reference within a conditional branch.
  5201: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5201: vec( 101): Vectorized loop.
  5219: opt(3014): Moved reference within a conditional branch.
  5219: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5219: vec( 101): Vectorized loop.
  5223: opt(3014): Moved reference within a conditional branch.
  5223: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5223: vec( 101): Vectorized loop.
  5247: opt(3014): Moved reference within a conditional branch.
  5247: opt(3008): Reference within a conditional branch moved outside loop - use "move" directive to suppress this optimization.
  5247: vec( 101): Vectorized loop.
  5249: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT
  5267: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENODALDATA
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  4751:                 SUBROUTINE writeNodalData(dat, lun, descript1, timesec,
  4752:                &   descript2, descript3, descript4 )
  4753:                 USE SIZES, ONLY : MNPROC, MYPROC
  4754:                 USE GLOBAL, ONLY : SNAMLEN, OutputDataDescript_t, NODECODE,
  4755:                &                   scratchMessage, IDEN
  4756:           
  4757:                 IMPLICIT NONE
  4758:           C
  4759:                 type(nodalData), intent(inout) :: dat
  4760:                 INTEGER, intent(in) :: lun
  4761:                 type(OutputDataDescript_t), intent(in) :: descript1
  4762:                 type(OutputDataDescript_t), intent(in), optional :: descript2
  4763:                 type(OutputDataDescript_t), intent(in), optional :: descript3
  4764:                 type(OutputDataDescript_t), intent(in), optional :: descript4
  4765:                 REAL(8), intent(in) :: timesec
  4766:           C
  4767:                 INTEGER i,j, ii
  4768:                 INTEGER counti(1), starti(1), n
  4769:                 INTEGER kount(2), start(2)
  4770:                 INTEGER kount3D(3), start3D(3)
  4771:                 INTEGER iret ! success or failure of the netcdf call
  4772:                 INTEGER num_values ! number of values in the array
  4773:                 INTEGER,ALLOCATABLE  :: tempIntArray(:)
  4774:                 REAL(8),ALLOCATABLE :: tempArray(:)
  4775:           C
  4776:                 call setMessageSource("writeNodalData")
  4777:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  4778:                 call allMessage(DEBUG,"Enter.")
  4779:           #endif
  4780:           C
  4781:                 write(scratchMessage,'("Rank ",i0," writing to ",a,".")') myproc,
  4782:                &   trim(dat%myFile%filename)
  4783:                 call allMessage(DEBUG,scratchMessage)
  4784:           
  4785:                 iret = nf90_open(dat%myFile%FILENAME, NF90_WRITE, dat%ncid)
  4786:                 CALL check_err(iret)
  4787:                 dat%myTime%timenc(dat%myTime%timenc_len)=timesec
  4788:           C
  4789:         I       CALL setRecordCounterAndStoreTime(dat%ncid, dat%myFile,
  4790:                &   dat%myTime)
  4791:           C
  4792:           C     Set up the 2D netcdf data extents
  4793:                 kount(1)=dat%myMesh%num_nodes
  4794:                 kount(2)=dat%myTime%timenc_len
  4795:                 start(1)=1
  4796:                 start(2)=dat%myFile%record_counter
  4797:           
  4798:           C
  4799:           C     Set up the 3D netcdf data extents
  4800:                 kount3D(1)=dat%myMesh%num_nodes
  4801:                 kount3D(2)=dat%myMesh%num_v_nodes
  4802:                 kount3D(3)=dat%myTime%timenc_len
  4803:                 start3D(1)=1
  4804:                 start3D(2)=1
  4805:                 start3D(3)=dat%myFile%record_counter
  4806:           C
  4807:           C     Grab the data ids
  4808:                 SELECT CASE(lun)
  4809:           C
  4810:                 CASE(44)
  4811:                    iret=nf90_inq_varid(dat%ncid, "sigmat", dat%u_nodal_data_id)
  4812:                    CALL check_err(iret)
  4813:                    IF (MNPROC.eq.1) THEN
  4814:                       iret = nf90_put_var(dat%ncid, dat%u_nodal_data_id,
  4815:                &          descript1%array2D, start3D, kount3D)
  4816:                    ELSE
  4817:                       iret = nf90_put_var(dat%ncid, dat%u_nodal_data_id,
  4818:                &          descript1%array2D_g, start3D, kount3D)
  4819:                    ENDIF
  4820:           
  4821:                    CALL check_err(iret)
  4822:                    IF ((iden.eq.2).or.(iden.eq.4)) THEN
  4823:                       iret=nf90_inq_varid(dat%ncid, "salinity",
  4824:                &          dat%v_nodal_data_id)
  4825:                       CALL check_err(iret)
  4826:                       IF (MNPROC.eq.1) THEN
  4827:                          iret = nf90_put_var(dat%ncid, dat%v_nodal_data_id,
  4828:                &             descript2%array2D, start3D, kount3D)
  4829:                       ELSE
  4830:                          iret = nf90_put_var(dat%ncid, dat%v_nodal_data_id,
  4831:                &           descript2%array2D_g, start3D, kount3D)
  4832:                       ENDIF
  4833:                       CALL check_err(iret)
  4834:                    ENDIF
  4835:                    IF ((iden.eq.3).or.(iden.eq.4)) THEN
  4836:                       iret=nf90_inq_varid(dat%ncid, "temperature",
  4837:                &         dat%w_nodal_data_id)
  4838:                       CALL check_err(iret)
  4839:                       IF (MNPROC.eq.1) THEN
  4840:                          iret = nf90_put_var(dat%ncid, dat%w_nodal_data_id,
  4841:                &            descript3%array2D, start3D, kount3D)
  4842:                       ELSE
  4843:                          iret = nf90_put_var(dat%ncid, dat%w_nodal_data_id,
  4844:                &            descript3%array2D_g, start3D, kount3D)
  4845:                       ENDIF
  4846:                       CALL check_err(iret)
  4847:                    ENDIF
  4848:                 CASE(45)
  4849:                    iret=nf90_inq_varid(dat%ncid, "u-vel3D", dat%u_nodal_data_id)
  4850:                    CALL check_err(iret)
  4851:                    iret=nf90_inq_varid(dat%ncid, "v-vel3D", dat%v_nodal_data_id)
  4852:                    CALL check_err(iret)
  4853:                    iret=nf90_inq_varid(dat%ncid, "w-vel3D", dat%w_nodal_data_id)
  4854:                    CALL check_err(iret)
  4855:                 CASE(46)
  4856:                    iret=nf90_inq_varid(dat%ncid, "q20", dat%u_nodal_data_id)
  4857:                    CALL check_err(iret)
  4858:                    iret=nf90_inq_varid(dat%ncid, "l", dat%v_nodal_data_id)
  4859:                    CALL check_err(iret)
  4860:                    iret=nf90_inq_varid(dat%ncid, "ev", dat%w_nodal_data_id)
  4861:                    CALL check_err(iret)
  4862:                 CASE(47)
  4863:                    iret=nf90_inq_varid(dat%ncid,"qsurfkp1",dat%nodal_data_id)
  4864:                    CALL check_err(iret)
  4865:                 ! WJP 02.20.2018 Adding capabilities for fort.53-54.nc
  4866:                 CASE(53)
  4867:                    iret=nf90_inq_varid(dat%ncid,"amp",dat%ha_nodal_data_id)
  4868:                    CALL check_err(iret)
  4869:                    iret=nf90_inq_varid(dat%ncid,"phs",dat%hg_nodal_data_id)
  4870:                    CALL check_err(iret)
  4871:                 CASE(54)
  4872:                    iret=nf90_inq_varid(dat%ncid, "u_amp", dat%ha_nodal_data_id)
  4873:                    CALL check_err(iret)
  4874:                    iret=nf90_inq_varid(dat%ncid, "u_phs", dat%hg_nodal_data_id)
  4875:                    CALL check_err(iret)
  4876:                    iret=nf90_inq_varid(dat%ncid, "v_amp", dat%v_ha_nodal_data_id)
  4877:                    CALL check_err(iret)
  4878:                    iret=nf90_inq_varid(dat%ncid, "v_phs", dat%v_hg_nodal_data_id)
  4879:                    CALL check_err(iret)
  4880:                 CASE(63)
  4881:                    iret=nf90_inq_varid(dat%ncid,"zeta",dat%nodal_data_id)
  4882:                    CALL check_err(iret)
  4883:                 CASE(64)
  4884:                    iret=nf90_inq_varid(dat%ncid, "u-vel", dat%u_nodal_data_id)
  4885:                    CALL check_err(iret)
  4886:                    iret=nf90_inq_varid(dat%ncid, "v-vel", dat%v_nodal_data_id)
  4887:                    CALL check_err(iret)
  4888:                 CASE(73)
  4889:                    iret=nf90_inq_varid(dat%ncid, "pressure", dat%nodal_data_id)
  4890:                    CALL check_err(iret)
  4891:                 CASE(74)
  4892:                    iret=nf90_inq_varid(dat%ncid,"windx",dat%u_nodal_data_id)
  4893:                    CALL check_err(iret)
  4894:                    iret=nf90_inq_varid(dat%ncid,"windy",dat%v_nodal_data_id)
  4895:                    CALL check_err(iret)
  4896:           C++ GML 20200528
  4897:                 CASE(93)
  4898:                    iret=nf90_inq_varid(dat%ncid,"iceaf",dat%nodal_data_id)
  4899:                    CALL check_err(iret)
  4900:           C++
  4901:                 CASE(173)
  4902:                    iret=nf90_inq_varid(dat%ncid, "winddrag", dat%nodal_data_id)
  4903:                    CALL check_err(iret)
  4904:                 CASE(77)
  4905:                    iret=nf90_inq_varid(dat%ncid,"weir_dz",dat%nodal_data_id)
  4906:                    CALL check_err(iret)
  4907:                 CASE(90)
  4908:                    iret=nf90_inq_varid(dat%ncid, "tau0", dat%nodal_data_id)
  4909:                    CALL check_err(iret)
  4910:                 CASE(164)
  4911:                   iret=nf90_inq_varid(dat%ncid, "radstress_x",dat%u_nodal_data_id)
  4912:                   CALL check_err(iret)
  4913:                   iret=nf90_inq_varid(dat%ncid, "radstress_y",dat%v_nodal_data_id)
  4914:                   CALL check_err(iret)
  4915:           #ifdef CSWAN
  4916:                 CASE(301)
  4917:                   iret=nf90_inq_varid(dat%ncid, "swan_HS", dat%nodal_data_id)
  4918:                   CALL check_err(iret)
  4919:                 CASE(302)
  4920:                   iret=nf90_inq_varid(dat%ncid, "swan_DIR", dat%nodal_data_id)
  4921:                   CALL check_err(iret)
  4922:                 CASE(303)
  4923:                   iret=nf90_inq_varid(dat%ncid, "swan_TM01", dat%nodal_data_id)
  4924:                   CALL check_err(iret)
  4925:                 CASE(304)
  4926:                   iret=nf90_inq_varid(dat%ncid, "swan_TPS", dat%nodal_data_id)
  4927:                   CALL check_err(iret)
  4928:                 CASE(305)
  4929:                   iret=nf90_inq_varid(dat%ncid, "swan_windx", dat%u_nodal_data_id)
  4930:                   CALL check_err(iret)
  4931:                   iret=nf90_inq_varid(dat%ncid, "swan_windy", dat%v_nodal_data_id)
  4932:                   CALL check_err(iret)
  4933:                 CASE(306)
  4934:                   iret=nf90_inq_varid(dat%ncid, "swan_TM02", dat%nodal_data_id)
  4935:                   CALL check_err(iret)
  4936:                 CASE(307)
  4937:                   iret=nf90_inq_varid(dat%ncid, "swan_TMM10", dat%nodal_data_id)
  4938:                   CALL check_err(iret)
  4939:           #endif
  4940:           
  4941:                 CASE(311)
  4942:                   iret=nf90_inq_varid(dat%ncid, "zeta_max", dat%max_nodal_data_id)
  4943:                   CALL check_err(iret)
  4944:                   iret=nf90_inq_varid(dat%ncid, "time_of_zeta_max",
  4945:                &        dat%time_max_nodal_data_id)
  4946:                   CALL check_err(iret)
  4947:                 CASE(312)
  4948:                   iret=nf90_inq_varid(dat%ncid, "vel_max",
  4949:                &           dat%max_nodal_data_id)
  4950:                   CALL check_err(iret)
  4951:                   iret=nf90_inq_varid(dat%ncid, "time_of_vel_max",
  4952:                &           dat%time_max_nodal_data_id)
  4953:                   CALL check_err(iret)
  4954:                 CASE(313)
  4955:                   iret=nf90_inq_varid(dat%ncid, "pressure_min",
  4956:                &          dat%max_nodal_data_id)
  4957:                   CALL check_err(iret)
  4958:                   iret=nf90_inq_varid(dat%ncid, "time_of_pressure_min",
  4959:                &          dat%time_max_nodal_data_id)
  4960:                   CALL check_err(iret)
  4961:                 CASE(314)
  4962:                   iret=nf90_inq_varid(dat%ncid, "wind_max",
  4963:                &          dat%max_nodal_data_id)
  4964:                   CALL check_err(iret)
  4965:                   iret=nf90_inq_varid(dat%ncid, "time_of_wind_max",
  4966:                &          dat%time_max_nodal_data_id)
  4967:                   CALL check_err(iret)
  4968:                 CASE(315)
  4969:                   iret=nf90_inq_varid(dat%ncid,"radstress_max",
  4970:                &           dat%max_nodal_data_id)
  4971:                   CALL check_err(iret)
  4972:                   iret=nf90_inq_varid(dat%ncid,"time_of_radstress_max",
  4973:                &           dat%time_max_nodal_data_id)
  4974:                   CALL check_err(iret)
  4975:           #ifdef CSWAN
  4976:                 CASE(316)
  4977:                   iret=nf90_inq_varid(dat%ncid, "swan_HS_max",
  4978:                &  dat%max_nodal_data_id)
  4979:                   CALL check_err(iret)
  4980:                 CASE(317)
  4981:                   iret=nf90_inq_varid(dat%ncid, "swan_DIR_max",
  4982:                &  dat%max_nodal_data_id)
  4983:                   CALL check_err(iret)
  4984:                 CASE(318)
  4985:                   iret=nf90_inq_varid(dat%ncid, "swan_TM01_max",
  4986:                &  dat%max_nodal_data_id)
  4987:                   CALL check_err(iret)
  4988:                 CASE(319)
  4989:                   iret=nf90_inq_varid(dat%ncid, "swan_TPS_max",
  4990:                &  dat%max_nodal_data_id)
  4991:                   CALL check_err(iret)
  4992:                 CASE(320)
  4993:                   iret=nf90_inq_varid(dat%ncid, "swan_wind_max",
  4994:                &  dat%max_nodal_data_id)
  4995:                   CALL check_err(iret)
  4996:                 CASE(321)
  4997:                   iret=nf90_inq_varid(dat%ncid, "swan_TM02_max",
  4998:                &  dat%max_nodal_data_id)
  4999:                   CALL check_err(iret)
  5000:                 CASE(322)
  5001:                   iret=nf90_inq_varid(dat%ncid, "swan_TMM10_max",
  5002:                &  dat%max_nodal_data_id)
  5003:                   CALL check_err(iret)
  5004:           #endif
  5005:           
  5006:                 ! inundationtime.63
  5007:                 CASE(400)
  5008:                   iret=nf90_inq_varid(dat%ncid, "inun_time",
  5009:                &          dat%max_nodal_data_id)
  5010:                   CALL check_err(iret)
  5011:                   iret=nf90_inq_varid(dat%ncid, "onset_inun_time",
  5012:                &          dat%time_max_nodal_data_id)
  5013:                   CALL check_err(iret)
  5014:                 ! maxinundepth.63
  5015:                 CASE(401)
  5016:                   iret=nf90_inq_varid(dat%ncid, "inun_max",
  5017:                &          dat%max_nodal_data_id)
  5018:                   CALL check_err(iret)
  5019:                   iret=nf90_inq_varid(dat%ncid, "time_of_inun_max",
  5020:                &          dat%time_max_nodal_data_id)
  5021:                   CALL check_err(iret)
  5022:                 ! initiallydry.63
  5023:                 CASE(402)
  5024:                   iret=nf90_inq_varid(dat%ncid, "initiallydry",dat%nodal_data_id)
  5025:                   CALL check_err(iret)
  5026:                 ! endrisinginun.63
  5027:                 CASE(403)
  5028:                   iret=nf90_inq_varid(dat%ncid, "endrisinginun",dat%nodal_data_id)
  5029:                   CALL check_err(iret)
  5030:                 CASE(404)
  5031:                   iret=nf90_inq_varid(dat%ncid, "everdried",
  5032:                &          dat%max_nodal_data_id)
  5033:                   CALL check_err(iret)
  5034:                   iret=nf90_inq_varid(dat%ncid, "time_of_everdried",
  5035:                &          dat%time_max_nodal_data_id)
  5036:                   CALL check_err(iret)
  5037:           
  5038:                 CASE(108)
  5039:                    iret=nf90_inq_varid(dat%ncid,"dynamicWaterlevelCorrection",dat%nodal_data_id)
  5040:                    CALL check_err(iret)
  5041:           
  5042:           
  5043:                 CASE DEFAULT
  5044:                    write(scratchMessage,
  5045:                &       '("No netCDF for files with unit number ",i0,".")') lun
  5046:                    call allMessage(ERROR,scratchMessage)
  5047:                 END SELECT
  5048:           C
  5049:           C     Write the array values
  5050:                 SELECT CASE(lun)
  5051:                 CASE(45,46)
  5052:                    IF (MNPROC.eq.1) THEN
  5053:                       iret = nf90_put_var(dat%ncid, dat%u_nodal_data_id,
  5054:                &          descript1%array2D, start3D, kount3D)
  5055:                       CALL check_err(iret)
  5056:                       iret = nf90_put_var(dat%ncid, dat%v_nodal_data_id,
  5057:                &          descript2%array2D, start3D, kount3D)
  5058:                       CALL check_err(iret)
  5059:                       iret = nf90_put_var(dat%ncid, dat%w_nodal_data_id,
  5060:                &          descript3%array2D, start3D, kount3D)
  5061:                       CALL check_err(iret)
  5062:                    ELSE
  5063:                       iret = nf90_put_var(dat%ncid, dat%u_nodal_data_id,
  5064:                &          descript1%array2D_g, start3D, kount3D)
  5065:                       CALL check_err(iret)
  5066:                       iret = nf90_put_var(dat%ncid, dat%v_nodal_data_id,
  5067:                &          descript2%array2D_g, start3D, kount3D)
  5068:                       CALL check_err(iret)
  5069:                       iret = nf90_put_var(dat%ncid, dat%w_nodal_data_id,
  5070:                &          descript3%array2D_g, start3D, kount3D)
  5071:                       CALL check_err(iret)
  5072:                    ENDIF
  5073:                 !WJP 02.20.2018 Adding capabilities for fort.53-54.nc
  5074:                 CASE(53,54)
  5075:                    IF (MNPROC.eq.1) THEN
  5076:                       iret = nf90_put_var(dat%ncid, dat%ha_nodal_data_id,
  5077:                &          descript1%array2D)
  5078:                       CALL check_err(iret)
  5079:                       iret = nf90_put_var(dat%ncid, dat%hg_nodal_data_id,
  5080:                &          descript2%array2D)
  5081:                       CALL check_err(iret)
  5082:                       IF (lun.eq.54) THEN
  5083:                          iret = nf90_put_var(dat%ncid, dat%v_ha_nodal_data_id,
  5084:                &         descript3%array2D)
  5085:                          CALL check_err(iret)
  5086:                          iret = nf90_put_var(dat%ncid, dat%v_hg_nodal_data_id,
  5087:                &         descript4%array2D)
  5088:                          CALL check_err(iret)
  5089:                       ENDIF
  5090:                    ELSE
  5091:                       iret = nf90_put_var(dat%ncid, dat%ha_nodal_data_id,
  5092:                &          descript1%array2D_g)
  5093:                       CALL check_err(iret)
  5094:                       iret = nf90_put_var(dat%ncid, dat%hg_nodal_data_id,
  5095:                &          descript2%array2D_g)
  5096:                       CALL check_err(iret)
  5097:                       IF (lun.eq.54) THEN
  5098:                          iret = nf90_put_var(dat%ncid, dat%v_ha_nodal_data_id,
  5099:                &         descript3%array2D_g)
  5100:                          CALL check_err(iret)
  5101:                          iret = nf90_put_var(dat%ncid, dat%v_hg_nodal_data_id,
  5102:                &         descript4%array2D_g)
  5103:                          CALL check_err(iret)
  5104:                       ENDIF
  5105:                    ENDIF
  5106:                 CASE(316,317,318,319,321,322)  !swan max/min
  5107:                    IF (MNPROC.eq.1) THEN ! SERIAL
  5108:                       IF ( descript1%ConsiderWetDry.eqv..TRUE.) THEN
  5109:                          allocate(tempArray(1:dat%myMesh%num_nodes))
  5110: V======>                 tempArray = merge(descript1%array,
  5111:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5112:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,tempArray)
  5113:                       ELSE
  5114:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5115:                &            descript1%array)
  5116:                       ENDIF
  5117:                       CALL check_err(iret)
  5118:                    ELSE
  5119:                       iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5120:                &            descript1%array_g)
  5121:                       CALL check_err(iret)
  5122:                    ENDIF
  5123:                 CASE(311,313)  !adcirc max/min only
  5124:                    IF (MNPROC.eq.1) THEN ! SERIAL
  5125:                       IF ( descript1%ConsiderWetDry.eqv..TRUE.) THEN
  5126:                          allocate(tempArray(1:dat%myMesh%num_nodes))
  5127: V======>                 tempArray = merge(descript1%array,
  5128:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5129:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,tempArray)
  5130:                          CALL check_err(iret)
  5131: V======>                 tempArray = merge(descript1%array2,
  5132:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5133:                          iret = nf90_put_var(dat%ncid, dat%time_max_nodal_data_id,tempArray)
  5134:                          CALL check_err(iret)
  5135:                       ELSE
  5136:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5137:                &            descript1%array)
  5138:                          CALL check_err(iret)
  5139:                          iret = nf90_put_var(dat%ncid, dat%time_max_nodal_data_id,
  5140:                &            descript1%array2)
  5141:                          CALL check_err(iret)
  5142:                       ENDIF
  5143:                    ELSE
  5144:                       iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5145:                &            descript1%array_g)
  5146:                       CALL check_err(iret)
  5147:                       iret = nf90_put_var(dat%ncid, dat%time_max_nodal_data_id,
  5148:                &            descript1%array2_g)
  5149:                       CALL check_err(iret)
  5150:                    ENDIF
  5151:                 CASE(312,314,315,400,401,404)  !adcirc max/min
  5152:                    IF (MNPROC.eq.1) THEN ! SERIAL
  5153:                       IF ( descript1%ConsiderWetDry.eqv..TRUE.) THEN
  5154:                          allocate(tempArray(1:dat%myMesh%num_nodes))
  5155: V======>                 tempArray = merge(descript1%array,
  5156:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5157:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,tempArray)
  5158:                          CALL check_err(iret)
  5159: V======>                 tempArray = merge(descript1%array2,
  5160:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5161:                          iret = nf90_put_var(dat%ncid, dat%time_max_nodal_data_id,tempArray)
  5162:                          CALL check_err(iret)
  5163:                       ELSE
  5164:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5165:                &             descript1%array)
  5166:                          CALL check_err(iret)
  5167:                          iret = nf90_put_var(dat%ncid, dat%time_max_nodal_data_id,
  5168:                &             descript1%array2)
  5169:                          CALL check_err(iret)
  5170:                       ENDIF
  5171:                    ELSE                  ! PARALLEL
  5172:                       iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5173:                &            descript1%array_g)
  5174:                       CALL check_err(iret)
  5175:                       iret = nf90_put_var(dat%ncid, dat%time_max_nodal_data_id,
  5176:                &            descript1%array2_g)
  5177:                       CALL check_err(iret)
  5178:                    ENDIF
  5179:                 CASE(320)  !swan max/min
  5180:                    IF (MNPROC.eq.1) THEN ! SERIAL
  5181:                       IF ( descript1%ConsiderWetDry.eqv..TRUE.) THEN
  5182:                          allocate(tempArray(1:dat%myMesh%num_nodes))
  5183: V======>                 tempArray = merge(descript1%array,
  5184:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5185:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,tempArray)
  5186:                          CALL check_err(iret)
  5187:                       ELSE
  5188:                          iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5189:                &             descript1%array)
  5190:                          CALL check_err(iret)
  5191:                       ENDIF
  5192:                    ELSE                  ! PARALLEL
  5193:                       iret = nf90_put_var(dat%ncid, dat%max_nodal_data_id,
  5194:                &            descript1%array_g)
  5195:                       CALL check_err(iret)
  5196:                    ENDIF
  5197:                 CASE(47,63,73,77,90,93,173,301,302,303,304,306,307,108) ! GML added 93 20210727
  5198:                    IF (MNPROC.eq.1) THEN ! SERIAL
  5199:                       IF ( descript1%ConsiderWetDry.eqv..TRUE.) THEN
  5200:                          allocate(tempArray(1:dat%myMesh%num_nodes))
  5201: V======>                 tempArray = merge(descript1%array,
  5202:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5203:           
  5204:                          iret = nf90_put_var(dat%ncid, dat%nodal_data_id,tempArray,start,kount)
  5205:                       ELSE
  5206:                          iret = nf90_put_var(dat%ncid, dat%nodal_data_id,
  5207:                &            descript1%array, start, kount)
  5208:                       ENDIF
  5209:                       CALL check_err(iret)
  5210:                    ELSE
  5211:                       iret = nf90_put_var(dat%ncid, dat%nodal_data_id,
  5212:                &            descript1%array_g, start, kount)
  5213:                       CALL check_err(iret)
  5214:                    ENDIF
  5215:                 CASE(64,74,164,305)
  5216:                    IF (MNPROC.eq.1) THEN ! SERIAL
  5217:                       IF ( descript1%ConsiderWetDry.eqv..TRUE.) THEN
  5218:                          allocate(tempArray(1:dat%myMesh%num_nodes))
  5219: V======>                 tempArray = merge(descript1%array,
  5220:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5221:                          iret = nf90_put_var(dat%ncid, dat%u_nodal_data_id,tempArray,start,kount)
  5222:                          CALL check_err(iret)
  5223: V======>                 tempArray = merge(descript1%array2,
  5224:                &              spread(descript1%alternate_value,1,kount(1)),nodecode.gt.0)
  5225:                          iret = nf90_put_var(dat%ncid, dat%v_nodal_data_id,tempArray,start,kount)
  5226:                          CALL check_err(iret)
  5227:                       ELSE
  5228:                          iret = nf90_put_var(dat%ncid, dat%u_nodal_data_id,
  5229:                &             descript1%array, start, kount)
  5230:                          CALL check_err(iret)
  5231:                          iret = nf90_put_var(dat%ncid, dat%v_nodal_data_id,
  5232:                &             descript1%array2, start, kount)
  5233:                          CALL check_err(iret)
  5234:                       ENDIF
  5235:                    ELSE                  ! PARALLEL
  5236:                       iret = nf90_put_var(dat%ncid, dat%u_nodal_data_id,
  5237:                &            descript1%array_g, start, kount)
  5238:                       CALL check_err(iret)
  5239:                       iret = nf90_put_var(dat%ncid, dat%v_nodal_data_id,
  5240:                &            descript1%array2_g, start, kount)
  5241:                       CALL check_err(iret)
  5242:                    ENDIF
  5243:                 CASE(402,403)  ! integers at nodes (e.g., initiallydry.63, endrisinginun.63)
  5244:                    IF (MNPROC.eq.1) THEN ! SERIAL
  5245:                       IF ( descript1%ConsiderWetDry.eqv..TRUE.) THEN
  5246:                          allocate(tempIntArray(1:dat%myMesh%num_nodes))
  5247: V======>                 tempIntArray = merge(descript1%iarray,
  5248:                &              spread(int(descript1%alternate_value),1,kount(1)),nodecode.gt.0)
  5249:                          iret = nf90_put_var(dat%ncid, dat%nodal_data_id,tempIntArray,start,kount)
  5250:                       ELSE
  5251:                          iret = nf90_put_var(dat%ncid, dat%nodal_data_id,
  5252:                &            descript1%iarray, start, kount)
  5253:                       ENDIF
  5254:                       CALL check_err(iret)
  5255:                    ELSE
  5256:                       iret = nf90_put_var(dat%ncid, dat%nodal_data_id,
  5257:                &            descript1%iarray_g, start, kount)
  5258:                       CALL check_err(iret)
  5259:                    ENDIF
  5260:                 CASE DEFAULT
  5261:                       write(scratchMessage,
  5262:                &       '("No netCDF for files with unit number ",i0,".")') lun
  5263:                       call allMessage(ERROR,scratchMessage)
  5264:                 END SELECT
  5265:           !
  5266:           !     Close netCDF file
  5267:           9999  iret = nf90_close(dat%ncid)
  5268:                 CALL check_err(iret)
  5269:           
  5270:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  5271:                 call allMessage(DEBUG,"Return.")
  5272:           #endif
  5273:                 call unsetMessageSource()
  5274:           C-----------------------------------------------------------------------
  5275:                 end subroutine writeNodalData


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENODALDATA
INLINE LIST

  ROOT: NETCDFIO::WRITENODALDATA (netcdfio.F:4751)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:4776)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4783)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:4785)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4786)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::SETRECORDCOUNTERANDSTORETIME (netcdfio.F:4789)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:5306)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:5312)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5313)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:5314)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5316)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5317)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5318)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5325)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5326)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:5357)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5369)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5370)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:5375)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4811)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4812)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4814)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4817)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4821)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4823)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4825)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4827)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4830)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4833)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4836)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4838)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4840)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:4843)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4846)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4849)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4850)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4851)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4852)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4853)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4854)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4856)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4857)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4858)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4859)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4860)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4861)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4863)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4864)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4867)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4868)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4869)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4872)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4873)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4874)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4875)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4876)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4877)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4878)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4879)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4881)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4882)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4884)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4885)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4886)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4887)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4889)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4890)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4892)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4893)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4894)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4895)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4898)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4899)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4902)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4903)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4905)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4906)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4908)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4909)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4911)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4912)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4913)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4914)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4942)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4943)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4944)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4946)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4948)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4950)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4951)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4953)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4955)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4957)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4958)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4960)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4962)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4964)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4965)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4967)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4969)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4971)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:4972)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4974)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5008)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5010)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5011)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5013)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5016)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5018)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5019)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5021)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5024)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5025)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5028)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5029)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5031)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5033)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5034)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5036)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5039)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5040)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:5046)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5053)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5055)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5056)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5058)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5059)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5061)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5063)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5065)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5066)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5068)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5069)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5071)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5076)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5078)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5079)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5081)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5083)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5085)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5086)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5088)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5091)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5093)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5094)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5096)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5098)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5100)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:5101)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5103)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5112)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5114)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5117)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5119)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5121)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5129)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5130)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5133)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5134)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5136)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5138)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5139)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5141)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5144)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5146)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5147)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5149)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5157)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5158)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5161)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5162)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5164)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5166)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5167)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5169)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5172)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5174)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5175)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5177)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5185)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5186)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5188)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5190)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5193)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5195)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5204)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5206)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5209)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5211)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5213)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5221)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5222)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5225)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5226)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5228)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5230)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5231)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5233)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5236)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5238)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5239)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5241)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:5249)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:5251)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5254)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:5256)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5258)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:5263)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:5267)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5268)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:5273)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENODALDATA
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:4781)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:4781)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5328)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5328)
    *** The number of VLOAD, VSTORE. :  1,  0. (netcdfio.F:5328)
    *** Idiom detected. : SEARCH (netcdfio.F:5329)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5351)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    <Unvectorized loop.>
    *** Unvectorizable data type. : SCRATCHFORMAT (netcdfio.F:5351)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5355)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5355)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5247)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5247)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5247)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5247)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5247)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5247)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5183)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5183)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5183)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5183)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5183)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5183)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5110)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5110)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5110)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5110)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5110)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5110)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5155)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5155)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5155)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5155)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5155)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5155)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5159)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5159)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5159)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5159)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5159)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5159)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5127)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5127)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5127)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5127)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5127)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5127)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5131)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5131)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5131)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5131)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5131)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5131)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5219)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5219)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5219)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5219)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5219)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5219)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5223)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5223)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5223)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5223)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5223)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5223)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5201)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5201)
    *** The number of VLOAD, VSTORE. :  3,  1. (netcdfio.F:5201)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5201)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5201)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:5201)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENODALDATA
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 56 [s0-s12 s15-s16 s18-s43 s49-s63]
      Vector registers         : 49 [v15-v63]
      Vector mask registers    :  2 [vm14-vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 10736 bytes
      Register spill area      :   624 bytes
      Parameter area           :    80 bytes
      Register save area       :   176 bytes
      User data area           :  9856 bytes
      Others                   :     0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:4781)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5328)
    *** Estimated execution cycle                       : 374
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5355)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5247)
    *** Estimated execution cycle                       : 162
  LOOP END

  LOOP BEGIN: (netcdfio.F:5247)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5183)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5183)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5110)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5110)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5155)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5155)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5159)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5159)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5127)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5127)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5131)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5131)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5219)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5219)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5223)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5223)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:5201)
    *** Estimated execution cycle                       : 159
  LOOP END

  LOOP BEGIN: (netcdfio.F:5201)
    *** Estimated execution cycle                       : 64
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETRECORDCOUNTERANDSTORETIME
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  5306: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  5312: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  5313: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  5314: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  5317: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  5325: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  5328: vec( 101): Vectorized loop.
  5329: vec( 126): Idiom detected.: SEARCH
  5351: vec( 103): Unvectorized loop.
  5351: vec( 118): Unvectorizable data type.: SCRATCHFORMAT
  5355: vec( 103): Unvectorized loop.
  5355: vec( 108): Unvectorizable loop structure.
  5357: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  5369: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  5375: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETRECORDCOUNTERANDSTORETIME
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  5289:                 SUBROUTINE setRecordCounterAndStoreTime(ncid, f, t)
  5290:                 USE GLOBAL, ONLY : scratchMessage, scratchFormat
  5291:                 IMPLICIT NONE
  5292:           C
  5293:                 INTEGER, intent(in) :: ncid
  5294:                 type(fileData), intent(inout) :: f
  5295:                 type(timeData), intent(inout) :: t
  5296:           C
  5297:                 REAL(8), allocatable :: storedTimes(:) ! array of time values in file
  5298:                 LOGICAL :: timeFound ! true if current time is in array of stored times
  5299:                 INTEGER :: ndim      ! number of dimensions in the netcdf file
  5300:                 INTEGER :: nvar      ! number of variables in the netcdf file
  5301:                 INTEGER :: natt      ! number of attributes in the netcdf file
  5302:                 INTEGER :: counti(1), starti(1)
  5303:                 INTEGER :: iret  ! success or failure of netcdf call
  5304:                 INTEGER :: i     ! loop counter
  5305:           C
  5306:                 call setMessageSource("setRecordCounterAndStoreTime")
  5307:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  5308:                 call allMessage(DEBUG,"Enter.")
  5309:           #endif
  5310:           !
  5311:           !     Inquire time variable
  5312:                 iret=nf90_inquire(ncid, ndim, nvar, natt, t%timenc_dim_id)
  5313:                 CALL check_err(iret)
  5314:                 iret=nf90_inquire_dimension(ncid, t%timenc_dim_id,
  5315:                &    len=f%record_counter)
  5316:                 CALL check_err(iret)
  5317:                 iret=nf90_inq_varid(ncid, "time", t%timenc_id)
  5318:                 CALL check_err(iret)
  5319:           C
  5320:           C     Determine the relationship between the current simulation time
  5321:           C     and the time array stored in the netcdf file. Set the record
  5322:           C     counter based on this relationship.
  5323:                 IF (f%record_counter.ne.0) THEN
  5324:                    allocate(storedTimes(f%record_counter))
  5325:                    iret=nf90_get_var(ncid, t%timenc_id, storedTimes)
  5326:                    CALL check_err(iret)
  5327:                    timeFound = .false.
  5328: V------>           DO i=1,f%record_counter
  5329: |                     IF ((t%timenc(1).lt.storedTimes(i)).or.
  5330: |              &         (abs(t%timenc(1)-storedTimes(i)).lt.1.0d-10)) THEN
  5331: |                        timeFound = .true.
  5332: |                        EXIT
  5333: |                     ENDIF
  5334: V------            ENDDO
  5335:                    IF (timeFound.eqv..false.) THEN
  5336:                       ! Increment the record counter so that we can store data at the
  5337:                       ! next location in the netcdf file (i.e., all of the times
  5338:                       ! in the netcdf file were found to be earlier than the current
  5339:                       ! adcirc simulation time).
  5340:                       f%record_counter = f%record_counter + 1
  5341:                    ELSE
  5342:                       ! jgf49.48.08: set the counter at the index that reflects the
  5343:                       ! current time within the netcdf file (or is between two times
  5344:                       ! found in the netcdf file).
  5345:                       ! WARNING: all subsequent data will remain in the file, we
  5346:                       ! are just overwriting it ... if we don't overwrite all of it,
  5347:                       ! the pre-existing data will still be there, which is probably
  5348:                       ! not what the user intended ... but apparently there is no
  5349:                       ! way to delete data from netcdf files:
  5350:                       ! http://www.unidata.ucar.edu/support/help/MailArchives/netcdf/msg02367.html
  5351: +======>              scratchFormat =
  5352:                &      '("Overwriting pre-existing data in netcdf file ",a,'//
  5353:                &      '" for time=",f17.8,". ' //
  5354:                &      'Subsequent data in netcdf file remain unchanged.")'
  5355:                       write(scratchMessage,scratchFormat)
  5356:                &          trim(f%FILENAME), t%timenc(1)
  5357:                       CALL allMessage(INFO,scratchMessage)
  5358:                       f%record_counter = i
  5359:                    ENDIF
  5360:                    deallocate(storedTimes)
  5361:                 ELSE
  5362:                    ! set the counter at 1 so we can record our first time value
  5363:                    f%record_counter = 1
  5364:                 ENDIF
  5365:           !
  5366:           !     Store simulation time in netcdf file
  5367:                 starti(1)=f%record_counter
  5368:                 counti(1)=t%timenc_len
  5369:                 iret = nf90_put_var(ncid, t%timenc_id, t%timenc, starti, counti)
  5370:                 CALL check_err(iret)
  5371:           
  5372:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  5373:                 call allMessage(DEBUG,"Return.")
  5374:           #endif
  5375:                 call unsetMessageSource()
  5376:           C-----------------------------------------------------------------------
  5377:                 end subroutine setRecordCounterAndStoreTime


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETRECORDCOUNTERANDSTORETIME
INLINE LIST

  ROOT: NETCDFIO::SETRECORDCOUNTERANDSTORETIME (netcdfio.F:5289)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:5306)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:5312)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5313)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:5314)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5316)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:5317)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5318)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5325)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5326)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:5357)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:5369)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5370)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:5375)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETRECORDCOUNTERANDSTORETIME
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:5328)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:5328)
    *** The number of VLOAD, VSTORE. :  1,  0. (netcdfio.F:5328)
    *** Idiom detected. : SEARCH (netcdfio.F:5329)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5351)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    <Unvectorized loop.>
    *** Unvectorizable data type. : SCRATCHFORMAT (netcdfio.F:5351)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5355)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5355)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:51 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETRECORDCOUNTERANDSTORETIME
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 37 [s0-s6 s8-s12 s15-s16 s18-s33 s57-s63]
      Vector registers         :  9 [v55-v63]
      Vector mask registers    :  2 [vm14-vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 2496 bytes
      Register spill area      :    0 bytes
      Parameter area           :   56 bytes
      Register save area       :  176 bytes
      User data area           : 2256 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:5328)
    *** Estimated execution cycle                       : 374
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5351)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5355)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:52 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  5409: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  5434: inl(1222): Inlined: NETCDFIO::CREATENETCDFOUTPUTFILE
  4001: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  4021: inl(1212): Source for routine not found.: GLOBAL::SCREENMESSAGE
  4041: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  4079: inl(1212): Source for routine not found.: NETCDF::NF90_CREATE
  4080: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  4082: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_DIM
  4086: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
  5449: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::INITNETCDFCOORD
  5451: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::DEFINEMESHVARIABLES
  5460: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
  5467: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  5469: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
  5489: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  5512: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  5536: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  5556: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  5587: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  5618: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
  5652: vec( 103): Unvectorized loop.
  5652: vec( 118): Unvectorizable data type.: ATT_TEXT
  5654: vec( 103): Unvectorized loop.
  5654: vec( 108): Unvectorizable loop structure.
  5657: vec( 103): Unvectorized loop.
  5657: vec( 118): Unvectorizable data type.: ATT_TEXT
  5658: vec( 103): Unvectorized loop.
  5658: vec( 108): Unvectorizable loop structure.
  5668: vec( 103): Unvectorized loop.
  5668: vec( 118): Unvectorizable data type.: ATT_TEXT
  5670: vec( 103): Unvectorized loop.
  5670: vec( 108): Unvectorizable loop structure.
  5673: vec( 103): Unvectorized loop.
  5673: vec( 118): Unvectorizable data type.: ATT_TEXT
  5674: vec( 103): Unvectorized loop.
  5674: vec( 108): Unvectorizable loop structure.
  5715: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_SCALAR
  5717: vec( 103): Unvectorized loop.
  5717: vec( 118): Unvectorizable data type.: ATT_TEXT
  5726: vec( 103): Unvectorized loop.
  5726: vec( 118): Unvectorizable data type.: ATT_TEXT
  5728: vec( 103): Unvectorized loop.
  5728: vec( 108): Unvectorizable loop structure.
  5730: vec( 103): Unvectorized loop.
  5730: vec( 118): Unvectorizable data type.: ATT_TEXT
  5731: vec( 103): Unvectorized loop.
  5731: vec( 108): Unvectorizable loop structure.
  5737: vec( 103): Unvectorized loop.
  5737: vec( 118): Unvectorizable data type.: ATT_TEXT
  5741: vec( 103): Unvectorized loop.
  5741: vec( 108): Unvectorizable loop structure.
  5743: vec( 103): Unvectorized loop.
  5743: vec( 118): Unvectorizable data type.: ATT_TEXT
  5744: vec( 103): Unvectorized loop.
  5744: vec( 108): Unvectorizable loop structure.
  5750: vec( 103): Unvectorized loop.
  5750: vec( 118): Unvectorizable data type.: ATT_TEXT
  5753: vec( 103): Unvectorized loop.
  5753: vec( 108): Unvectorizable loop structure.
  5756: vec( 103): Unvectorized loop.
  5756: vec( 118): Unvectorizable data type.: ATT_TEXT
  5757: vec( 103): Unvectorized loop.
  5757: vec( 108): Unvectorizable loop structure.
  5957: inl(1222): Inlined: NETCDFIO::DEFINETIMEATTRIBUTES
  5960: inl(1214): Expansion routine is too big for automatic expansion.: NETCDFIO::DEFINEMETADATA
  5963: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
  5967: inl(1222): Inlined: NETCDFIO::PUTMESHVARIABLES
 10347: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
 10364: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_2D_FOURBYTEINT
 10370: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT
  5970: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  5386:                 SUBROUTINE initNetCDFHotstart(lun, Elev1Descript,
  5387:                &   Elev2Descript, VelDescript, CH1Descript, EtaDiscDescript,
  5388:                &   NodeCodeDescript, NOFFDescript, ncerror)
  5389:                 USE GLOBAL, ONLY : OutputDataDescript_t, IM, IMHS, C3D, NE_G, NP_G
  5390:                 USE ADC_CONSTANTS, ONLY: G
  5391:                 USE MESH, ONLY : ICS
  5392:                 IMPLICIT NONE
  5393:           C
  5394:                 INTEGER, intent(in) :: lun
  5395:                 type(OutputDataDescript_t), intent(inout) :: Elev1Descript
  5396:                 type(OutputDataDescript_t), intent(in) :: Elev2Descript
  5397:                 type(OutputDataDescript_t), intent(in) :: VelDescript
  5398:                 type(OutputDataDescript_t), intent(in) :: CH1Descript
  5399:                 type(OutputDataDescript_t), intent(in) :: EtaDiscDescript
  5400:                 type(OutputDataDescript_t), intent(in) :: NodeCodeDescript
  5401:                 type(OutputDataDescript_t), intent(in) :: NOFFDescript
  5402:           C
  5403:                 LOGICAL ncerror
  5404:           C
  5405:                 INTEGER iret ! success or failure of the netcdf call
  5406:           
  5407:                 INTEGER :: tempid
  5408:           C
  5409:                 call setMessageSource("initNetCDFHotstart")
  5410:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  5411:                 call allMessage(DEBUG,"Enter.")
  5412:           #endif
  5413:                 ncerror = .false.
  5414:           C
  5415:           C     Point to the hotstart file we want to work on.
  5416:                 IF (lun.eq.67) THEN
  5417:                    hs => hs67
  5418:                 ELSE
  5419:                    hs => hs68
  5420:                 ENDIF
  5421:                 hs%myMesh => adcircMesh
  5422:                 IF (hs%myMesh%initialized.eqv..false.) THEN
  5423:                    hs%myMesh%num_nodes = NP_G
  5424:                    hs%myMesh%num_elems = NE_G
  5425:                    hs%myMesh%nface_len = 3
  5426:                 ENDIF
  5427:                 IF (hs%myTime%initialized.eqv..false.) THEN
  5428:                    ALLOCATE(hs%myTime%timenc(hs%myTime%timenc_len))
  5429:                    hs%myTime%initialized = .true.
  5430:                 ENDIF
  5431:           C
  5432:           C     Initialize netCDF hotstart file, creating a new one
  5433:                 Elev1Descript % lun = lun
  5434:         I       CALL createNetCDFOutputFile(hs%ncid, hs%myFile, hs%myTime,
  5435:                &                            Elev1Descript, ncerror)
  5436:                 ! return an error flag to the calling routine if something went
  5437:                 ! wrong when we tried to create the netcdf file
  5438:                 if ( ncerror.eqv..true. ) then
  5439:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  5440:                    call allMessage(DEBUG,"Return.")
  5441:           #endif
  5442:                    call unsetMessageSource()
  5443:                    return
  5444:                 endif
  5445:                 IF (hs%myMesh%initialized.eqv..false.) THEN
  5446:                    hs%myMesh%num_nodes = NP_G
  5447:                    hs%myMesh%num_elems = NE_G
  5448:                    hs%myMesh%nface_len = 3
  5449:                    CALL initNetCDFCoord(hs%myMesh)
  5450:                 ENDIF
  5451:                 CALL defineMeshVariables(hs%ncid, hs%myMesh, hs%myFile)
  5452:           C
  5453:           C     Z E T A 1
  5454:                 hs%zeta1%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5455:                 hs%zeta1%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5456:                 iret = nf90_def_var(hs%ncid, 'zeta1', NF90_DOUBLE,
  5457:                &   hs%zeta1%nodal_data_dims, hs%zeta1%nodal_data_id)
  5458:                 CALL check_err(iret)
  5459:           
  5460:                 iret = nf90_put_att(hs%ncid, hs%zeta1%nodal_data_id,
  5461:                &   'long_name', 'water surface elevation at previous time step')
  5462:                 CALL check_err(iret)
  5463:                 iret = nf90_put_att(hs%ncid, hs%zeta1%nodal_data_id,
  5464:                &   'standard_name',
  5465:                &      'water_surface_elevation_at_previous_time step')
  5466:                 CALL check_err(iret)
  5467:         I       CALL putUnitsAttribute(hs%ncid, hs%zeta1%nodal_data_id,
  5468:                &        'm', 'ft')
  5469:                 iret = nf90_put_att(hs%ncid, hs%zeta1%nodal_data_id,
  5470:                &         '_FillValue', doubleval)
  5471:                 CALL check_err(iret)
  5472:                 iret = nf90_put_att(hs%ncid, hs%zeta1%nodal_data_id,
  5473:                &      'positive', 'up')
  5474:                 CALL check_err(iret)
  5475:           C
  5476:           C     Z E T A 2
  5477:                 hs%zeta2%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5478:                 hs%zeta2%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5479:                 iret = nf90_def_var(hs%ncid, 'zeta2', NF90_DOUBLE,
  5480:                &       hs%zeta2%nodal_data_dims, hs%zeta2%nodal_data_id)
  5481:                 CALL check_err(iret)
  5482:                 iret = nf90_put_att(hs%ncid, hs%zeta2%nodal_data_id,
  5483:                &      'long_name', 'water surface elevation at current time step')
  5484:                 CALL check_err(iret)
  5485:                 iret = nf90_put_att(hs%ncid, hs%zeta2%nodal_data_id,
  5486:                &      'standard_name',
  5487:                &      'water_surface_elevation_at_current_time_step')
  5488:                 CALL check_err(iret)
  5489:         I       CALL putUnitsAttribute(hs%ncid, hs%zeta2%nodal_data_id,
  5490:                &        'm', 'ft')
  5491:                 iret = nf90_put_att(hs%ncid, hs%zeta2%nodal_data_id,
  5492:                &        '_FillValue', doubleval)
  5493:                 CALL check_err(iret)
  5494:                 iret = nf90_put_att(hs%ncid, hs%zeta2%nodal_data_id,
  5495:                &      'positive', 'up')
  5496:                 CALL check_err(iret)
  5497:           C
  5498:           C     Z E T A D
  5499:                 hs%zetad%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5500:                 hs%zetad%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5501:                 iret = nf90_def_var(hs%ncid, 'zetad', NF90_DOUBLE,
  5502:                &       hs%zetad%nodal_data_dims, hs%zetad%nodal_data_id)
  5503:                 CALL check_err(iret)
  5504:                 iret = nf90_put_att(hs%ncid, hs%zetad%nodal_data_id,
  5505:                &      'long_name',
  5506:                &      'water elevation at flux specified boundary')
  5507:                 CALL check_err(iret)
  5508:                 iret = nf90_put_att(hs%ncid, hs%zetad%nodal_data_id,
  5509:                &      'standard_name',
  5510:                &      'water_elevation_at_flux_specified_boundary')
  5511:                 CALL check_err(iret)
  5512:         I       CALL putUnitsAttribute(hs%ncid, hs%zetad%nodal_data_id,
  5513:                &        'm', 'ft')
  5514:                 iret = nf90_put_att(hs%ncid, hs%zetad%nodal_data_id,
  5515:                &        '_FillValue', doubleval)
  5516:                 CALL check_err(iret)
  5517:                 iret = nf90_put_att(hs%ncid, hs%zetad%nodal_data_id,'positive',
  5518:                &        'up')
  5519:                 CALL check_err(iret)
  5520:           
  5521:           C
  5522:           C     H 1 : total water depth at the previous time step
  5523:                 hs%htot1%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5524:                 hs%htot1%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5525:                 iret = nf90_def_var(hs%ncid, 'h1', NF90_DOUBLE,
  5526:                &   hs%htot1%nodal_data_dims, hs%htot1%nodal_data_id)
  5527:                 CALL check_err(iret)
  5528:           
  5529:                 iret = nf90_put_att(hs%ncid, hs%htot1%nodal_data_id,
  5530:                &   'long_name', 'total water depth at previous time step')
  5531:                 CALL check_err(iret)
  5532:                 iret = nf90_put_att(hs%ncid, hs%htot1%nodal_data_id,
  5533:                &   'standard_name',
  5534:                &      'total_water_depth_at_previous_time step')
  5535:                 CALL check_err(iret)
  5536:         I       CALL putUnitsAttribute(hs%ncid, hs%htot1%nodal_data_id,
  5537:                &        'm', 'ft')
  5538:                 iret = nf90_put_att(hs%ncid, hs%htot1%nodal_data_id,
  5539:                &         '_FillValue', doubleval)
  5540:                 CALL check_err(iret)
  5541:            
  5542:           C
  5543:           C     H 2 : total water depth at the current time step
  5544:                 hs%htot2%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5545:                 hs%htot2%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5546:                 iret = nf90_def_var(hs%ncid, 'h2', NF90_DOUBLE,
  5547:                &       hs%htot2%nodal_data_dims, hs%htot2%nodal_data_id)
  5548:                 CALL check_err(iret)
  5549:                 iret = nf90_put_att(hs%ncid, hs%htot2%nodal_data_id,
  5550:                &      'long_name', 'total water depth at current time step')
  5551:                 CALL check_err(iret)
  5552:                 iret = nf90_put_att(hs%ncid, hs%htot2%nodal_data_id,
  5553:                &      'standard_name',
  5554:                &      'total_water_depth_at_current_time_step')
  5555:                 CALL check_err(iret)
  5556:         I       CALL putUnitsAttribute(hs%ncid, hs%htot2%nodal_data_id,
  5557:                &        'm', 'ft')
  5558:                 iret = nf90_put_att(hs%ncid, hs%htot2%nodal_data_id,
  5559:                &        '_FillValue', doubleval)
  5560:                 CALL check_err(iret)
  5561:           
  5562:           
  5563:           C
  5564:           C     U V E L
  5565:                 hs%vel%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5566:                 hs%vel%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5567:                 iret = nf90_def_var(hs%ncid, 'u-vel', NF90_DOUBLE,
  5568:                &       hs%vel%nodal_data_dims,  hs%vel%u_nodal_data_id)
  5569:                 CALL check_err(iret)
  5570:                 if (ics.ne.1) then
  5571:                    iret = nf90_put_att(hs%ncid, hs%vel%u_nodal_data_id,
  5572:                &          'long_name', 'vertically averaged water velocity u-component')
  5573:                    CALL check_err(iret)
  5574:                    iret = nf90_put_att(hs%ncid, hs%vel%u_nodal_data_id,
  5575:                &          'positive', 'east')
  5576:                 else
  5577:                    iret = nf90_put_att(hs%ncid, hs%vel%u_nodal_data_id,
  5578:                &       'long_name','vertically averaged velocity in x-direction')
  5579:                    CALL check_err(iret)
  5580:                    iret = nf90_put_att(hs%ncid, hs%vel%u_nodal_data_id,
  5581:                &          'positive', 'right')
  5582:                 endif
  5583:                 CALL check_err(iret)
  5584:                 iret = nf90_put_att(hs%ncid, hs%vel%u_nodal_data_id,
  5585:                &       'standard_name', 'u_velocity')
  5586:                 CALL check_err(iret)
  5587:         I       CALL putUnitsAttribute(hs%ncid, hs%vel%u_nodal_data_id,
  5588:                &        'm s-1', 'ft s-1')
  5589:                 CALL check_err(iret)
  5590:                 iret = nf90_put_att(hs%ncid, hs%vel%u_nodal_data_id,
  5591:                &        '_FillValue', doubleval)
  5592:                 CALL check_err(iret)
  5593:                 iret = nf90_put_att(hs%ncid, hs%vel%u_nodal_data_id,
  5594:                &      'dry_Value', doubleval)
  5595:                 CALL check_err(iret)
  5596:           C
  5597:           C     V V E L
  5598:                 iret = nf90_def_var(hs%ncid, 'v-vel', NF90_DOUBLE,
  5599:                &       hs%vel%nodal_data_dims, hs%vel%v_nodal_data_id)
  5600:                 CALL check_err(iret)
  5601:                 if (ics.ne.1) then
  5602:                    iret = nf90_put_att(hs%ncid, hs%vel%v_nodal_data_id,
  5603:                &           'long_name', 'vertically averaged water velocity v-component')
  5604:                    CALL check_err(iret)
  5605:                    iret = nf90_put_att(hs%ncid, hs%vel%v_nodal_data_id,
  5606:                &           'positive', 'north')
  5607:                 else
  5608:                    iret = nf90_put_att(hs%ncid, hs%vel%v_nodal_data_id,
  5609:                &       'long_name','vertically averaged water velocity in y-direction')
  5610:                    CALL check_err(iret)
  5611:                    iret = nf90_put_att(hs%ncid, hs%vel%v_nodal_data_id,
  5612:                &  'positive', '90 degrees counterclockwise from x water velocity')
  5613:                 endif
  5614:                 CALL check_err(iret)
  5615:                 iret = nf90_put_att(hs%ncid, hs%vel%v_nodal_data_id,
  5616:                &            'standard_name','v_velocity')
  5617:                 CALL check_err(iret)
  5618:         I       CALL putUnitsAttribute(hs%ncid, hs%vel%v_nodal_data_id,
  5619:                &        'm s-1', 'ft s-1')
  5620:                 CALL check_err(iret)
  5621:                 iret = nf90_put_att(hs%ncid, hs%vel%v_nodal_data_id,
  5622:                &            '_FillValue', doubleval)
  5623:                 CALL check_err(iret)
  5624:                 iret = nf90_put_att(hs%ncid, hs%vel%v_nodal_data_id,
  5625:                &            'dry_Value', doubleval)
  5626:                 CALL check_err(iret)
  5627:           C
  5628:           C     C H 1
  5629:                 IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  5630:                    hs%ch1%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5631:                    hs%ch1%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5632:                    iret = nf90_def_var(hs%ncid, 'ch1', NF90_DOUBLE,
  5633:                &       hs%ch1%nodal_data_dims, hs%ch1%nodal_data_id)
  5634:                    CALL check_err(iret)
  5635:                    iret = nf90_put_att(hs%ncid, hs%ch1%nodal_data_id,
  5636:                &      'long_name', 'concentration')
  5637:                    CALL check_err(iret)
  5638:                    iret = nf90_put_att(hs%ncid, hs%ch1%nodal_data_id,
  5639:                &      'standard_name', 'concentration')
  5640:                    CALL check_err(iret)
  5641:                    iret = nf90_put_att(hs%ncid, hs%ch1%nodal_data_id,
  5642:                &        '_FillValue', doubleval)
  5643:                    CALL check_err(iret)
  5644:                 ENDIF
  5645:           C
  5646:           C     N O D E C O D E
  5647:                 hs%nodecodenc%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  5648:                 hs%nodecodenc%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5649:                 iret = nf90_def_var(hs%ncid, 'nodecode', NF90_INT,
  5650:                &    hs%nodecodenc%nodal_data_dims, hs%nodecodenc%nodal_data_id)
  5651:                 CALL check_err(iret)
  5652: +======>        att_text = "wet or dry state of node where 1 indicates that the"
  5653:                &  //" node is wet and 0 indicates that the node is dry"
  5654:                 iret = nf90_put_att(hs%ncid, hs%nodecodenc%nodal_data_id,
  5655:                &      'long_name', trim(att_text))
  5656:                 CALL check_err(iret)
  5657: +======>        att_text = "node_wet_or_dry"
  5658:                 iret = nf90_put_att(hs%ncid, hs%nodecodenc%nodal_data_id,
  5659:                &      'standard_name', trim(att_text))
  5660:                 CALL check_err(iret)
  5661:           C
  5662:           C     N O F F
  5663:                 hs%noffnc%nodal_data_dims(1) = hs%myMesh%num_elems_dim_id
  5664:                 hs%noffnc%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  5665:                 iret = nf90_def_var(hs%ncid, 'noff', NF90_INT,
  5666:                &    hs%noffnc%nodal_data_dims, hs%noffnc%nodal_data_id)
  5667:                 CALL check_err(iret)
  5668: +======>        att_text = "wet or dry state of element where 1 indicates that"
  5669:                & //" the element is wet and 0 indicates that it is dry"
  5670:                 iret = nf90_put_att(hs%ncid, hs%noffnc%nodal_data_id,
  5671:                &      'long_name', trim(att_text))
  5672:                 CALL check_err(iret)
  5673: +======>        att_text = "element_wet_or_dry"
  5674:                 iret = nf90_put_att(hs%ncid, hs%noffnc%nodal_data_id,
  5675:                &      'standard_name', trim(att_text))
  5676:                 CALL check_err(iret)
  5677:           C
  5678:           C     jgf50.44: Automatically turn on compression if we are using the
  5679:           C     netcdf4 file format.
  5680:           #ifdef NETCDF_CAN_DEFLATE
  5681:                 IF ( (Elev1Descript%specifier.eq.5).or.
  5682:                &     (Elev1Descript%specifier.eq.567).or.
  5683:                &     (Elev1Descript%specifier.eq.568) ) THEN
  5684:                    iret = nf90_def_var_deflate(hs%ncid, hs%zeta1%nodal_data_id,
  5685:                &             1, 1, 2)
  5686:                    CALL check_err(iret)
  5687:                    iret = nf90_def_var_deflate(hs%ncid, hs%zeta2%nodal_data_id,
  5688:                &             1, 1, 2)
  5689:                    CALL check_err(iret)
  5690:                    iret = nf90_def_var_deflate(hs%ncid, hs%zetad%nodal_data_id,
  5691:                &             1, 1, 2)
  5692:                    CALL check_err(iret)
  5693:                    iret = nf90_def_var_deflate(hs%ncid, hs%vel%u_nodal_data_id,
  5694:                &             1, 1, 2)
  5695:                    CALL check_err(iret)
  5696:                    iret = nf90_def_var_deflate(hs%ncid, hs%vel%v_nodal_data_id,
  5697:                &             1, 1, 2)
  5698:                    CALL check_err(iret)
  5699:                    IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  5700:                       iret = nf90_def_var_deflate(hs%ncid, hs%ch1%nodal_data_id,
  5701:                &             1, 1, 2)
  5702:                       CALL check_err(iret)
  5703:                    ENDIF
  5704:                    iret = nf90_def_var_deflate(hs%ncid, hs%nodecodenc%nodal_data_id,
  5705:                &             1, 1, 2)
  5706:                    CALL check_err(iret)
  5707:                    iret = nf90_def_var_deflate(hs%ncid, hs%noffnc%nodal_data_id,
  5708:                &             1, 1, 2)
  5709:                    CALL check_err(iret)
  5710:                 ENDIF
  5711:           #endif
  5712:           !
  5713:           !     Define hotstart parameters
  5714:                 CALL check_err(iret)
  5715:                 iret = nf90_def_var(hs%ncid, 'imhs', NF90_INT, varid=tempid)
  5716:                 CALL check_err(iret)
  5717: +======>        att_text = 'model_type'
  5718:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name', 'model_type')
  5719:                 CALL check_err(iret)
  5720:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5721:                &       'model_type')
  5722:                  CALL check_err(iret)
  5723:           C
  5724:                 iret = nf90_def_var(hs%ncid, 'iths', NF90_INT, varid=tempid)
  5725:                 CALL check_err(iret)
  5726: +======>        att_text =
  5727:                &     'model time step number since the beginning of the model run'
  5728:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',trim(att_text))
  5729:                 CALL check_err(iret)
  5730: +======>        att_text = 'model_time_step'
  5731:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5732:                &       trim(att_text))
  5733:                 CALL check_err(iret)
  5734:           C
  5735:                 iret = nf90_def_var(hs%ncid, 'iestp', NF90_INT, varid=tempid)
  5736:                 CALL check_err(iret)
  5737: +======>        att_text = 'line number (for ASCII output) or record number'
  5738:                &  //' (for binary output) of the most recent entry in the'
  5739:                &  //' elevation time series at specified elevation recording'
  5740:                &  //' stations output file'
  5741:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',trim(att_text))
  5742:                 CALL check_err(iret)
  5743: +======>        att_text = 'line/record_number_of_last_entry_in_elev_rec_stations'
  5744:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5745:                &       trim(att_text))
  5746:                 CALL check_err(iret)
  5747:           c
  5748:                 iret = nf90_def_var(hs%ncid, 'nscoue', NF90_INT, varid=tempid)
  5749:                 CALL check_err(iret)
  5750: +======>        att_text = 'time step counter to determine when the'
  5751:                & //' next entry will be written to the elevation time series at'
  5752:                & //' specified elevation recording Stations output file'
  5753:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name', trim(att_text))
  5754:           
  5755:                 CALL check_err(iret)
  5756: +======>        att_text = 'time_step_counter_for_next_entry_elev_rec_stations'
  5757:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5758:                &       trim(att_text))
  5759:                 CALL check_err(iret)
  5760:           C
  5761:                 iret = nf90_def_var(hs%ncid, 'ivstp', NF90_INT, varid=tempid)
  5762:                 CALL check_err(iret)
  5763:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5764:                &                   ' line number (for ASCII output) or record'
  5765:                & //' number (for binary output) of the most recent entry in the'
  5766:                & //' depth-averaged velocity time series at specified velocity'
  5767:                & //' recording stations output file')
  5768:                 CALL check_err(iret)
  5769:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5770:                &               'record_number_of_last_entry_in_vel_rec_stations')
  5771:                 CALL check_err(iret)
  5772:           C
  5773:                 iret = nf90_def_var(hs%ncid, 'nscouv', NF90_INT, varid=tempid)
  5774:                 CALL check_err(iret)
  5775:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5776:                &                   'time step counter to determine when the'
  5777:                & //' next entry will be written to the depth-averaged velocity'
  5778:                & //' time series at specified velocity recording stations output'
  5779:                & //' file.')
  5780:                 CALL check_err(iret)
  5781:           
  5782:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5783:                &           'time_step_counter_for_next_entry_vel_rec_stations')
  5784:                 CALL check_err(iret)
  5785:           C
  5786:                 IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  5787:                    iret = nf90_def_var(hs%ncid, 'icstp', NF90_INT, varid=tempid)
  5788:                    CALL check_err(iret)
  5789:                    iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5790:                &                       'line number (for ASCII output) or record'
  5791:                & //' number (for binary output) of the most recent entry in the'
  5792:                & //' scalar concentration time series at specified concentration'
  5793:                & //' recording stations output file')
  5794:                    CALL check_err(iret)
  5795:                    iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5796:                &               'record_number_of_last_entry_in_conc_rec_stations')
  5797:                    CALL check_err(iret)
  5798:           C
  5799:                    iret = nf90_def_var(hs%ncid, 'nscouc', NF90_INT, varid=tempid)
  5800:                    CALL check_err(iret)
  5801:                    iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5802:                &                'time step counter to determine when the next '
  5803:                & //'entry will be written to the scalar concentration time series'
  5804:                & //' at specified concentration recording stations output file')
  5805:                    CALL check_err(iret)
  5806:                    iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5807:                &           'time_step_counter_for_next_entry_conc_rec_stations')
  5808:                    CALL check_err(iret)
  5809:                 ENDIF
  5810:           C
  5811:                 iret = nf90_def_var(hs%ncid, 'ipstp', NF90_INT, varid=tempid)
  5812:                 CALL check_err(iret)
  5813:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5814:                &                       'line number (for ASCII output) or record'
  5815:                & //' number (for binary output) of the most recent entry in the'
  5816:                & //' atmospheric pressure time series at specified meteorological'
  5817:                & //' recording stations')
  5818:                 CALL check_err(iret)
  5819:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5820:                &       'record_number_of_last_entry_of_atm_press_at_rec_stations')
  5821:                 CALL check_err(iret)
  5822:           C
  5823:                 iret = nf90_def_var(hs%ncid, 'iwstp', NF90_INT, varid=tempid)
  5824:                 CALL check_err(iret)
  5825:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5826:                &                      'line number (for ASCII output) or record'
  5827:                & //' number (for binary output) of the most recent entry in the'
  5828:                & //' wind velocity time series at specified meteorological'
  5829:                & //' recording stations')
  5830:                 CALL check_err(iret)
  5831:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5832:                &       'record_number_of_last_entry_of_wind_vel_at_rec_stations')
  5833:                 CALL check_err(iret)
  5834:           C
  5835:                 iret = nf90_def_var(hs%ncid, 'nscoum', NF90_INT, varid=tempid)
  5836:                 CALL check_err(iret)
  5837:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5838:                &                       'time step counter to determine when the'
  5839:                & //' next entry will be written to the atmospheric pressure time'
  5840:                & //' series at specified meteorological recording stations and'
  5841:                & //' wind velocity time series at specified meteorological'
  5842:                & //' recording stations output files')
  5843:                 CALL check_err(iret)
  5844:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5845:                &   'time_step_counter_of_atm_press_and_wind_vel_at_rec_stations')
  5846:                 CALL check_err(iret)
  5847:           C
  5848:                 iret = nf90_def_var(hs%ncid, 'igep', NF90_INT, varid=tempid)
  5849:                 CALL check_err(iret)
  5850:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5851:                &                       'line number (for ASCII output) or record'
  5852:                & //' number (for binary output) of the most recent entry in the'
  5853:                & //' elevation time series at all nodes in the model grid output'
  5854:                & //' file')
  5855:                 CALL check_err(iret)
  5856:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5857:                &       'record_number_of_last_entry_of_elev_at_model_nodes')
  5858:                 CALL check_err(iret)
  5859:           C
  5860:                 iret = nf90_def_var(hs%ncid, 'nscouge', NF90_INT, varid=tempid)
  5861:                 CALL check_err(iret)
  5862:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5863:                &                      'time step counter to determine when the'
  5864:                & //' next entry will be written to the elevation time series at'
  5865:                & //' all nodes in the model grid output file')
  5866:                 CALL check_err(iret)
  5867:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5868:                &   'time_step_counter_of_elev_at_model_nodes')
  5869:                 CALL check_err(iret)
  5870:           C
  5871:                 iret = nf90_def_var(hs%ncid, 'igvp', NF90_INT, varid=tempid)
  5872:                 CALL check_err(iret)
  5873:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5874:                &                       'line number (for ASCII output) or record'
  5875:                & //' number (for binary output) of the most recent entry in the'
  5876:                & //' depth-averaged velocity time series at all nodes in the'
  5877:                & //' model grid output file')
  5878:                 CALL check_err(iret)
  5879:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5880:                &       'record_number_of_last_entry_of_vel_at_model_nodes')
  5881:                 CALL check_err(iret)
  5882:           C
  5883:                 iret = nf90_def_var(hs%ncid, 'nscougv', NF90_INT, varid=tempid)
  5884:                 CALL check_err(iret)
  5885:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5886:                &                      'time step counter to determine when the'
  5887:                & //' next entry will be written to the depth-averaged velocity'
  5888:                & //' time series at all nodes in the model grid output file')
  5889:                 CALL check_err(iret)
  5890:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5891:                &   'time_step_counter_of_vel_at_model_nodes')
  5892:                 CALL check_err(iret)
  5893:           C
  5894:                 IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  5895:                    iret = nf90_def_var(hs%ncid, 'igcp', NF90_INT, varid=tempid)
  5896:                    CALL check_err(iret)
  5897:                    iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5898:                &                     'line number (for ASCII output) or record'
  5899:                & //' number (for binary output) of the most recent entry in the'
  5900:                & //' scalar concentration time series at all nodes in the model'
  5901:                & //' grid output file')
  5902:                    CALL check_err(iret)
  5903:                    iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5904:                &       'record_number_of_last_entry_of_conc_at_model_nodes')
  5905:                    CALL check_err(iret)
  5906:           C
  5907:                    iret = nf90_def_var(hs%ncid, 'nscougc', NF90_INT, varid=tempid)
  5908:                    CALL check_err(iret)
  5909:                    iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5910:                &                     'time step counter to determine when the'
  5911:                & //' next entry will be written to the scalar concentration time'
  5912:                & //' series at All Nodes in the model grid output file')
  5913:                    CALL check_err(iret)
  5914:                    iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5915:                &   'time_step_counter_of_conc_at_model_nodes')
  5916:                    CALL check_err(iret)
  5917:                 ENDIF
  5918:           C
  5919:                 iret = nf90_def_var(hs%ncid, 'igpp', NF90_INT, varid=tempid)
  5920:                 CALL check_err(iret)
  5921:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5922:                &                       'line number (for ASCII output) or record'
  5923:                & //' number (for binary output) of the most recent entry in the'
  5924:                & //' atmospheric pressure time series at all nodes in the model'
  5925:                & //' grid output file')
  5926:                 CALL check_err(iret)
  5927:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5928:                &       'record_number_of_last_entry_of_atm_press_at_model_nodes')
  5929:                 CALL check_err(iret)
  5930:           C
  5931:                 iret = nf90_def_var(hs%ncid, 'igwp', NF90_INT, varid=tempid)
  5932:                 CALL check_err(iret)
  5933:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5934:                &                      'line number (for ASCII output) or record'
  5935:                & //' number (for binary output) of the most recent entry in the'
  5936:                & //' wind Stress or velocity time series at all nodes in the'
  5937:                & //' model grid output file')
  5938:                 CALL check_err(iret)
  5939:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5940:                &       'record_number_of_last_entry_of_wind_vel_at_model_nodes')
  5941:                 CALL check_err(iret)
  5942:           C
  5943:                 iret = nf90_def_var(hs%ncid, 'nscougw', NF90_INT, varid=tempid)
  5944:                 CALL check_err(iret)
  5945:                 iret = nf90_put_att(hs%ncid, tempid, 'long_name',
  5946:                &                       'time step counter to determine when the'
  5947:                & //' next entry will be written to the atmospheric pressure time'
  5948:                & //' series at all nodes in the model grid and wind stress or'
  5949:                & //' velocity time series at all nodes in the model grid output'
  5950:                & //' files')
  5951:                 CALL check_err(iret)
  5952:                 iret = nf90_put_att(hs%ncid, tempid, 'standard_name',
  5953:                &   'time_step_counter_of_atm_press_and_wind_vel_at_model_nodes')
  5954:                 CALL check_err(iret)
  5955:           C
  5956:           C     define time attributes
  5957:         I       CALL defineTimeAttributes(hs%ncid, hs%myTime)
  5958:           C
  5959:           C     define metadata and selected fort.15 parameters in netcdf file
  5960:                 CALL defineMetaData(hs%ncid)
  5961:           C
  5962:           C     Leave define mode
  5963:                 iret = nf90_enddef(hs%ncid)
  5964:                 CALL check_err(iret)
  5965:           C
  5966:           C     write mesh to netcdf file
  5967:         I       CALL putMeshVariables(hs%ncid,hs%myMesh)
  5968:           C
  5969:           C     now close the initialized netcdf file
  5970:                 iret = nf90_close(hs%ncid)
  5971:                 CALL check_err(iret)
  5972:           C
  5973:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  5974:                 call allMessage(DEBUG,"Return.")
  5975:           #endif
  5976:                 call unsetMessageSource()
  5977:           C-----------------------------------------------------------------------
  5978:                 END SUBROUTINE initNetCDFHotstart


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:52 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART
INLINE LIST

  ROOT: NETCDFIO::INITNETCDFHOTSTART (netcdfio.F:5386)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:5409)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::CREATENETCDFOUTPUTFILE (netcdfio.F:5434)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:3957)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4001)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4021)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4025)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::SCREENMESSAGE (netcdfio.F:4026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4041)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:4074)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_CREATE (netcdfio.F:4079)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4080)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:4082)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4084)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:4086)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:4088)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:4094)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:5442)
     *** Source for routine not found.
  -> NOINLINE: NETCDFIO::INITNETCDFCOORD (netcdfio.F:5449)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDFIO::DEFINEMESHVARIABLES (netcdfio.F:5451)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5456)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5458)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5460)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5462)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5463)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5466)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:5467)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5469)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5471)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5472)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5474)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5479)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5481)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5482)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5484)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5485)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5488)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:5489)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5491)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5493)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5494)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5496)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5501)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5503)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5504)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5507)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5508)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5511)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:5512)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5514)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5516)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5517)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5519)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5525)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5527)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5529)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5531)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5532)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5535)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:5536)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5538)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5540)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5546)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5548)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5549)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5551)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5552)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5555)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:5556)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5558)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5560)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5567)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5569)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5571)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5573)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5574)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5577)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5579)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5580)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5583)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5584)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5586)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:5587)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5589)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5590)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5592)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5593)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5595)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5598)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5600)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5602)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5604)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5605)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5608)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5610)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5611)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5614)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5615)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5617)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:5618)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5620)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5621)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5623)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5624)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5626)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5632)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5634)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5635)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5637)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5638)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5640)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:5641)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5643)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5649)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5651)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5654)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5656)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5658)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5660)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:5665)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5667)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5670)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5672)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5674)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5676)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5714)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5715)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5716)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5718)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5719)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5720)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5722)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5724)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5725)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5728)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5729)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5731)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5733)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5736)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5741)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5742)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5744)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5746)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5748)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5749)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5753)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5755)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5757)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5759)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5761)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5762)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5763)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5768)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5769)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5771)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5773)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5774)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5775)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5780)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5782)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5784)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5787)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5788)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5789)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5794)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5795)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5797)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5799)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5800)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5801)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5805)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5806)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5808)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5811)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5812)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5813)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5818)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5819)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5821)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5823)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5824)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5825)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5830)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5831)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5833)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5835)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5836)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5837)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5843)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5844)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5846)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5848)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5849)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5850)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5855)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5856)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5858)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5860)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5861)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5862)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5866)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5867)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5869)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5871)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5872)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5873)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5878)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5879)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5881)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5883)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5884)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5885)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5889)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5890)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5892)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5895)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5896)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5897)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5902)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5903)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5905)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5907)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5908)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5909)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5913)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5914)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5916)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5919)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5920)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5921)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5926)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5927)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5929)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5931)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5932)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5933)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5938)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5939)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5941)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:5943)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5944)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5945)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5951)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:5952)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5954)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINETIMEATTRIBUTES (netcdfio.F:5957)
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10431)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10433)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10434)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10436)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10438)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10440)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10441)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10443)
      *** Source for routine not found.
  -> NOINLINE: NETCDFIO::DEFINEMETADATA (netcdfio.F:5960)
     *** Expansion routine is too big for automatic expansion.
  -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:5963)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5964)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTMESHVARIABLES (netcdfio.F:5967)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10341)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10347)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10348)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10349)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10350)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10352)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10353)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10357)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10358)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_FOURBYTEINT (netcdfio.F:10364)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10366)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10370)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10371)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10372)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10374)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10375)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10376)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10380)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10381)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10382)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10383)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10384)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10385)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10387)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10388)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10389)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10390)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10392)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10393)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10394)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10395)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10397)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10398)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10399)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10400)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10401)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10402)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10411)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:5970)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:5971)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:5976)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:52 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3974)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3970)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    <Unvectorized loop.>
    *** Unvectorizable data type. : FILENAME (netcdfio.F:3968)
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:3997)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5652)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5652)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5652)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5652)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5654)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5654)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5657)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5657)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5657)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5657)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5658)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5658)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5668)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5668)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5668)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5668)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5670)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5670)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5673)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5673)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5673)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5673)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5674)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5674)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5717)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5717)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5717)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5717)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5726)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5726)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5726)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5726)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5728)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5728)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5730)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5730)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5730)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5730)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5731)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5731)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5737)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5737)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5737)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5737)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5741)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5741)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5743)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5743)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5743)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5743)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5744)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5744)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5750)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5750)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5750)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5750)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5753)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5753)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5756)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:5756)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5756)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:5756)
  LOOP END

  LOOP BEGIN: (netcdfio.F:5757)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:5757)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. : DATE_STRING (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10438)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:52 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 48 [s0-s12 s15-s16 s18-s42 s56-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 5872 bytes
      Register spill area      :  416 bytes
      Parameter area           :  120 bytes
      Register save area       :  176 bytes
      User data area           : 5152 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3974)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3970)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:3968)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:3997)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5652)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5652)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5654)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5657)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5657)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5658)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5668)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5668)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5670)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5673)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5673)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5674)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5717)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5717)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5726)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5726)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5728)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5730)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5730)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5731)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5737)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5737)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5741)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5743)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5743)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5744)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5750)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5750)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5753)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5756)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:5756)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:5757)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 5
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONIC
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  6009: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  6023: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  6024: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  6027: inl(1212): Source for routine not found.: NETCDF::NF90_REDEF
  6031: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  6034: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_DIM
  6049: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
  6058: vec( 103): Unvectorized loop.
  6058: vec( 118): Unvectorizable data type.: ATT_TEXT
  6059: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
  6059: vec( 103): Unvectorized loop.
  6059: vec( 108): Unvectorizable loop structure.
  6062: vec( 103): Unvectorized loop.
  6062: vec( 118): Unvectorizable data type.: ATT_TEXT
  6063: vec( 103): Unvectorized loop.
  6063: vec( 108): Unvectorizable loop structure.
  6069: vec( 103): Unvectorized loop.
  6069: vec( 118): Unvectorizable data type.: ATT_TEXT
  6070: vec( 103): Unvectorized loop.
  6070: vec( 108): Unvectorizable loop structure.
  6073: vec( 103): Unvectorized loop.
  6073: vec( 118): Unvectorizable data type.: ATT_TEXT
  6074: vec( 103): Unvectorized loop.
  6074: vec( 108): Unvectorizable loop structure.
  6080: vec( 103): Unvectorized loop.
  6080: vec( 118): Unvectorizable data type.: ATT_TEXT
  6083: vec( 103): Unvectorized loop.
  6083: vec( 108): Unvectorizable loop structure.
  6086: vec( 103): Unvectorized loop.
  6086: vec( 118): Unvectorizable data type.: ATT_TEXT
  6087: vec( 103): Unvectorized loop.
  6087: vec( 108): Unvectorizable loop structure.
  6094: vec( 103): Unvectorized loop.
  6094: vec( 118): Unvectorizable data type.: ATT_TEXT
  6095: vec( 103): Unvectorized loop.
  6095: vec( 108): Unvectorizable loop structure.
  6097: vec( 103): Unvectorized loop.
  6097: vec( 118): Unvectorizable data type.: ATT_TEXT
  6098: vec( 103): Unvectorized loop.
  6098: vec( 108): Unvectorizable loop structure.
  6109: vec( 103): Unvectorized loop.
  6109: vec( 118): Unvectorizable data type.: ATT_TEXT
  6110: vec( 103): Unvectorized loop.
  6110: vec( 108): Unvectorizable loop structure.
  6113: vec( 103): Unvectorized loop.
  6113: vec( 118): Unvectorizable data type.: ATT_TEXT
  6114: vec( 103): Unvectorized loop.
  6114: vec( 108): Unvectorizable loop structure.
  6117: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
  6133: vec( 103): Unvectorized loop.
  6133: vec( 118): Unvectorizable data type.: ATT_TEXT
  6134: vec( 103): Unvectorized loop.
  6134: vec( 108): Unvectorizable loop structure.
  6137: vec( 103): Unvectorized loop.
  6137: vec( 118): Unvectorizable data type.: ATT_TEXT
  6138: vec( 103): Unvectorized loop.
  6138: vec( 108): Unvectorizable loop structure.
  6151: vec( 103): Unvectorized loop.
  6151: vec( 118): Unvectorizable data type.: ATT_TEXT
  6152: vec( 103): Unvectorized loop.
  6152: vec( 108): Unvectorizable loop structure.
  6155: vec( 103): Unvectorized loop.
  6155: vec( 118): Unvectorizable data type.: ATT_TEXT
  6156: vec( 103): Unvectorized loop.
  6156: vec( 108): Unvectorizable loop structure.
  6179: vec( 103): Unvectorized loop.
  6179: vec( 118): Unvectorizable data type.: ATT_TEXT
  6180: vec( 103): Unvectorized loop.
  6180: vec( 108): Unvectorizable loop structure.
  6183: vec( 103): Unvectorized loop.
  6183: vec( 118): Unvectorizable data type.: ATT_TEXT
  6184: vec( 103): Unvectorized loop.
  6184: vec( 108): Unvectorizable loop structure.
  6209: vec( 103): Unvectorized loop.
  6209: vec( 118): Unvectorizable data type.: ATT_TEXT
  6210: vec( 103): Unvectorized loop.
  6210: vec( 108): Unvectorizable loop structure.
  6213: vec( 103): Unvectorized loop.
  6213: vec( 118): Unvectorizable data type.: ATT_TEXT
  6214: vec( 103): Unvectorized loop.
  6214: vec( 108): Unvectorizable loop structure.
  6229: vec( 103): Unvectorized loop.
  6229: vec( 118): Unvectorizable data type.: ATT_TEXT
  6230: vec( 103): Unvectorized loop.
  6230: vec( 108): Unvectorizable loop structure.
  6233: vec( 103): Unvectorized loop.
  6233: vec( 118): Unvectorizable data type.: ATT_TEXT
  6234: vec( 103): Unvectorized loop.
  6234: vec( 108): Unvectorizable loop structure.
  6284: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  7010: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_SCALAR
  6288: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6292: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6296: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6300: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6304: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6308: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6313: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6318: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6323: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6328: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6333: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6338: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6343: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  6350: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
  6354: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONIC
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  5987:                 SUBROUTINE initNetCDFHotstartHarmonic(lun, GLOELVDescript,
  5988:                &   STAELVDescript, GLOULVDescript, GLOVLVDescript, STAULVDescript,
  5989:                &   STAVLVDescript, err)
  5990:                 USE SIZES, ONLY : MNHARF
  5991:                 USE HARM, ONLY : NHASE, NHASV, NHAGE, NHAGV
  5992:                 USE GLOBAL, ONLY : OutputDataDescript_t
  5993:                 IMPLICIT NONE
  5994:           C
  5995:                 INTEGER, intent(in) :: lun
  5996:                 type(OutputDataDescript_t), intent(in) :: GLOELVDescript
  5997:                 type(OutputDataDescript_t), intent(in) :: STAELVDescript
  5998:                 type(OutputDataDescript_t), intent(in) :: GLOULVDescript
  5999:                 type(OutputDataDescript_t), intent(in) :: GLOVLVDescript
  6000:                 type(OutputDataDescript_t), intent(in) :: STAULVDescript
  6001:                 type(OutputDataDescript_t), intent(in) :: STAVLVDescript
  6002:           C
  6003:                 LOGICAL err
  6004:           C
  6005:                 INTEGER iret ! success or failure of the netcdf call
  6006:                 CHARACTER(1024) :: att_text
  6007:                 INTEGER :: varid
  6008:           C
  6009:                 call setMessageSource("initNetCDFHotstartHarmonic")
  6010:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  6011:                 call allMessage(DEBUG,"Enter.")
  6012:           #endif
  6013:                 err = .false.
  6014:           C
  6015:           C     Point to the hotstart file we want to work on.
  6016:                 IF (lun.eq.67) THEN
  6017:                    hs => hs67
  6018:                 ELSE
  6019:                    hs => hs68
  6020:                 ENDIF
  6021:           C
  6022:           C     Open existing NetCDF file
  6023:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  6024:                 CALL check_err(iret)
  6025:           C
  6026:           C     Enter "redefine" mode
  6027:                 iret = NF90_REDEF(hs%ncid)
  6028:                 CALL check_err(iret)
  6029:           !
  6030:           !     Inquire variables
  6031:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  6032:           C
  6033:           C     Define dimensions
  6034:                 iret = nf90_def_dim(hs%ncid,'mnharf',MNHARF,
  6035:                &       hs%mnharf_dim_id)
  6036:                 CALL check_err(iret)
  6037:                 iret = nf90_def_dim(hs%ncid,'mnharfx2',(MNHARF*2),
  6038:                &       hs%load_vector_dim_id)
  6039:                 CALL check_err(iret)
  6040:           C
  6041:           C     Create station dimension and station name dimension
  6042:                 iret = nf90_def_dim(hs%ncid, 'namefrlen', hs%namefr_len,
  6043:                &   hs%namefr_len_dim_id)
  6044:                 CALL check_err(iret)
  6045:           !
  6046:           !     Define harmonic analysis frequency names array
  6047:                 hs%namefr_dims(1) = hs%namefr_len_dim_id
  6048:                 hs%namefr_dims(2) = hs%mnharf_dim_id
  6049:                 iret = nf90_def_var(hs%ncid, 'namefr', NF90_CHAR,
  6050:                &   hs%namefr_dims, hs%namefr_id)
  6051:                 CALL check_err(iret)
  6052:           C
  6053:           C     harmonic analysis components
  6054:                 hs%component_dims(1) = hs%mnharf_dim_id
  6055:                 iret = nf90_def_var(hs%ncid, 'hafreq', NF90_DOUBLE,
  6056:                &       hs%component_dims, hs%hafreq_id)
  6057:                 CALL check_err(iret)
  6058: +======>        att_text = "frequencies (rad/s) of harmonic analysis constituents"
  6059:                 iret = nf90_put_att(hs%ncid, hs%hafreq_id,
  6060:                &   'long_name', trim(att_text))
  6061:                 CALL check_err(iret)
  6062: +======>        att_text = "harmonic analysis frequencies (rad/s)"
  6063:                 iret = nf90_put_att(hs%ncid, hs%hafreq_id,
  6064:                &   'standard_name', trim(att_text))
  6065:           C
  6066:                 iret = nf90_def_var(hs%ncid, 'haff', NF90_DOUBLE,
  6067:                &       hs%component_dims, hs%haff_id)
  6068:                 CALL check_err(iret)
  6069: +======>        att_text = "nodal factors of harmonic analysis constituents"
  6070:                 iret = nf90_put_att(hs%ncid, hs%haff_id,
  6071:                &   'long_name', trim(att_text))
  6072:                 CALL check_err(iret)
  6073: +======>        att_text = "harmonic analysis nodal factors"
  6074:                 iret = nf90_put_att(hs%ncid, hs%haff_id,
  6075:                &   'standard_name', trim(att_text))
  6076:           C
  6077:                 iret = nf90_def_var(hs%ncid, 'haface', NF90_DOUBLE,
  6078:                &        hs%component_dims, hs%haface_id)
  6079:                 CALL check_err(iret)
  6080: +======>        att_text =
  6081:                &  "equilibrium arguments (degrees) of harmonic analysis "
  6082:                & //"constituents"
  6083:                 iret = nf90_put_att(hs%ncid, hs%haface_id,
  6084:                &   'long_name',trim(att_text))
  6085:                 CALL check_err(iret)
  6086: +======>        att_text = "equilibrium arguments (degrees)"
  6087:                 iret = nf90_put_att(hs%ncid, hs%haface_id,
  6088:                &   'standard_name', trim(att_text))
  6089:           C
  6090:                 hs%ha_dims(1) = hs%load_vector_dim_id
  6091:                 hs%ha_dims(2) = hs%load_vector_dim_id
  6092:                 iret = nf90_def_var(hs%ncid, 'ha',NF90_DOUBLE,hs%ha_dims,hs%ha_id)
  6093:                 CALL check_err(iret)
  6094: +======>        att_text = "left hand side matrix for harmonic analysis"
  6095:                 iret = nf90_put_att(hs%ncid, hs%ha_id,'long_name', trim(att_text))
  6096:                 CALL check_err(iret)
  6097: +======>        att_text = "LHS for harmonic analysis"
  6098:                 iret = nf90_put_att(hs%ncid, hs%ha_id,
  6099:                &   'standard_name', trim(att_text))
  6100:           C
  6101:           C     global elevation load vector
  6102:                 IF (NHAGE.ne.0) THEN
  6103:                    hs%gloelv%nodal_data_dims_3D(1) = hs%load_vector_dim_id
  6104:                    hs%gloelv%nodal_data_dims_3D(2) = hs%myMesh%num_nodes_dim_id
  6105:                    hs%gloelv%nodal_data_dims_3D(3) = hs%myTime%timenc_dim_id
  6106:                    iret = nf90_def_var(hs%ncid, 'gloelv', NF90_DOUBLE,
  6107:                &       hs%gloelv%nodal_data_dims_3D, hs%gloelv%nodal_data_id)
  6108:                    CALL check_err(iret)
  6109: +======>           att_text = "full domain elevation load vector at each node"
  6110:                    iret = nf90_put_att(hs%ncid, hs%gloelv%nodal_data_id,
  6111:                &      'long_name', trim(att_text))
  6112:                    CALL check_err(iret)
  6113: +======>           att_text = "full domain elevation load vector"
  6114:                    iret = nf90_put_att(hs%ncid, hs%gloelv%nodal_data_id,
  6115:                &      'standard_name', trim(att_text))
  6116:                    CALL check_err(iret)
  6117:                    iret = nf90_put_att(hs%ncid, hs%gloelv%nodal_data_id,
  6118:                &         '_FillValue', doubleval)
  6119:                    CALL check_err(iret)
  6120:                    iret = nf90_put_att(hs%ncid, hs%gloelv%nodal_data_id,
  6121:                &        'positive', 'up')
  6122:                    CALL check_err(iret)
  6123:                 ENDIF
  6124:           C
  6125:           C     global velocity load vectors
  6126:                 IF (NHAGV.ne.0) THEN
  6127:                    hs%glovellv%nodal_data_dims_3D(1) = hs%load_vector_dim_id
  6128:                    hs%glovellv%nodal_data_dims_3D(2) = hs%myMesh%num_nodes_dim_id
  6129:                    hs%glovellv%nodal_data_dims_3D(3) = hs%myTime%timenc_dim_id
  6130:                    iret = nf90_def_var(hs%ncid, 'gloulv', NF90_DOUBLE,
  6131:                &       hs%glovellv%nodal_data_dims_3D, hs%glovellv%u_nodal_data_id)
  6132:                    CALL check_err(iret)
  6133: +======>           att_text = "full domain u velocity load vector at each node"
  6134:                    iret = nf90_put_att(hs%ncid, hs%glovellv%u_nodal_data_id,
  6135:                &      'long_name', trim(att_text))
  6136:                    CALL check_err(iret)
  6137: +======>           att_text = "full domain u velocity load vector"
  6138:                    iret = nf90_put_att(hs%ncid, hs%glovellv%u_nodal_data_id,
  6139:                &      'standard_name', trim(att_text))
  6140:                    CALL check_err(iret)
  6141:                    iret = nf90_put_att(hs%ncid, hs%glovellv%u_nodal_data_id,
  6142:                &         '_FillValue', doubleval)
  6143:                    CALL check_err(iret)
  6144:                    iret = nf90_put_att(hs%ncid, hs%glovellv%u_nodal_data_id,
  6145:                &          'positive', 'east')
  6146:                    CALL check_err(iret)
  6147:           C
  6148:                    iret = nf90_def_var(hs%ncid, 'glovlv', NF90_DOUBLE,
  6149:                &       hs%glovellv%nodal_data_dims_3D,hs%glovellv%v_nodal_data_id)
  6150:                    CALL check_err(iret)
  6151: +======>           att_text = "full domain v velocity load vector at each node"
  6152:                    iret = nf90_put_att(hs%ncid, hs%glovellv%v_nodal_data_id,
  6153:                &      'long_name', trim(att_text))
  6154:                    CALL check_err(iret)
  6155: +======>           att_text = "full domain v velocity load vector"
  6156:                    iret = nf90_put_att(hs%ncid, hs%glovellv%v_nodal_data_id,
  6157:                &      'standard_name', trim(att_text))
  6158:                    CALL check_err(iret)
  6159:                    iret = nf90_put_att(hs%ncid, hs%glovellv%v_nodal_data_id,
  6160:                &         '_FillValue', doubleval)
  6161:                    CALL check_err(iret)
  6162:                    iret = nf90_put_att(hs%ncid, hs%glovellv%v_nodal_data_id,
  6163:                &           'positive', 'north')
  6164:                    CALL check_err(iret)
  6165:                 ENDIF
  6166:           C
  6167:           C     station elevation load vector
  6168:                 IF (NHASE.ne.0) THEN
  6169:                    hs%staelv%num_stations = STAELVDescript%num_fd_records
  6170:                    iret = nf90_def_dim(hs%ncid, 'elevstation',
  6171:                &       hs%staelv%num_stations, hs%staelv%num_sta_dim_id)
  6172:                    CALL check_err(iret)
  6173:                    hs%staelv%station_data_dims_3D(1) = hs%load_vector_dim_id
  6174:                    hs%staelv%station_data_dims_3D(2) = hs%staelv%num_sta_dim_id
  6175:                    hs%staelv%station_data_dims_3D(3) = hs%myTime%timenc_dim_id
  6176:                    iret = nf90_def_var(hs%ncid, 'staelv', NF90_DOUBLE,
  6177:                &       hs%staelv%station_data_dims_3D, hs%staelv%station_data_id)
  6178:                    CALL check_err(iret)
  6179: +======>           att_text = "elevation load vector at each elevation station"
  6180:                    iret = nf90_put_att(hs%ncid, hs%staelv%station_data_id,
  6181:                &      'long_name',trim(att_text))
  6182:                    CALL check_err(iret)
  6183: +======>           att_text = "station elevation load vector"
  6184:                    iret = nf90_put_att(hs%ncid, hs%staelv%station_data_id,
  6185:                &         'standard_name',trim(att_text))
  6186:                    CALL check_err(iret)
  6187:                    iret = nf90_put_att(hs%ncid, hs%staelv%station_data_id,
  6188:                &         '_FillValue', doubleval)
  6189:                    CALL check_err(iret)
  6190:                    iret = nf90_put_att(hs%ncid, hs%staelv%station_data_id,
  6191:                &      'positive', 'up')
  6192:                    CALL check_err(iret)
  6193:                 ENDIF
  6194:           C
  6195:           C     station velocity load vectors
  6196:                 IF (NHASV.ne.0) THEN
  6197:                    hs%stavellv%num_stations = STAULVDescript%num_fd_records
  6198:                    iret = nf90_def_dim(hs%ncid, 'velstation',
  6199:                &       hs%stavellv%num_stations, hs%stavellv%num_sta_dim_id)
  6200:                    CALL check_err(iret)
  6201:           C        define dimension
  6202:                    hs%stavellv%station_data_dims_3D(1) = hs%load_vector_dim_id
  6203:                    hs%stavellv%station_data_dims_3D(2) =hs%stavellv%num_sta_dim_id
  6204:                    hs%stavellv%station_data_dims_3D(3) = hs%myTime%timenc_dim_id
  6205:                    iret = nf90_def_var(hs%ncid, 'staulv', NF90_DOUBLE,
  6206:                &       hs%stavellv%station_data_dims_3D,
  6207:                &       hs%stavellv%u_station_data_id)
  6208:                    CALL check_err(iret)
  6209: +======>           att_text = "u velocity load vector at each velocity station"
  6210:                    iret = nf90_put_att(hs%ncid, hs%stavellv%u_station_data_id,
  6211:                &      'long_name',trim(att_text))
  6212:                    CALL check_err(iret)
  6213: +======>           att_text = "station u velocity load vector"
  6214:                    iret = nf90_put_att(hs%ncid, hs%stavellv%u_station_data_id,
  6215:                &      'standard_name', trim(att_text))
  6216:                    CALL check_err(iret)
  6217:                    iret = nf90_put_att(hs%ncid,
  6218:                &         hs%stavellv%u_station_data_id,
  6219:                &         '_FillValue', doubleval)
  6220:                    CALL check_err(iret)
  6221:                    iret = nf90_put_att(hs%ncid, hs%stavellv%u_station_data_id,
  6222:                &          'positive', 'east')
  6223:                    CALL check_err(iret)
  6224:           C
  6225:                    iret = nf90_def_var(hs%ncid, 'stavlv', NF90_DOUBLE,
  6226:                &       hs%stavellv%station_data_dims_3D,
  6227:                &       hs%stavellv%v_station_data_id)
  6228:                    CALL check_err(iret)
  6229: +======>           att_text = "v velocity load vector at each velocity station"
  6230:                    iret = nf90_put_att(hs%ncid, hs%stavellv%v_station_data_id,
  6231:                &      'long_name', trim(att_text))
  6232:                    CALL check_err(iret)
  6233: +======>           att_text = "station v velocity load vector"
  6234:                    iret = nf90_put_att(hs%ncid, hs%stavellv%v_station_data_id,
  6235:                &      'standard_name', trim(att_text))
  6236:                    CALL check_err(iret)
  6237:                    iret = nf90_put_att(hs%ncid, hs%stavellv%v_station_data_id,
  6238:                &         '_FillValue', doubleval)
  6239:                    CALL check_err(iret)
  6240:                    iret = nf90_put_att(hs%ncid, hs%stavellv%v_station_data_id,
  6241:                &           'positive','north')
  6242:                    CALL check_err(iret)
  6243:                 ENDIF
  6244:           C
  6245:           C     jgf50.44: Automatically turn on compression if we are using the
  6246:           C     netcdf4 file format.
  6247:           #ifdef NETCDF_CAN_DEFLATE
  6248:                 IF ( (GLOELVDescript%specifier.eq.5).or.
  6249:                &     (GLOELVDescript%specifier.eq.567).or.
  6250:                &     (GLOELVDescript%specifier.eq.568) ) THEN
  6251:                    iret = nf90_def_var_deflate(hs%ncid, hs%ha_id,
  6252:                &             1, 1, 2)
  6253:                    CALL check_err(iret)
  6254:                    IF (NHAGE.ne.0) THEN
  6255:                       iret = nf90_def_var_deflate(hs%ncid,
  6256:                &            hs%gloelv%nodal_data_id, 1, 1, 2)
  6257:                       CALL check_err(iret)
  6258:                    ENDIF
  6259:                    IF (NHAGV.ne.0) THEN
  6260:                       iret = nf90_def_var_deflate(hs%ncid,
  6261:                &            hs%glovellv%u_nodal_data_id, 1, 1, 2)
  6262:                       CALL check_err(iret)
  6263:                       iret = nf90_def_var_deflate(hs%ncid,
  6264:                &            hs%glovellv%v_nodal_data_id, 1, 1, 2)
  6265:                       CALL check_err(iret)
  6266:                    ENDIF
  6267:                    IF (NHASE.ne.0) THEN
  6268:                       iret = nf90_def_var_deflate(hs%ncid,
  6269:                &            hs%staelv%station_data_id, 1, 1, 2)
  6270:                       CALL check_err(iret)
  6271:                    ENDIF
  6272:                    IF (NHASV.ne.0) THEN
  6273:                       iret = nf90_def_var_deflate(hs%ncid,
  6274:                &            hs%stavellv%u_station_data_id, 1, 1, 2)
  6275:                       CALL check_err(iret)
  6276:                       iret = nf90_def_var_deflate(hs%ncid,
  6277:                &            hs%stavellv%v_station_data_id, 1, 1, 2)
  6278:                       CALL check_err(iret)
  6279:                    ENDIF
  6280:                 ENDIF
  6281:           #endif
  6282:           !
  6283:           !     Define harmonic analysis parameters
  6284:         I       call defineParameterWithText(hs%ncid, 'icha', NF90_INT,
  6285:                &     "harmonic analysis spool counter",
  6286:                &     "harmonic analysis spool counter")
  6287:           C
  6288:         I       call defineParameterWithText(hs%ncid, 'nz', NF90_INT,
  6289:                &     "set to 0 if a steady harmonic component is included",
  6290:                &     "indicator of steady harmonic component")
  6291:           C
  6292:         I       call defineParameterWithText(hs%ncid, 'nf', NF90_INT,
  6293:                &  "set to 1 if a steady harmonic component is included",
  6294:                &  "steady harmonic component number")
  6295:           C
  6296:         I       call defineParameterWithText(hs%ncid, 'mm', NF90_INT,
  6297:                & "2x the number of harmonic frequencies plus any steady component",
  6298:                & "2x harmonic frequencies [plus 1]")
  6299:           C
  6300:         I       call defineParameterWithText(hs%ncid, 'nstae', NF90_INT,
  6301:                &  "number of elevation recording stations for harmonic analysis",
  6302:                &  "number of elevation recording stations")
  6303:           C
  6304:         I       call defineParameterWithText(hs%ncid, 'nstav', NF90_INT,
  6305:                &  "number of velocity recording stations for harmonic analysis",
  6306:                &  "number of velocity recording stations")
  6307:           C
  6308:         I        call defineParameterWithText(hs%ncid, 'nhase', NF90_INT,
  6309:                &  "indicator for perfomance and formatting of harmonic analysis "
  6310:                & //"of elevation station data",
  6311:                &  "elevation station harmonic analysis indicator")
  6312:           C
  6313:         I        call defineParameterWithText(hs%ncid, 'nhasv', NF90_INT,
  6314:                &  "indicator for perfomance and formatting of harmonic analysis "
  6315:                & //"of velocity station data",
  6316:                &  "velocity station harmonic analysis indicator")
  6317:           C
  6318:         I        call defineParameterWithText(hs%ncid, 'nhage', NF90_INT,
  6319:                &  "indicator for perfomance and formatting of harmonic analysis "
  6320:                &  //"of full domain elevation data (at every node)",
  6321:                &  "full domain elevation harmonic analysis indicator")
  6322:           C
  6323:         I        call defineParameterWithText(hs%ncid, 'nhagv', NF90_INT,
  6324:                &  "indicator for perfomance and formatting of harmonic analysis "
  6325:                &  //"of full domain velocity data (at every node)",
  6326:                &  "full domain velocity harmonic analysis indicator")
  6327:           C
  6328:         I        call defineParameterWithText(hs%ncid, 'icall', NF90_INT,
  6329:                &  "number of subroutine calls to update load vectors and left "
  6330:                & //"matrix for harmonic analysis",
  6331:                &  "number of calls to update harmonic analysis")
  6332:           C
  6333:         I        call defineParameterWithText(hs%ncid, 'nfreq', NF90_INT,
  6334:                &  "number of frequencies under consideration in harmonic analysis"
  6335:                & //" not including a steady component, if any",
  6336:                &  "number of frequencies for harmonic analysis")
  6337:           C
  6338:         I        call defineParameterWithText(hs%ncid, 'timeud', NF90_DOUBLE,
  6339:                &  "ADCIRC time at the most recent update of the load vectors for "
  6340:                &  //"harmonic analysis",
  6341:                &  "update time for load vectors")
  6342:           C
  6343:         I        call defineParameterWithText(hs%ncid, 'itud', NF90_INT,
  6344:                &  "ADCIRC time step at the most recent update of the load vectors"
  6345:                &  //" for harmonic analysis",
  6346:                &  "update time step for load vectors")
  6347:           C
  6348:           C
  6349:           C     Leave define mode
  6350:                 iret = nf90_enddef(hs%ncid)
  6351:                 CALL check_err(iret)
  6352:           C
  6353:           C     now close the initialized netcdf file
  6354:                 iret = nf90_close(hs%ncid)
  6355:                 CALL check_err(iret)
  6356:           C
  6357:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  6358:                 call allMessage(DEBUG,"Return.")
  6359:           #endif
  6360:                 call unsetMessageSource()
  6361:           C-----------------------------------------------------------------------
  6362:                 END SUBROUTINE initNetCDFHotstartHarmonic


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONIC
INLINE LIST

  ROOT: NETCDFIO::INITNETCDFHOTSTARTHARMONIC (netcdfio.F:5987)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:6009)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:6023)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6024)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_REDEF (netcdfio.F:6027)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6028)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:6031)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:6034)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6036)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:6037)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6039)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:6042)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6044)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6049)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6051)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6055)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6057)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6059)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6061)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6063)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6066)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6068)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6070)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6072)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6074)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6077)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6079)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6083)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6085)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6087)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6092)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6093)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6095)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6096)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6098)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6106)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6108)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6110)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6112)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6114)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6116)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6117)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6119)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6120)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6122)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6130)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6132)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6134)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6136)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6138)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6140)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6141)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6143)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6144)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6146)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6148)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6150)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6152)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6154)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6156)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6158)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6159)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6161)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6162)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6164)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:6170)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6172)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6176)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6178)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6180)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6182)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6184)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6186)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6187)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6189)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6190)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6192)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:6198)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6200)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6205)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6208)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6210)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6212)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6214)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6216)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6217)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6220)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6221)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6223)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6225)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6228)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6230)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6232)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6234)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6236)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6237)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6239)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6240)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6242)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6284)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6288)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6292)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6296)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6300)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6304)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6308)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6313)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6318)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6323)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6328)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6333)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6338)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6343)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:6350)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6351)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:6354)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6355)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:6360)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONIC
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:6058)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6058)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6058)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6058)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6059)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6059)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6062)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6062)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6062)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6062)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6063)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6063)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6069)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6069)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6069)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6069)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6070)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6070)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6073)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6073)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6073)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6073)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6074)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6074)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6080)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6080)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6080)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6080)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6083)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6083)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6086)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6086)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6086)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6086)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6087)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6087)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6094)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6094)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6094)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6094)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6095)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6095)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6097)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6097)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6097)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6097)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6098)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6098)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6109)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6109)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6109)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6109)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6110)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6110)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6113)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6113)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6113)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6113)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6114)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6114)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6133)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6133)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6133)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6133)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6134)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6134)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6137)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6137)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6137)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6137)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6138)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6138)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6151)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6151)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6151)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6151)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6152)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6152)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6155)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6155)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6155)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6155)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6156)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6156)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6179)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6179)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6179)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6179)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6180)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6180)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6183)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6183)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6183)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6183)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6184)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6184)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6209)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6209)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6209)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6209)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6210)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6210)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6213)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6213)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6213)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6213)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6214)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6214)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6229)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6229)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6229)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6229)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6230)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6230)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6233)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6233)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6233)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6233)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6234)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6234)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONIC
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 45 [s0-s12 s15-s16 s18-s41 s58-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 4096 bytes
      Register spill area      : 1016 bytes
      Parameter area           :  120 bytes
      Register save area       :  176 bytes
      User data area           : 2776 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:6058)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6058)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6059)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6062)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6062)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6063)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6069)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6069)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6070)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6073)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6073)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6074)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6080)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6080)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6083)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6086)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6086)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6087)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6094)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6094)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6095)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6097)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6097)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6098)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6109)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6109)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6110)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6113)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6113)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6114)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6133)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6133)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6134)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6137)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6137)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6138)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6151)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6151)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6152)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6155)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6155)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6156)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6179)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6179)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6180)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6183)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6183)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6184)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6209)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6209)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6210)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6213)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6213)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6214)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6229)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6229)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6230)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6233)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6233)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6234)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONICMEANSVARIANCES
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  6394: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  6409: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  6410: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  6413: inl(1212): Source for routine not found.: NETCDF::NF90_REDEF
  6417: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  6424: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
  6427: vec( 103): Unvectorized loop.
  6427: vec( 118): Unvectorizable data type.: ATT_TEXT
  6430: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
  6430: vec( 103): Unvectorized loop.
  6430: vec( 108): Unvectorizable loop structure.
  6433: vec( 103): Unvectorized loop.
  6433: vec( 118): Unvectorizable data type.: ATT_TEXT
  6434: vec( 103): Unvectorized loop.
  6434: vec( 108): Unvectorizable loop structure.
  6437: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
  6449: vec( 103): Unvectorized loop.
  6449: vec( 118): Unvectorizable data type.: ATT_TEXT
  6452: vec( 103): Unvectorized loop.
  6452: vec( 108): Unvectorizable loop structure.
  6455: vec( 103): Unvectorized loop.
  6455: vec( 118): Unvectorizable data type.: ATT_TEXT
  6456: vec( 103): Unvectorized loop.
  6456: vec( 108): Unvectorizable loop structure.
  6476: vec( 103): Unvectorized loop.
  6476: vec( 118): Unvectorizable data type.: ATT_TEXT
  6479: vec( 103): Unvectorized loop.
  6479: vec( 108): Unvectorizable loop structure.
  6482: vec( 103): Unvectorized loop.
  6482: vec( 118): Unvectorizable data type.: ATT_TEXT
  6483: vec( 103): Unvectorized loop.
  6483: vec( 108): Unvectorizable loop structure.
  6498: vec( 103): Unvectorized loop.
  6498: vec( 118): Unvectorizable data type.: ATT_TEXT
  6501: vec( 103): Unvectorized loop.
  6501: vec( 108): Unvectorizable loop structure.
  6504: vec( 103): Unvectorized loop.
  6504: vec( 118): Unvectorizable data type.: ATT_TEXT
  6505: vec( 103): Unvectorized loop.
  6505: vec( 108): Unvectorizable loop structure.
  6522: vec( 103): Unvectorized loop.
  6522: vec( 118): Unvectorizable data type.: ATT_TEXT
  6526: vec( 103): Unvectorized loop.
  6526: vec( 108): Unvectorizable loop structure.
  6529: vec( 103): Unvectorized loop.
  6529: vec( 118): Unvectorizable data type.: ATT_TEXT
  6530: vec( 103): Unvectorized loop.
  6530: vec( 108): Unvectorizable loop structure.
  6545: vec( 103): Unvectorized loop.
  6545: vec( 118): Unvectorizable data type.: ATT_TEXT
  6549: vec( 103): Unvectorized loop.
  6549: vec( 108): Unvectorizable loop structure.
  6552: vec( 103): Unvectorized loop.
  6552: vec( 118): Unvectorizable data type.: ATT_TEXT
  6553: vec( 103): Unvectorized loop.
  6553: vec( 108): Unvectorizable loop structure.
  6597: inl(1222): Inlined: NETCDFIO::DEFINEPARAMETERWITHTEXT
  7010: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_SCALAR
  6603: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
  6607: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONICMEANSVARIANCES
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  6373:                 SUBROUTINE initNetCDFHotstartHarmonicMeansVariances(lun,
  6374:                &   ELAVDescript, ELVADescript, XVELAVDescript, YVELAVDescript,
  6375:                &   XVELVADescript, YVELVADescript, reterror)
  6376:                 USE SIZES, ONLY : MNHARF
  6377:                 USE HARM, ONLY : NHASE, NHASV, NHAGE, NHAGV
  6378:                 USE GLOBAL, ONLY : OutputDataDescript_t
  6379:                 IMPLICIT NONE
  6380:           C
  6381:                 INTEGER, intent(in) :: lun
  6382:                 type(OutputDataDescript_t), intent(in) :: ELAVDescript
  6383:                 type(OutputDataDescript_t), intent(in) :: ELVADescript
  6384:                 type(OutputDataDescript_t), intent(in) :: XVELAVDescript
  6385:                 type(OutputDataDescript_t), intent(in) :: YVELAVDescript
  6386:                 type(OutputDataDescript_t), intent(in) :: XVELVADescript
  6387:                 type(OutputDataDescript_t), intent(in) :: YVELVADescript
  6388:           C
  6389:                 INTEGER iret ! success or failure of the netcdf call
  6390:                 CHARACTER(1024) :: att_text
  6391:                 INTEGER :: varid
  6392:                 LOGICAL :: reterror
  6393:           C
  6394:                 call setMessageSource("initNetCDFHotstartHarmonicMeansVariances")
  6395:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  6396:                 call allMessage(DEBUG,"Enter.")
  6397:           #endif
  6398:                 reterror = .false.
  6399:           C
  6400:           C     Point to the hotstart file we want to work on. Memory allocation
  6401:           C     was already done for means and variances by initNetCDFHotstartHarmonic.
  6402:                 IF (lun.eq.67) THEN
  6403:                    hs => hs67
  6404:                 ELSE
  6405:                    hs => hs68
  6406:                 ENDIF
  6407:           C
  6408:           C     Open existing NetCDF file
  6409:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  6410:                 CALL check_err(iret)
  6411:           C
  6412:           C     Enter "redefine" mode
  6413:                 iret = nf90_redef(hs%ncid)
  6414:                 CALL check_err(iret)
  6415:           !
  6416:           !     Inquire variables
  6417:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  6418:           C
  6419:           C     elevation
  6420:                 IF (NHAGE.ne.0) THEN
  6421:                    ! ELAV
  6422:                    hs%elav%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6423:                    hs%elav%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6424:                    iret = nf90_def_var(hs%ncid, 'elav', NF90_DOUBLE,
  6425:                &       hs%elav%nodal_data_dims, hs%elav%nodal_data_id)
  6426:                    CALL check_err(iret)
  6427: +======>           att_text = "sum of elevations computed by ADCIRC, at every "
  6428:                &   //"node in the model grid, over all time steps since harmonic "
  6429:                &   //"analysis means and variance checking has begun"
  6430:                    iret = nf90_put_att(hs%ncid, hs%elav%nodal_data_id,
  6431:                &      'long_name',trim(att_text))
  6432:                    CALL check_err(iret)
  6433: +======>           att_text = "sum of elevations"
  6434:                    iret = nf90_put_att(hs%ncid, hs%elav%nodal_data_id,
  6435:                &      'standard_name', trim(att_text))
  6436:                    CALL check_err(iret)
  6437:                    iret = nf90_put_att(hs%ncid, hs%elav%nodal_data_id,
  6438:                &         '_FillValue', doubleval)
  6439:                    CALL check_err(iret)
  6440:                    iret = nf90_put_att(hs%ncid, hs%elav%nodal_data_id,
  6441:                &        'positive', 'up')
  6442:                    CALL check_err(iret)
  6443:                    ! ELVA
  6444:                    hs%elva%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6445:                    hs%elva%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6446:                    iret = nf90_def_var(hs%ncid, 'elva', NF90_DOUBLE,
  6447:                &       hs%elva%nodal_data_dims, hs%elva%nodal_data_id)
  6448:                    CALL check_err(iret)
  6449: +======>           att_text = "sum of squares of elevations computed by ADCIRC, "
  6450:                & //"at every node in the model grid, over all time steps since "
  6451:                & //"harmonic analysis means and variance checking has begun"
  6452:                    iret = nf90_put_att(hs%ncid, hs%elva%nodal_data_id,
  6453:                &      'long_name', trim(att_text))
  6454:                    CALL check_err(iret)
  6455: +======>           att_text = "sum of squares of elevations"
  6456:                    iret = nf90_put_att(hs%ncid, hs%elva%nodal_data_id,
  6457:                &      'standard_name', trim(att_text))
  6458:                    CALL check_err(iret)
  6459:                    iret = nf90_put_att(hs%ncid, hs%elva%nodal_data_id,
  6460:                &         '_FillValue', doubleval)
  6461:                    CALL check_err(iret)
  6462:                    iret = nf90_put_att(hs%ncid, hs%elva%nodal_data_id,
  6463:                &        'positive', 'up')
  6464:                    CALL check_err(iret)
  6465:                 ENDIF
  6466:           C
  6467:           C     global velocity load vectors
  6468:                 IF (NHAGV.ne.0) THEN
  6469:                    ! XVELAV
  6470:                    hs%xvelav%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6471:                    hs%xvelav%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6472:                    iret = nf90_def_var(hs%ncid, 'xvelav', NF90_DOUBLE,
  6473:                &       hs%xvelav%nodal_data_dims,
  6474:                &       hs%xvelav%nodal_data_id)
  6475:                    CALL check_err(iret)
  6476: +======>           att_text = "sum of depth-averaged u velocities computed by "
  6477:                & //"ADCIRC, at every node in the model grid, over all time steps "
  6478:                & //"since harmonic analysis means and variance checking has begun"
  6479:                    iret = nf90_put_att(hs%ncid, hs%xvelav%nodal_data_id,
  6480:                &      'long_name', trim(att_text))
  6481:                    CALL check_err(iret)
  6482: +======>           att_text = "sum of depth averaged u velocities"
  6483:                    iret = nf90_put_att(hs%ncid, hs%xvelav%nodal_data_id,
  6484:                &      'standard_name', trim(att_text))
  6485:                    CALL check_err(iret)
  6486:                    iret = nf90_put_att(hs%ncid, hs%xvelav%nodal_data_id,
  6487:                &         '_FillValue', doubleval)
  6488:                    CALL check_err(iret)
  6489:                    iret = nf90_put_att(hs%ncid, hs%xvelav%nodal_data_id,
  6490:                &        'positive', 'east')
  6491:                    CALL check_err(iret)
  6492:                    ! YVELAV
  6493:                    hs%yvelav%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6494:                    hs%yvelav%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6495:                    iret = nf90_def_var(hs%ncid, 'yvelav', NF90_DOUBLE,
  6496:                &       hs%yvelav%nodal_data_dims, hs%yvelav%nodal_data_id)
  6497:                    CALL check_err(iret)
  6498: +======>           att_text = "sum of depth-averaged v velocities computed by "
  6499:                & //"ADCIRC, at every node in the model grid, over all time steps "
  6500:                & //"since harmonic analysis means and variance checking has begun"
  6501:                    iret = nf90_put_att(hs%ncid, hs%yvelav%nodal_data_id,
  6502:                &      'long_name', trim(att_text))
  6503:                    CALL check_err(iret)
  6504: +======>           att_text = "sum of depth averaged v velocities"
  6505:                    iret = nf90_put_att(hs%ncid, hs%yvelav%nodal_data_id,
  6506:                &      'standard_name', trim(att_text))
  6507:                    CALL check_err(iret)
  6508:                    iret = nf90_put_att(hs%ncid, hs%yvelav%nodal_data_id,
  6509:                &         '_FillValue', doubleval)
  6510:                    CALL check_err(iret)
  6511:                    iret = nf90_put_att(hs%ncid, hs%yvelav%nodal_data_id,
  6512:                &        'positive', 'north')
  6513:                    CALL check_err(iret)
  6514:           
  6515:                    ! XVELVA
  6516:                    hs%xvelva%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6517:                    hs%xvelva%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6518:                    iret = nf90_def_var(hs%ncid, 'xvelva', NF90_DOUBLE,
  6519:                &       hs%xvelva%nodal_data_dims,
  6520:                &       hs%xvelva%nodal_data_id)
  6521:                    CALL check_err(iret)
  6522: +======>           att_text = "sum of squares of depth averaged u velocities "
  6523:                & //"computed by ADCIRC, at every node in the model grid, over all"
  6524:                & //" time steps since harmonic analysis means and variance "
  6525:                & //"checking has begun"
  6526:                    iret = nf90_put_att(hs%ncid, hs%xvelva%nodal_data_id,
  6527:                &      'long_name',trim(att_text))
  6528:                    CALL check_err(iret)
  6529: +======>           att_text = "sum of squares of depth averaged u velocities"
  6530:                    iret = nf90_put_att(hs%ncid, hs%xvelva%nodal_data_id,
  6531:                &      'standard_name', trim(att_text))
  6532:                    CALL check_err(iret)
  6533:                    iret = nf90_put_att(hs%ncid, hs%xvelva%nodal_data_id,
  6534:                &         '_FillValue',  doubleval)
  6535:                    CALL check_err(iret)
  6536:                    iret = nf90_put_att(hs%ncid, hs%xvelva%nodal_data_id,
  6537:                &        'positive',  'east')
  6538:                    CALL check_err(iret)
  6539:                    ! YVELVA
  6540:                    hs%yvelva%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6541:                    hs%yvelva%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6542:                    iret = nf90_def_var(hs%ncid, 'yvelva', NF90_DOUBLE,
  6543:                &       hs%yvelva%nodal_data_dims, hs%yvelva%nodal_data_id)
  6544:                    CALL check_err(iret)
  6545: +======>           att_text = "sum of squares of depth averaged v velocities "
  6546:                &  //"computed by ADCIRC, at every node in the model grid, over "
  6547:                &  //"all time steps since harmonic analysis means and variance "
  6548:                &  //"checking has begun"
  6549:                    iret = nf90_put_att(hs%ncid, hs%yvelva%nodal_data_id,
  6550:                &      'long_name', trim(att_text))
  6551:                    CALL check_err(iret)
  6552: +======>           att_text = "sum of squares of depth averaged v velocities"
  6553:                    iret = nf90_put_att(hs%ncid, hs%yvelva%nodal_data_id,
  6554:                &      'standard_name', trim(att_text))
  6555:                    CALL check_err(iret)
  6556:                    iret = nf90_put_att(hs%ncid, hs%yvelva%nodal_data_id,
  6557:                &         '_FillValue', doubleval)
  6558:                    CALL check_err(iret)
  6559:                    iret = nf90_put_att(hs%ncid, hs%yvelva%nodal_data_id,
  6560:                &        'positive', 'up')
  6561:                    CALL check_err(iret)
  6562:                 ENDIF
  6563:           
  6564:           C
  6565:           C     jgf50.44: Automatically turn on compression if we are using the
  6566:           C     netcdf4 file format.
  6567:           #ifdef NETCDF_CAN_DEFLATE
  6568:                 IF ( (ELAVDescript%specifier.eq.5).or.
  6569:                &     (ELAVDescript%specifier.eq.567).or.
  6570:                &     (ELAVDescript%specifier.eq.568) ) THEN
  6571:                    IF (NHAGE.ne.0) THEN
  6572:                       iret = nf90_def_var_deflate(hs%ncid,
  6573:                &            hs%elav%nodal_data_id, 1, 1, 2)
  6574:                       CALL check_err(iret)
  6575:                       iret = nf90_def_var_deflate(hs%ncid,
  6576:                &            hs%elva%nodal_data_id, 1, 1, 2)
  6577:                       CALL check_err(iret)
  6578:                    ENDIF
  6579:                    IF (NHAGV.ne.0) THEN
  6580:                       iret = nf90_def_var_deflate(hs%ncid,
  6581:                &            hs%xvelav%nodal_data_id, 1, 1, 2)
  6582:                       CALL check_err(iret)
  6583:                       iret = nf90_def_var_deflate(hs%ncid,
  6584:                &            hs%xvelva%nodal_data_id, 1, 1, 2)
  6585:                       CALL check_err(iret)
  6586:                       iret = nf90_def_var_deflate(hs%ncid,
  6587:                &            hs%yvelav%nodal_data_id, 1, 1, 2)
  6588:                       CALL check_err(iret)
  6589:                       iret = nf90_def_var_deflate(hs%ncid,
  6590:                &            hs%yvelva%nodal_data_id, 1, 1, 2)
  6591:                       CALL check_err(iret)
  6592:                    ENDIF
  6593:                 ENDIF
  6594:           #endif
  6595:           !
  6596:           !     Define harmonic analysis parameters
  6597:         I       call defineParameterWithText(hs%ncid, 'ntsteps', NF90_INT,
  6598:                &     "number of time steps since start of means and variance",
  6599:                &     "number of time steps since start of means and variance")
  6600:           C
  6601:           C
  6602:           C     Leave define mode
  6603:                 iret = nf90_enddef(hs%ncid)
  6604:                 CALL check_err(iret)
  6605:           C
  6606:           C     now close the initialized netcdf file
  6607:                 iret = nf90_close(hs%ncid)
  6608:                 CALL check_err(iret)
  6609:           C
  6610:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  6611:                 call allMessage(DEBUG,"Return.")
  6612:           #endif
  6613:                 call unsetMessageSource()
  6614:           C-----------------------------------------------------------------------
  6615:                 END SUBROUTINE initNetCDFHotstartHarmonicMeansVariances


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONICMEANSVARIANCES
INLINE LIST

  ROOT: NETCDFIO::INITNETCDFHOTSTARTHARMONICMEANSVARIANCES (netcdfio.F:6373)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:6394)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:6409)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6410)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_REDEF (netcdfio.F:6413)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6414)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:6417)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6424)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6426)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6430)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6432)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6434)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6436)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6437)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6439)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6440)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6442)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6446)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6448)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6452)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6454)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6456)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6458)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6459)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6461)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6462)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6464)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6472)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6475)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6479)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6481)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6483)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6485)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6486)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6488)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6489)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6491)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6495)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6497)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6501)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6503)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6505)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6507)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6508)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6510)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6511)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6513)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6518)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6521)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6526)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6528)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6530)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6532)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6533)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6535)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6536)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6538)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6542)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6544)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6549)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6551)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6553)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6555)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6556)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6558)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6559)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6561)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6597)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:6603)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6604)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:6607)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6608)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:6613)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONICMEANSVARIANCES
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:6427)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6427)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6427)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6427)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6430)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6430)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6433)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6433)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6433)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6433)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6434)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6434)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6449)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6449)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6449)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6449)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6452)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6452)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6455)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6455)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6455)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6455)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6456)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6456)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6476)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6476)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6476)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6476)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6479)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6479)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6482)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6482)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6482)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6482)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6483)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6483)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6498)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6498)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6498)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6498)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6501)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6501)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6504)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6504)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6504)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6504)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6505)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6505)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6522)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6522)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6522)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6522)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6526)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6526)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6529)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6529)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6529)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6529)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6530)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6530)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6545)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6545)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6549)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6549)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6552)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6552)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6552)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6552)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6553)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6553)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTARTHARMONICMEANSVARIANCES
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 45 [s0-s12 s15-s16 s18-s42 s59-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2096 bytes
      Register spill area      :  208 bytes
      Parameter area           :  120 bytes
      Register save area       :  176 bytes
      User data area           : 1584 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:6427)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6427)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6430)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6433)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6433)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6434)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6449)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6449)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6452)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6455)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6455)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6456)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6476)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6476)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6479)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6482)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6482)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6483)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6498)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6498)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6501)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6504)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6504)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6505)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6522)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6522)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6526)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6529)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6529)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6530)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6545)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6545)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6549)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6552)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6552)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6553)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART3D
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  6641: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  6664: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  6665: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  6668: inl(1212): Source for routine not found.: NETCDF::NF90_REDEF
  6672: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  6677: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
  6680: vec( 103): Unvectorized loop.
  6680: vec( 118): Unvectorizable data type.: ATT_TEXT
  6681: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
  6681: vec( 103): Unvectorized loop.
  6681: vec( 108): Unvectorizable loop structure.
  6684: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
  6694: vec( 103): Unvectorized loop.
  6694: vec( 118): Unvectorizable data type.: ATT_TEXT
  6695: vec( 103): Unvectorized loop.
  6695: vec( 108): Unvectorizable loop structure.
  6708: vec( 103): Unvectorized loop.
  6708: vec( 118): Unvectorizable data type.: ATT_TEXT
  6709: vec( 103): Unvectorized loop.
  6709: vec( 108): Unvectorizable loop structure.
  6722: vec( 103): Unvectorized loop.
  6722: vec( 118): Unvectorizable data type.: ATT_TEXT
  6723: vec( 103): Unvectorized loop.
  6723: vec( 108): Unvectorizable loop structure.
  6736: vec( 103): Unvectorized loop.
  6736: vec( 118): Unvectorizable data type.: ATT_TEXT
  6737: vec( 103): Unvectorized loop.
  6737: vec( 108): Unvectorizable loop structure.
  6750: vec( 103): Unvectorized loop.
  6750: vec( 118): Unvectorizable data type.: ATT_TEXT
  6751: vec( 103): Unvectorized loop.
  6751: vec( 108): Unvectorizable loop structure.
  6764: vec( 103): Unvectorized loop.
  6764: vec( 118): Unvectorizable data type.: ATT_TEXT
  6765: vec( 103): Unvectorized loop.
  6765: vec( 108): Unvectorizable loop structure.
  6782: vec( 103): Unvectorized loop.
  6782: vec( 118): Unvectorizable data type.: ATT_TEXT
  6783: vec( 103): Unvectorized loop.
  6783: vec( 108): Unvectorizable loop structure.
  6796: vec( 103): Unvectorized loop.
  6796: vec( 108): Unvectorizable loop structure.
  6809: vec( 103): Unvectorized loop.
  6809: vec( 108): Unvectorizable loop structure.
  6826: vec( 103): Unvectorized loop.
  6826: vec( 118): Unvectorizable data type.: ATT_TEXT
  6827: vec( 103): Unvectorized loop.
  6827: vec( 108): Unvectorizable loop structure.
  6838: vec( 103): Unvectorized loop.
  6838: vec( 118): Unvectorizable data type.: ATT_TEXT
  6839: vec( 103): Unvectorized loop.
  6839: vec( 108): Unvectorizable loop structure.
  6850: vec( 103): Unvectorized loop.
  6850: vec( 118): Unvectorizable data type.: ATT_TEXT
  6851: vec( 103): Unvectorized loop.
  6851: vec( 108): Unvectorizable loop structure.
  6867: vec( 103): Unvectorized loop.
  6867: vec( 118): Unvectorizable data type.: ATT_TEXT
  6868: vec( 103): Unvectorized loop.
  6868: vec( 108): Unvectorizable loop structure.
  6879: vec( 103): Unvectorized loop.
  6879: vec( 118): Unvectorizable data type.: ATT_TEXT
  6880: vec( 103): Unvectorized loop.
  6880: vec( 108): Unvectorizable loop structure.
  6945: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_SCALAR
  6972: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
  6976: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART3D
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  6624:                 SUBROUTINE initNetCDFHotstart3D(lun, netcdf_format)
  6625:                 USE SIZES, ONLY : MNPROC
  6626:                 USE GLOBAL, ONLY : OutputDataDescript_t, IDEN, scratchMessage
  6627:                 USE GLOBAL_3DVS, ONLY : NFEN
  6628:                 IMPLICIT NONE
  6629:           C
  6630:                 INTEGER, intent(in) :: lun
  6631:                 INTEGER, intent(in) :: netcdf_format ! whether netcdf3 or netcdf4
  6632:                                                      ! format (netcdf4=hdf5)
  6633:                                                      ! classic data model in any case
  6634:           C
  6635:                 LOGICAL err
  6636:           C
  6637:                 INTEGER iret ! success or failure of the netcdf call
  6638:                 CHARACTER(1024) :: att_text
  6639:                 INTEGER :: tempid
  6640:           C
  6641:                 call setMessageSource("initNetCDFHotstart3D")
  6642:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  6643:                 call allMessage(DEBUG,"Enter.")
  6644:           #endif
  6645:                 err = .false.
  6646:           C
  6647:           C     Point to the hotstart file we want to work on.
  6648:                 IF (lun.eq.67) THEN
  6649:                    hs => hs67
  6650:                 ELSE
  6651:                    hs => hs68
  6652:                 ENDIF
  6653:           C
  6654:           C     nodes and elements
  6655:                 hs%myMesh => adcircMesh
  6656:           C     jgf50.06: If this is called during a parallel run, and all other
  6657:           C     fulldomain 3D output is turned off, the number of vertical nodes will not
  6658:           C     have been set.
  6659:                 IF (MNPROC.gt.1) THEN
  6660:                    hs%myMesh%num_v_nodes = NFEN
  6661:                 ENDIF
  6662:           C
  6663:           C     Open existing NetCDF file
  6664:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  6665:                 CALL check_err(iret)
  6666:           C
  6667:           C     Enter "redefine" mode
  6668:                 iret = nf90_redef(hs%ncid)
  6669:                 CALL check_err(iret)
  6670:           !
  6671:           !     Inquire variables
  6672:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  6673:           C
  6674:           C     DUU
  6675:                 hs%duu%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6676:                 hs%duu%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6677:                 iret = nf90_def_var(hs%ncid, 'duu', NF90_DOUBLE,
  6678:                &    hs%duu%nodal_data_dims, hs%duu%nodal_data_id)
  6679:                 CALL check_err(iret)
  6680: +======>        att_text = "velocity dispersion term"
  6681:                 iret = nf90_put_att(hs%ncid, hs%duu%nodal_data_id,
  6682:                &   'long_name', trim(att_text))
  6683:                 CALL check_err(iret)
  6684:                 iret = nf90_put_att(hs%ncid, hs%duu%nodal_data_id,
  6685:                &      '_FillValue', doubleval)
  6686:                 CALL check_err(iret)
  6687:           C
  6688:           C     DUV
  6689:                 hs%duv%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6690:                 hs%duv%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6691:                 iret = nf90_def_var(hs%ncid, 'duv', NF90_DOUBLE,
  6692:                &    hs%duv%nodal_data_dims, hs%duv%nodal_data_id)
  6693:                 CALL check_err(iret)
  6694: +======>        att_text = "velocity dispersion term"
  6695:                 iret = nf90_put_att(hs%ncid, hs%duv%nodal_data_id,
  6696:                &   'long_name', trim(att_text))
  6697:                 CALL check_err(iret)
  6698:                 iret = nf90_put_att(hs%ncid, hs%duv%nodal_data_id,
  6699:                &      '_FillValue', doubleval)
  6700:                 CALL check_err(iret)
  6701:           C
  6702:           C     DVV
  6703:                 hs%dvv%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6704:                 hs%dvv%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6705:                 iret = nf90_def_var(hs%ncid, 'dvv', NF90_DOUBLE,
  6706:                &    hs%dvv%nodal_data_dims, hs%dvv%nodal_data_id)
  6707:                 CALL check_err(iret)
  6708: +======>        att_text = "velocity dispersion term"
  6709:                 iret = nf90_put_att(hs%ncid, hs%dvv%nodal_data_id,
  6710:                &   'long_name', trim(att_text))
  6711:                 CALL check_err(iret)
  6712:                 iret = nf90_put_att(hs%ncid, hs%dvv%nodal_data_id,
  6713:                &      '_FillValue',  doubleval)
  6714:                 CALL check_err(iret)
  6715:           C
  6716:           C     UU
  6717:                 hs%uu%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6718:                 hs%uu%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6719:                 iret = nf90_def_var(hs%ncid, 'uu', NF90_DOUBLE,
  6720:                &    hs%uu%nodal_data_dims, hs%uu%nodal_data_id)
  6721:                 CALL check_err(iret)
  6722: +======>        att_text = "vertically averaged velocity in east direction"
  6723:                 iret = nf90_put_att(hs%ncid, hs%uu%nodal_data_id,
  6724:                &   'long_name',trim(att_text))
  6725:                 CALL check_err(iret)
  6726:                 iret = nf90_put_att(hs%ncid, hs%uu%nodal_data_id,
  6727:                &      '_FillValue', doubleval)
  6728:                 CALL check_err(iret)
  6729:           C
  6730:           C     VV
  6731:                 hs%vv%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6732:                 hs%vv%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6733:                 iret = nf90_def_var(hs%ncid, 'vv', NF90_DOUBLE,
  6734:                &    hs%vv%nodal_data_dims, hs%vv%nodal_data_id)
  6735:                 CALL check_err(iret)
  6736: +======>        att_text = "vertically averaged velocity in north direction"
  6737:                 iret = nf90_put_att(hs%ncid, hs%vv%nodal_data_id,
  6738:                &   'long_name', trim(att_text))
  6739:                 CALL check_err(iret)
  6740:                 iret = nf90_put_att(hs%ncid, hs%vv%nodal_data_id,
  6741:                &      '_FillValue', doubleval)
  6742:                 CALL check_err(iret)
  6743:           C
  6744:           C     BSX
  6745:                 hs%bsx%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6746:                 hs%bsx%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6747:                 iret = nf90_def_var(hs%ncid, 'bsx', NF90_DOUBLE,
  6748:                &    hs%bsx%nodal_data_dims, hs%bsx%nodal_data_id)
  6749:                 CALL check_err(iret)
  6750: +======>        att_text = "bottom stress in east direction"
  6751:                 iret = nf90_put_att(hs%ncid, hs%bsx%nodal_data_id,
  6752:                &   'long_name', trim(att_text))
  6753:                 CALL check_err(iret)
  6754:                 iret = nf90_put_att(hs%ncid, hs%bsx%nodal_data_id,
  6755:                &      '_FillValue',doubleval)
  6756:                 CALL check_err(iret)
  6757:           C
  6758:           C     BSY
  6759:                 hs%bsy%nodal_data_dims(1) = hs%myMesh%num_nodes_dim_id
  6760:                 hs%bsy%nodal_data_dims(2) = hs%myTime%timenc_dim_id
  6761:                 iret = nf90_def_var(hs%ncid, 'bsy', NF90_DOUBLE,
  6762:                &    hs%bsy%nodal_data_dims, hs%bsy%nodal_data_id)
  6763:                 CALL check_err(iret)
  6764: +======>        att_text = "bottom stress in north direction"
  6765:                 iret = nf90_put_att(hs%ncid, hs%bsy%nodal_data_id,
  6766:                &   'long_name',trim(att_text))
  6767:                 CALL check_err(iret)
  6768:                 iret = nf90_put_att(hs%ncid, hs%bsy%nodal_data_id,
  6769:                &      '_FillValue', doubleval)
  6770:                 CALL check_err(iret)
  6771:           C
  6772:           C     3D DENSITY
  6773:                 IF (IDEN.ne.0) THEN
  6774:                    hs%density3D%nodal_data_dims_3D(1) = hs%myMesh%num_nodes_dim_id
  6775:                    hs%density3D%nodal_data_dims_3D(2)=hs%myMesh%num_v_nodes_dim_id
  6776:                    hs%density3D%nodal_data_dims_3D(3) = hs%myTime%timenc_dim_id
  6777:                 ENDIF
  6778:                 IF (IDEN.eq.1) THEN
  6779:                    iret = nf90_def_var(hs%ncid, 'sigt', NF90_DOUBLE,
  6780:                &     hs%density3D%nodal_data_dims_3D,hs%density3D%u_nodal_data_id)
  6781:                    CALL check_err(iret)
  6782: +======>           att_text = "sigma t density"
  6783:                    iret = nf90_put_att(hs%ncid, hs%density3D%u_nodal_data_id,
  6784:                &      'long_name',trim(att_text))
  6785:                    CALL check_err(iret)
  6786:                    iret = nf90_put_att(hs%ncid, hs%density3D%u_nodal_data_id,
  6787:                &         '_FillValue', doubleval)
  6788:                    CALL check_err(iret)
  6789:                 ENDIF
  6790:                 IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
  6791:                    iret = nf90_def_var(hs%ncid, 'salinity', NF90_DOUBLE,
  6792:                &       hs%density3D%nodal_data_dims_3D,
  6793:                &       hs%density3D%v_nodal_data_id)
  6794:                    CALL check_err(iret)
  6795: +======>           att_text = "salinity"
  6796:                    iret = nf90_put_att(hs%ncid, hs%density3D%v_nodal_data_id,
  6797:                &      'long_name',trim(att_text))
  6798:                    CALL check_err(iret)
  6799:                    iret = nf90_put_att(hs%ncid, hs%density3D%v_nodal_data_id,
  6800:                &         '_FillValue', doubleval)
  6801:                    CALL check_err(iret)
  6802:                 ENDIF
  6803:                 IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
  6804:                    iret = nf90_def_var(hs%ncid, 'temperature', NF90_DOUBLE,
  6805:                &       hs%density3D%nodal_data_dims_3D,
  6806:                &       hs%density3D%w_nodal_data_id)
  6807:                    CALL check_err(iret)
  6808: +======>           att_text = "salinity"
  6809:                    iret = nf90_put_att(hs%ncid, hs%density3D%w_nodal_data_id,
  6810:                &      'long_name', trim(att_text))
  6811:                    CALL check_err(iret)
  6812:                    iret = nf90_put_att(hs%ncid, hs%density3D%w_nodal_data_id,
  6813:                &         '_FillValue', doubleval)
  6814:                    CALL check_err(iret)
  6815:                 ENDIF
  6816:           C
  6817:           C     3D VELOCITY
  6818:                 hs%velocity3D%nodal_data_dims_3D(1) = hs%myMesh%num_nodes_dim_id
  6819:                 hs%velocity3D%nodal_data_dims_3D(2) = hs%myMesh%num_v_nodes_dim_id
  6820:                 hs%velocity3D%nodal_data_dims_3D(3) = hs%myTime%timenc_dim_id
  6821:           C     u-vel3D
  6822:                 iret = nf90_def_var(hs%ncid, 'u-vel3D', NF90_DOUBLE,
  6823:                &    hs%velocity3D%nodal_data_dims_3D,
  6824:                &    hs%velocity3D%u_nodal_data_id)
  6825:                 CALL check_err(iret)
  6826: +======>        att_text = "3D fulldomain velocity in east direction"
  6827:                 iret = nf90_put_att(hs%ncid, hs%velocity3D%u_nodal_data_id,
  6828:                &   'long_name', trim(att_text))
  6829:                 CALL check_err(iret)
  6830:                 iret = nf90_put_att(hs%ncid, hs%velocity3D%u_nodal_data_id,
  6831:                &      '_FillValue', doubleval)
  6832:                 CALL check_err(iret)
  6833:           C     v-vel3D
  6834:                 iret = nf90_def_var(hs%ncid, 'v-vel3D', NF90_DOUBLE,
  6835:                &    hs%velocity3D%nodal_data_dims_3D,
  6836:                &    hs%velocity3D%v_nodal_data_id)
  6837:                 CALL check_err(iret)
  6838: +======>        att_text = "3D fulldomain velocity in north direction"
  6839:                 iret = nf90_put_att(hs%ncid, hs%velocity3D%v_nodal_data_id,
  6840:                &   'long_name',trim(att_text))
  6841:                 CALL check_err(iret)
  6842:                 iret = nf90_put_att(hs%ncid, hs%velocity3D%v_nodal_data_id,
  6843:                &      '_FillValue', doubleval)
  6844:                 CALL check_err(iret)
  6845:           C     w-vel3D
  6846:                 iret = nf90_def_var(hs%ncid, 'w-vel3D', NF90_DOUBLE,
  6847:                &    hs%velocity3D%nodal_data_dims_3D,
  6848:                &    hs%velocity3D%w_nodal_data_id)
  6849:                 CALL check_err(iret)
  6850: +======>        att_text = "3D full domain velocity in the vertical direction"
  6851:                 iret = nf90_put_att(hs%ncid, hs%velocity3D%w_nodal_data_id,
  6852:                &   'long_name', trim(att_text))
  6853:                 CALL check_err(iret)
  6854:                 iret = nf90_put_att(hs%ncid, hs%velocity3D%w_nodal_data_id,
  6855:                &      '_FillValue', doubleval)
  6856:                 CALL check_err(iret)
  6857:           C
  6858:           C     3D TURBULENCE
  6859:                 hs%turbulence3D%nodal_data_dims_3D(1) = hs%myMesh%num_nodes_dim_id
  6860:                 hs%turbulence3D%nodal_data_dims_3D(2)=hs%myMesh%num_v_nodes_dim_id
  6861:                 hs%turbulence3D%nodal_data_dims_3D(3) = hs%myTime%timenc_dim_id
  6862:           C     Q20
  6863:                 iret = nf90_def_var(hs%ncid, 'q20', NF90_DOUBLE,
  6864:                &    hs%turbulence3D%nodal_data_dims_3D,
  6865:                &    hs%turbulence3D%u_nodal_data_id)
  6866:                 CALL check_err(iret)
  6867: +======>        att_text = "3D fulldomain turbulence kinetic energy"
  6868:                 iret = nf90_put_att(hs%ncid, hs%turbulence3D%u_nodal_data_id,
  6869:                &   'long_name',trim(att_text))
  6870:                 CALL check_err(iret)
  6871:                 iret = nf90_put_att(hs%ncid, hs%turbulence3D%u_nodal_data_id,
  6872:                &      '_FillValue', doubleval)
  6873:                 CALL check_err(iret)
  6874:           C     L
  6875:                 iret = nf90_def_var(hs%ncid, 'l', NF90_DOUBLE,
  6876:                &    hs%turbulence3D%nodal_data_dims_3D,
  6877:                &    hs%turbulence3D%v_nodal_data_id)
  6878:                 CALL check_err(iret)
  6879: +======>        att_text = "3D fulldomain turbulence length scale"
  6880:                 iret = nf90_put_att(hs%ncid, hs%turbulence3D%v_nodal_data_id,
  6881:                &   'long_name', trim(att_text))
  6882:                 CALL check_err(iret)
  6883:                 iret = nf90_put_att(hs%ncid, hs%turbulence3D%v_nodal_data_id,
  6884:                &      '_FillValue', doubleval)
  6885:                 CALL check_err(iret)
  6886:           C
  6887:           C     jgf50.44: Automatically turn on compression if we are using the
  6888:           C     netcdf4 file format.
  6889:           #ifdef NETCDF_CAN_DEFLATE
  6890:                 IF ( (netcdf_format.eq.5).or.
  6891:                &     (netcdf_format.eq.567).or.
  6892:                &     (netcdf_format.eq.568) ) THEN
  6893:                    iret = nf90_def_var_deflate(hs%ncid, hs%duu%nodal_data_id,
  6894:                &             1, 1, 2)
  6895:                    CALL check_err(iret)
  6896:                    iret = nf90_def_var_deflate(hs%ncid, hs%dvv%nodal_data_id,
  6897:                &             1, 1, 2)
  6898:                    CALL check_err(iret)
  6899:                    iret = nf90_def_var_deflate(hs%ncid, hs%uu%nodal_data_id,
  6900:                &             1, 1, 2)
  6901:                    CALL check_err(iret)
  6902:                    iret = nf90_def_var_deflate(hs%ncid, hs%vv%nodal_data_id,
  6903:                &             1, 1, 2)
  6904:                    CALL check_err(iret)
  6905:                    iret = nf90_def_var_deflate(hs%ncid, hs%bsx%nodal_data_id,
  6906:                &             1, 1, 2)
  6907:                    CALL check_err(iret)
  6908:                    iret = nf90_def_var_deflate(hs%ncid, hs%bsy%nodal_data_id,
  6909:                &             1, 1, 2)
  6910:                    CALL check_err(iret)
  6911:                    IF (IDEN.eq.1) THEN
  6912:                       iret = nf90_def_var_deflate(hs%ncid,
  6913:                &               hs%density3D%u_nodal_data_id, 1, 1, 2)
  6914:                       CALL check_err(iret)
  6915:                    ENDIF
  6916:                    IF ((IDEN.eq.2).or.(IDEN.eq.4)) THEN
  6917:                       iret = nf90_def_var_deflate(hs%ncid,
  6918:                &           hs%density3D%v_nodal_data_id, 1, 1, 2)
  6919:                       CALL check_err(iret)
  6920:                    ENDIF
  6921:                    IF ((IDEN.eq.3).or.(IDEN.eq.4)) THEN
  6922:                       iret = nf90_def_var_deflate(hs%ncid,
  6923:                &           hs%density3D%w_nodal_data_id, 1, 1, 2)
  6924:                       CALL check_err(iret)
  6925:                    ENDIF
  6926:                    iret = nf90_def_var_deflate(hs%ncid,
  6927:                &          hs%velocity3D%u_nodal_data_id, 1, 1, 2)
  6928:                    CALL check_err(iret)
  6929:                    iret = nf90_def_var_deflate(hs%ncid,
  6930:                &          hs%velocity3D%v_nodal_data_id, 1, 1, 2)
  6931:                    CALL check_err(iret)
  6932:                    iret = nf90_def_var_deflate(hs%ncid,
  6933:                &          hs%velocity3D%w_nodal_data_id, 1, 1, 2)
  6934:                    CALL check_err(iret)
  6935:                    iret = nf90_def_var_deflate(hs%ncid,
  6936:                &          hs%turbulence3D%u_nodal_data_id, 1, 1, 2)
  6937:                    CALL check_err(iret)
  6938:                    iret = nf90_def_var_deflate(hs%ncid,
  6939:                &          hs%turbulence3D%v_nodal_data_id, 1, 1, 2)
  6940:                    CALL check_err(iret)
  6941:           
  6942:                 ENDIF
  6943:           #endif
  6944:           C
  6945:                 iret = nf90_def_var(hs%ncid, 'n3dsd', NF90_INT, varid=tempid)
  6946:                 CALL check_err(iret)
  6947:                 iret = nf90_def_var(hs%ncid, 'i3dsdrec', NF90_INT, varid=tempid)
  6948:                 CALL check_err(iret)
  6949:                 iret = nf90_def_var(hs%ncid, 'n3dsv', NF90_INT, varid=tempid)
  6950:                 CALL check_err(iret)
  6951:                 iret = nf90_def_var(hs%ncid, 'i3dsvrec', NF90_INT, varid=tempid)
  6952:                 CALL check_err(iret)
  6953:                 iret = nf90_def_var(hs%ncid, 'n3dst', NF90_INT, varid=tempid)
  6954:                 CALL check_err(iret)
  6955:                 iret = nf90_def_var(hs%ncid, 'i3dstrec', NF90_INT, varid=tempid)
  6956:                 CALL check_err(iret)
  6957:                 iret = nf90_def_var(hs%ncid, 'n3dgd', NF90_INT, varid=tempid)
  6958:                 CALL check_err(iret)
  6959:                 iret = nf90_def_var(hs%ncid, 'i3dgdrec', NF90_INT, varid=tempid)
  6960:                 CALL check_err(iret)
  6961:                 iret = nf90_def_var(hs%ncid, 'n3dgv', NF90_INT, varid=tempid)
  6962:                 CALL check_err(iret)
  6963:                 iret = nf90_def_var(hs%ncid, 'i3dgvrec', NF90_INT, varid=tempid)
  6964:                 CALL check_err(iret)
  6965:                 iret = nf90_def_var(hs%ncid, 'n3dgt', NF90_INT, varid=tempid)
  6966:                 CALL check_err(iret)
  6967:                 iret = nf90_def_var(hs%ncid, 'i3dgtrec', NF90_INT, varid=tempid)
  6968:                 CALL check_err(iret)
  6969:           C
  6970:           C
  6971:           C     Leave define mode
  6972:                 iret = nf90_enddef(hs%ncid)
  6973:                 CALL check_err(iret)
  6974:           C
  6975:           C     now close the initialized netcdf file
  6976:                 iret = nf90_close(hs%ncid)
  6977:                 CALL check_err(iret)
  6978:           C
  6979:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  6980:                 call allMessage(DEBUG,"Return.")
  6981:           #endif
  6982:                 call unsetMessageSource()
  6983:           C-----------------------------------------------------------------------
  6984:                 END SUBROUTINE initNetCDFHotstart3D


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART3D
INLINE LIST

  ROOT: NETCDFIO::INITNETCDFHOTSTART3D (netcdfio.F:6624)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:6641)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:6664)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6665)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_REDEF (netcdfio.F:6668)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6669)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:6672)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6677)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6679)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6681)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6683)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6684)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6686)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6691)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6693)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6695)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6697)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6698)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6700)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6705)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6707)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6709)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6711)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6712)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6714)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6719)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6721)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6723)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6725)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6726)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6728)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6733)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6737)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6739)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6740)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6742)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6747)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6749)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6751)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6753)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6754)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6756)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6761)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6763)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6765)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6767)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6768)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6770)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6779)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6781)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6783)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6785)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6786)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6788)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6791)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6794)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6796)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6798)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6799)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6801)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6804)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6807)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6809)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6811)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6812)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6814)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6822)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6825)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6827)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6829)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6830)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6832)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6834)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6837)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6839)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6841)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6842)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6844)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6846)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6849)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6851)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6853)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6854)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6856)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6863)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6866)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6868)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6871)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6873)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:6875)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6878)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:6880)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6882)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:6883)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6885)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6945)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6946)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6947)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6948)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6949)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6950)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6951)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6952)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6953)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6954)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6955)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6956)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6957)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6958)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6959)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6960)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6961)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6962)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6963)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6964)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6965)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6966)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:6967)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6968)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:6972)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6973)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:6976)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:6977)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:6982)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART3D
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:6680)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6680)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6680)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6680)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6681)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6681)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6694)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6694)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6694)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6694)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6695)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6695)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6708)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6708)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6708)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6708)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6709)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6709)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6722)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6722)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6722)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6722)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6723)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6723)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6736)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6736)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6737)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6737)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6750)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6750)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6750)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6750)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6751)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6751)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6764)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6764)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6764)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6764)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6765)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6765)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6782)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6782)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6782)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6782)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6783)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6783)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6795)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6795)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6796)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6796)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6808)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6808)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6809)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6809)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6826)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6826)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6826)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6826)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6827)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6827)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6838)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6838)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6838)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6838)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6839)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6839)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6850)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6850)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6850)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6850)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6851)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6851)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6867)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6867)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6867)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6867)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6868)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6868)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6879)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:6879)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6879)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:6879)
  LOOP END

  LOOP BEGIN: (netcdfio.F:6880)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:6880)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::INITNETCDFHOTSTART3D
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 42 [s0-s12 s15-s16 s18 s23-s42 s58-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2624 bytes
      Register spill area      :  216 bytes
      Parameter area           :  120 bytes
      Register save area       :  176 bytes
      User data area           : 2104 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:6680)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6680)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6681)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6694)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6694)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6695)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6708)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6708)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6709)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6722)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6722)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6723)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6736)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6736)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6737)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6750)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6750)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6751)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6764)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6764)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6765)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6782)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6782)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6783)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6795)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6796)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6808)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6809)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6826)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6826)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6827)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6838)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6838)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6839)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6850)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6850)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6851)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6867)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6867)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6868)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6879)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:6879)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:6880)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEPARAMETERWITHTEXT
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  7006: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  7010: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_SCALAR
  7011: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  7012: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
  7012: vec( 103): Unvectorized loop.
  7012: vec( 108): Unvectorizable loop structure.
  7014: vec( 103): Unvectorized loop.
  7014: vec( 108): Unvectorizable loop structure.
  7021: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEPARAMETERWITHTEXT
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  6994:                 SUBROUTINE defineParameterWithText(ncid, param, varType,
  6995:                &                                  longName, standardName)
  6996:                 IMPLICIT NONE
  6997:                 INTEGER, intent(in) :: ncid
  6998:                 CHARACTER(len=*), intent(in) :: param
  6999:                 INTEGER, intent(in) :: varType      ! netcdf-defined data type
  7000:                 CHARACTER(len=*), intent(in) :: longName
  7001:                 CHARACTER(len=*), intent(in) :: standardName
  7002:           C
  7003:                 INTEGER tempid  ! variable id for attaching to text
  7004:                 INTEGER iret   ! netcdf err indicator
  7005:           C
  7006:                 call setMessageSource("defineParameterWithText")
  7007:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7008:                 call allMessage(DEBUG,"Enter.")
  7009:           #endif
  7010:                 iret = nf90_def_var(ncid, param, varType, varid=tempid)
  7011:                 CALL check_err(iret)
  7012:                 iret = nf90_put_att(ncid, tempid, 'long_name', trim(longName))
  7013:                 CALL check_err(iret)
  7014:                 iret = nf90_put_att(ncid, tempid, 'standard_name',
  7015:                &       trim(standardName))
  7016:                 CALL check_err(iret)
  7017:           C
  7018:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7019:                 call allMessage(DEBUG,"Return.")
  7020:           #endif
  7021:                 call unsetMessageSource()
  7022:           C-----------------------------------------------------------------------
  7023:                 END SUBROUTINE defineParameterWithText


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEPARAMETERWITHTEXT
INLINE LIST

  ROOT: NETCDFIO::DEFINEPARAMETERWITHTEXT (netcdfio.F:6994)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7006)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:7010)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7011)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7012)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7013)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:7014)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7016)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7021)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEPARAMETERWITHTEXT
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:7012)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7012)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7014)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:53 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEPARAMETERWITHTEXT
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 28 [s0-s12 s15-s16 s23-s32 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 240 bytes
      Register spill area      :   0 bytes
      Parameter area           :  48 bytes
      Register save area       : 176 bytes
      User data area           :  16 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:7012)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7014)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  7067: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  7082: vec( 103): Unvectorized loop.
  7082: vec( 108): Unvectorizable loop structure.
  7082: vec( 118): Unvectorizable data type.: %FILENAME
  7083: inl(1212): Source for routine not found.: GLOBAL::LOGMESSAGE
  7083: vec( 103): Unvectorized loop.
  7083: vec( 108): Unvectorizable loop structure.
  7086: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  7087: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  7090: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
 10734: inl(1212): Source for routine not found.: NETCDF::NF90_REDEF
 10736: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10740: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT
 10744: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
 10770: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
  7104: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  7108: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  7164: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT
  7230: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_FOURBYTEINT
  7314: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE
  7320: inl(1222): Inlined: NETCDFIO::UPDATEMETADATA


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  7032:                 SUBROUTINE writeNetCDFHotstart(lun, Elev1Descript,
  7033:                &        Elev2Descript, VelDescript, CH1Descript, EtaDiscDescript,
  7034:                &        NodeCodeDescript, NOFFDescript, H1_HS_Descript,
  7035:                &        H2_HS_Descript, timesec, it )
  7036:                 USE SIZES, ONLY : globaldir, mnproc
  7037:                 USE GLOBAL, ONLY : OutputDataDescript_t,
  7038:                &                   im, iestp, nscoue, ivstp, imhs,
  7039:                &                   nscouv, icstp, nscouc, ipstp, iwstp, nscoum,
  7040:                &                   igep, nscouge, igvp, nscougv, igcp, nscougc,
  7041:                &                   igpp, igwp, nscougw
  7042:                 IMPLICIT NONE
  7043:           C
  7044:                 INTEGER, intent(in) :: lun
  7045:                 type(OutputDataDescript_t), intent(in) :: Elev1Descript
  7046:                 type(OutputDataDescript_t), intent(in) :: Elev2Descript
  7047:                 type(OutputDataDescript_t), intent(in) :: VelDescript
  7048:                 type(OutputDataDescript_t), intent(in) :: CH1Descript
  7049:                 type(OutputDataDescript_t), intent(in) :: EtaDiscDescript
  7050:                 type(OutputDataDescript_t), intent(in) :: NodeCodeDescript
  7051:                 type(OutputDataDescript_t), intent(in) :: NOFFDescript
  7052:           
  7053:                 type(OutputDataDescript_t), intent(in) :: H1_HS_Descript
  7054:                 type(OutputDataDescript_t), intent(in) :: H2_HS_Descript
  7055:           
  7056:                 REAL(8), intent(in) :: timesec
  7057:                 INTEGER, intent(in) :: it   ! current ADCIRC time step
  7058:           C
  7059:                 INTEGER i,j
  7060:                 INTEGER counti(1), starti(1), n
  7061:                 INTEGER kount(2), start(2) ! for nodally based data
  7062:                 INTEGER elekount(2) ! for elementally based data
  7063:                 INTEGER iret ! success or failure of the netcdf call
  7064:                 INTEGER tempid
  7065:                 CHARACTER(len=10) :: fext
  7066:           C
  7067:                 call setMessageSource("writeNetCDFHotstart")
  7068:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7069:                 call allMessage(DEBUG,"Enter.")
  7070:           #endif
  7071:           C
  7072:           C     Point to the hotstart file we want to work on
  7073:                 IF (lun.eq.67) THEN
  7074:                    hs => hs67
  7075:                 ELSE
  7076:                    hs => hs68
  7077:                 ENDIF
  7078:                 hs%myMesh => adcircMesh
  7079:           C
  7080:                 ! create file name
  7081:                 write(fext,'(i0)') lun
  7082: +======>        hs%myFile%filename = trim(globaldir)//'/fort.'//trim(fext)//'.nc'
  7083:                 call logMessage(INFO,'Opening hotstart file "'
  7084:                &    //trim(hs%myFile%filename)//'" for writing.')
  7085:           C
  7086:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  7087:                 CALL check_err(iret)
  7088:           !
  7089:           !     Inquire variables
  7090:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  7091:                 IF (hs%myTime%initialized.eqv..false.) THEN
  7092:                    ALLOCATE(hs%myTime%timenc(hs%myTime%timenc_len))
  7093:                    hs%myTime%initialized = .true.
  7094:                 ENDIF
  7095:           C
  7096:           C
  7097:           C     Don't increment the record counter so that we can store data at the
  7098:           C     next location in the netcdf file -- the hotstart file is only intended
  7099:           C     to have a single snapshot of data in it.
  7100:           C      hs%myFile%record_counter = hs%myFile%record_counter + 1
  7101:                 hs%myFile%record_counter = 1
  7102:           !
  7103:           !     Store time
  7104:                 iret=nf90_inq_varid(hs%ncid,"time",hs%myTime%timenc_id)
  7105:                 starti(1)=hs%myFile%record_counter
  7106:                 counti(1)=hs%myTime%timenc_len
  7107:                 hs%myTime%timenc(hs%myTime%timenc_len)=timesec
  7108:                 iret = nf90_put_var(hs%ncid, hs%myTime%timenc_id,hs%myTime%timenc,
  7109:                &       starti, counti)
  7110:                 CALL check_err(iret)
  7111:           
  7112:           C
  7113:                 kount(1)=hs%myMesh%num_nodes
  7114:                 kount(2)=hs%myTime%timenc_len
  7115:                 elekount(1)=hs%myMesh%num_elems
  7116:                 elekount(2)=kount(2)
  7117:                 start(1)=1
  7118:                 start(2)=hs%myFile%record_counter
  7119:           C
  7120:           C     Get the NetCDF IDs of the relevant variables from the file
  7121:                 iret=nf90_inq_varid(hs%ncid,"zeta1",hs%zeta1%nodal_data_id)
  7122:                 CALL check_err(iret)
  7123:                 iret=nf90_inq_varid(hs%ncid,"zeta2",hs%zeta2%nodal_data_id)
  7124:                 CALL check_err(iret)
  7125:                 iret=nf90_inq_varid(hs%ncid,"zetad",hs%zetad%nodal_data_id)
  7126:                 CALL check_err(iret)
  7127:                 iret=nf90_inq_varid(hs%ncid,"u-vel",hs%vel%u_nodal_data_id)
  7128:                 CALL check_err(iret)
  7129:                 iret=nf90_inq_varid(hs%ncid,"v-vel",hs%vel%v_nodal_data_id)
  7130:                 CALL check_err(iret)
  7131:                 iret=nf90_inq_varid(hs%ncid,"nodecode",hs%nodecodenc%nodal_data_id)
  7132:                 CALL check_err(iret)
  7133:                 iret=nf90_inq_varid(hs%ncid,"noff",hs%noffnc%nodal_data_id)
  7134:                 CALL check_err(iret)
  7135:           
  7136:                 hs%have_htot1 = .true. ;
  7137:                 iret=nf90_inq_varid(hs%ncid,"h1",hs%htot1%nodal_data_id)
  7138:                 if ( iret /= NF90_NOERR ) hs%have_htot1 = .false. ;
  7139:                 ! CALL check_err(iret)
  7140:           
  7141:                 hs%have_htot2 = .true. ;
  7142:                 iret=nf90_inq_varid(hs%ncid,"h2",hs%htot2%nodal_data_id)
  7143:                 if ( iret /= NF90_NOERR ) hs%have_htot2 = .false. ;
  7144:                 ! CALL check_err(iret)
  7145:            
  7146:           C
  7147:           C     Write the nodal data to the netcdf file
  7148:                 IF (MNPROC.eq.1) THEN
  7149:                    iret = nf90_put_var(hs%ncid, hs%zeta1%nodal_data_id,
  7150:                &       Elev1Descript%array, start, kount)
  7151:                    CALL check_err(iret)
  7152:                    iret = nf90_put_var(hs%ncid, hs%zeta2%nodal_data_id,
  7153:                &      Elev2Descript%array, start, kount)
  7154:                    CALL check_err(iret)
  7155:                    iret = nf90_put_var(hs%ncid, hs%zetad%nodal_data_id,
  7156:                &       EtaDiscDescript%array, start, kount)
  7157:                    CALL check_err(iret)
  7158:                    iret = nf90_put_var(hs%ncid, hs%vel%u_nodal_data_id,
  7159:                &       VelDescript%array, start, kount)
  7160:                    CALL check_err(iret)
  7161:                    iret = nf90_put_var(hs%ncid, hs%vel%v_nodal_data_id,
  7162:                &      VelDescript%array2, start, kount)
  7163:                    CALL check_err(iret)
  7164:                    iret = nf90_put_var(hs%ncid, hs%nodecodenc%nodal_data_id,
  7165:                &      NodeCodeDescript%iarray, start, kount)
  7166:                    CALL check_err(iret)
  7167:           
  7168:                    !------ H1, H2
  7169:                    if ( hs%have_htot2 ) then
  7170:                      iret = nf90_put_var(hs%ncid, hs%htot2%nodal_data_id,
  7171:                &        H2_HS_Descript%array, start, kount)
  7172:                      CALL check_err(iret)
  7173:                    endif
  7174:           
  7175:                    if ( hs%have_htot1 ) then
  7176:                      iret = nf90_put_var(hs%ncid, hs%htot1%nodal_data_id,
  7177:                &        H1_HS_Descript%array, start, kount)
  7178:                      CALL check_err(iret)
  7179:                    endif
  7180:           
  7181:                    iret = nf90_put_var(hs%ncid, hs%noffnc%nodal_data_id,
  7182:                &       NOFFDescript%iarray, start, elekount)
  7183:                    CALL check_err(iret)
  7184:           
  7185:                 ELSE
  7186:                    iret = nf90_put_var(hs%ncid, hs%zeta1%nodal_data_id,
  7187:                &       Elev1Descript%array_g, start, kount)
  7188:                    CALL check_err(iret)
  7189:                    iret = nf90_put_var(hs%ncid, hs%zeta2%nodal_data_id,
  7190:                &      Elev2Descript%array_g, start, kount)
  7191:                    CALL check_err(iret)
  7192:                    iret = nf90_put_var(hs%ncid, hs%zetad%nodal_data_id,
  7193:                &       EtaDiscDescript%array_g, start, kount)
  7194:                    CALL check_err(iret)
  7195:                    iret = nf90_put_var(hs%ncid, hs%vel%u_nodal_data_id,
  7196:                &       VelDescript%array_g, start, kount)
  7197:                    CALL check_err(iret)
  7198:                    iret = nf90_put_var(hs%ncid, hs%vel%v_nodal_data_id,
  7199:                &      VelDescript%array2_g, start, kount)
  7200:                    CALL check_err(iret)
  7201:                    iret = nf90_put_var(hs%ncid, hs%nodecodenc%nodal_data_id,
  7202:                &      NodeCodeDescript%iarray_g, start, kount)
  7203:                    CALL check_err(iret)
  7204:           
  7205:                    ! H1, H2
  7206:                    if ( hs%have_htot2 ) then
  7207:                      iret = nf90_put_var(hs%ncid, hs%htot2%nodal_data_id,
  7208:                &       H2_HS_Descript%array_g, start, kount)
  7209:                      CALL check_err(iret)
  7210:                    endif
  7211:           
  7212:                    if ( hs%have_htot1 ) then
  7213:                      iret = nf90_put_var(hs%ncid, hs%htot1%nodal_data_id,
  7214:                &       H1_HS_Descript%array_g, start, kount)
  7215:                      CALL check_err(iret)
  7216:                    endif
  7217:           
  7218:                    iret = nf90_put_var(hs%ncid, hs%noffnc%nodal_data_id,
  7219:                &       NOFFDescript%iarray_g, start, elekount)
  7220:                    CALL check_err(iret)
  7221:           
  7222:                 ENDIF
  7223:           
  7224:           C
  7225:           C     Get each variable ID for the model parameters in the netcdf file
  7226:           C     and immediately write the parameter value to that variable ID before
  7227:           C     going on to the next one.
  7228:                 iret = nf90_inq_varid(hs%ncid,"imhs",tempid)
  7229:                 CALL check_err(iret)
  7230:                 iret = nf90_put_var(hs%ncid, tempid, im)
  7231:                 CALL check_err(iret)
  7232:                 iret = nf90_inq_varid(hs%ncid,"iths",tempid)
  7233:                 CALL check_err(iret)
  7234:                 iret = nf90_put_var(hs%ncid, tempid, it)
  7235:                 CALL check_err(iret)
  7236:                 iret = nf90_inq_varid(hs%ncid,"iestp",tempid)
  7237:                 CALL check_err(iret)
  7238:                 iret = nf90_put_var(hs%ncid, tempid, iestp)
  7239:                 CALL check_err(iret)
  7240:                 iret = nf90_inq_varid(hs%ncid,"nscoue",tempid)
  7241:                 CALL check_err(iret)
  7242:                 iret = nf90_put_var(hs%ncid, tempid, nscoue)
  7243:                 CALL check_err(iret)
  7244:                 iret = nf90_inq_varid(hs%ncid,"ivstp",tempid)
  7245:                 CALL check_err(iret)
  7246:                 iret = nf90_put_var(hs%ncid, tempid, ivstp)
  7247:                 CALL check_err(iret)
  7248:                 iret = nf90_inq_varid(hs%ncid,"nscouv",tempid)
  7249:                 CALL check_err(iret)
  7250:                 iret = nf90_put_var(hs%ncid, tempid, nscouv)
  7251:                 CALL check_err(iret)
  7252:                 IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  7253:                    iret = nf90_inq_varid(hs%ncid,"icstp",tempid)
  7254:                    CALL check_err(iret)
  7255:                    iret = nf90_put_var(hs%ncid, tempid, icstp)
  7256:                    CALL check_err(iret)
  7257:                    iret = nf90_inq_varid(hs%ncid,"nscouc",tempid)
  7258:                    CALL check_err(iret)
  7259:                    iret = nf90_put_var(hs%ncid, tempid, nscouc)
  7260:                    CALL check_err(iret)
  7261:                 ENDIF
  7262:                 iret = nf90_inq_varid(hs%ncid,"ipstp",tempid)
  7263:                 CALL check_err(iret)
  7264:                 iret = nf90_put_var(hs%ncid, tempid, ipstp)
  7265:                 CALL check_err(iret)
  7266:                 iret = nf90_inq_varid(hs%ncid,"iwstp",tempid)
  7267:                 CALL check_err(iret)
  7268:                 iret = nf90_put_var(hs%ncid, tempid, iwstp)
  7269:                 CALL check_err(iret)
  7270:                 iret = nf90_inq_varid(hs%ncid,"nscoum",tempid)
  7271:                 CALL check_err(iret)
  7272:                 iret = nf90_put_var(hs%ncid, tempid, nscoum)
  7273:                 CALL check_err(iret)
  7274:                 iret = nf90_inq_varid(hs%ncid,"igep",tempid)
  7275:                 CALL check_err(iret)
  7276:                 iret = nf90_put_var(hs%ncid, tempid, igep)
  7277:                 CALL check_err(iret)
  7278:                 iret = nf90_inq_varid(hs%ncid,"nscouge",tempid)
  7279:                 CALL check_err(iret)
  7280:                 iret = nf90_put_var(hs%ncid, tempid, nscouge)
  7281:                 CALL check_err(iret)
  7282:                 iret = nf90_inq_varid(hs%ncid,"igvp",tempid)
  7283:                 CALL check_err(iret)
  7284:                 iret = nf90_put_var(hs%ncid, tempid, igvp)
  7285:                 CALL check_err(iret)
  7286:                 iret = nf90_inq_varid(hs%ncid,"nscougv",tempid)
  7287:                 CALL check_err(iret)
  7288:                 iret = nf90_put_var(hs%ncid, tempid, nscougv)
  7289:                 CALL check_err(iret)
  7290:                 IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  7291:                    iret = nf90_inq_varid(hs%ncid,"igcp",tempid)
  7292:                    CALL check_err(iret)
  7293:                    iret = nf90_put_var(hs%ncid, tempid, igcp)
  7294:                    CALL check_err(iret)
  7295:                    iret = nf90_inq_varid(hs%ncid,"nscougc",tempid)
  7296:                    CALL check_err(iret)
  7297:                    iret = nf90_put_var(hs%ncid, tempid, nscougc)
  7298:                    CALL check_err(iret)
  7299:                 ENDIF
  7300:                 iret = nf90_inq_varid(hs%ncid,"igpp",tempid)
  7301:                 CALL check_err(iret)
  7302:                 iret = nf90_put_var(hs%ncid, tempid, igpp)
  7303:                 CALL check_err(iret)
  7304:                 iret = nf90_inq_varid(hs%ncid,"igwp",tempid)
  7305:                 CALL check_err(iret)
  7306:                 iret = nf90_put_var(hs%ncid, tempid, igwp)
  7307:                 CALL check_err(iret)
  7308:                 iret = nf90_inq_varid(hs%ncid,"nscougw",tempid)
  7309:                 CALL check_err(iret)
  7310:                 iret = nf90_put_var(hs%ncid, tempid, nscougw)
  7311:                 CALL check_err(iret)
  7312:           C
  7313:           C     now close the netcdf file
  7314:                 iret = nf90_close(hs%ncid)
  7315:                 CALL check_err(iret)
  7316:                 !
  7317:                 ! jgf52.17: If we started with this hotstart file, the
  7318:                 ! metadata still reflects the fort.15 from the previous run,
  7319:                 ! instead of this one, so we need to update it.
  7320:         I       CALL updateMetaData(hs%ncid,hs%myFile)
  7321:           
  7322:           C
  7323:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7324:                 call allMessage(DEBUG,"Return.")
  7325:           #endif
  7326:                 call unsetMessageSource()
  7327:           C-----------------------------------------------------------------------
  7328:                 END SUBROUTINE writeNetCDFHotstart


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART
INLINE LIST

  ROOT: NETCDFIO::WRITENETCDFHOTSTART (netcdfio.F:7032)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7067)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::LOGMESSAGE (netcdfio.F:7083)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:7086)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7087)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:7090)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7104)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7108)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7110)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7121)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7122)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7123)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7124)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7125)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7126)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7127)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7128)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7129)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7130)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7131)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7132)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7133)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7134)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7137)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7142)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7149)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7151)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7152)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7154)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7155)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7157)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7158)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7160)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7161)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7163)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:7164)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7166)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7170)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7172)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7176)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7178)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:7181)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7183)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7186)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7188)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7189)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7191)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7192)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7194)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7195)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7197)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7198)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7200)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:7201)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7203)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7207)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7209)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7213)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7215)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:7218)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7220)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7228)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7229)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7230)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7231)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7232)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7233)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7234)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7235)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7236)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7237)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7238)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7239)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7240)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7241)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7242)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7243)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7244)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7245)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7246)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7247)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7248)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7249)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7250)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7251)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7253)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7254)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7255)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7256)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7257)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7258)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7259)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7260)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7262)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7263)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7264)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7265)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7266)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7267)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7268)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7269)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7270)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7271)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7272)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7273)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7274)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7275)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7276)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7277)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7278)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7279)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7280)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7281)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7282)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7283)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7284)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7285)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7286)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7287)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7288)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7289)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7291)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7292)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7293)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7294)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7295)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7296)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7297)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7298)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7300)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7301)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7302)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7303)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7304)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7305)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7306)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7307)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7308)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7309)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7310)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7311)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:7314)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7315)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::UPDATEMETADATA (netcdfio.F:7320)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10726)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:10731)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10732)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_REDEF (netcdfio.F:10734)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10735)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10736)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10737)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10738)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10739)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10740)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10741)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10742)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10743)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10744)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10745)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10746)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10747)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10748)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10749)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10750)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10751)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10752)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10753)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10754)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10755)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10756)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10757)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10758)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10759)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10760)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10761)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10767)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10769)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:10770)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10771)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:10773)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10774)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10778)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7326)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:7082)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7082)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7082)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7082)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7082)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:7082)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7082)
    <Unvectorized loop.>
    *** Unvectorizable data type. : %FILENAME (netcdfio.F:7082)
  LOOP END

  LOOP BEGIN: (netcdfio.F:7083)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:7083)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNDES (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNID (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 50 [s0-s12 s15-s16 s18-s44 s56-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 7184 bytes
      Register spill area      :  480 bytes
      Parameter area           :   80 bytes
      Register save area       :  176 bytes
      User data area           : 6448 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:7082)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7082)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:7082)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:7082)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:7083)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONIC
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  7362: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  7374: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  7375: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  7378: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  7414: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  7440: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL
  7506: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_FOURBYTEINT
  7554: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_EIGHTBYTEREAL
  7573: vec( 103): Unvectorized loop.
  7573: vec( 110): Vectorization obstructive procedure reference.: NETCDF::NF90_PUT_VAR_TEXT
  7573: vec( 110): Vectorization obstructive procedure reference.: NETCDF_ERROR::CHECK_ERR
  7578: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_TEXT
  7589: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  7601: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONIC
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  7337:                 SUBROUTINE writeNetCDFHotstartHarmonic(lun,
  7338:                &            GLOELVDescript, STAELVDescript,
  7339:                &            GLOULVDescript, GLOVLVDescript,
  7340:                &            STAULVDescript, STAVLVDescript)
  7341:                 USE SIZES, ONLY : MNHARF, MNPROC, globaldir
  7342:                 USE GLOBAL, ONLY : OutputDataDescript_t, NSTAE_G, NSTAV_G
  7343:                 USE HARM, ONLY : nz, nf, mm, nhase, nhasv, nhage, nhagv, icall,
  7344:                &                 nfreq, timeud, itud, namefr, hafreq, haff,
  7345:                &                 haface, ha, icha
  7346:                 IMPLICIT NONE
  7347:           C
  7348:                 INTEGER, intent(in) :: lun
  7349:                 type(OutputDataDescript_t), intent(in) :: GLOELVDescript
  7350:                 type(OutputDataDescript_t), intent(in) :: STAELVDescript
  7351:                 type(OutputDataDescript_t), intent(in) :: GLOULVDescript
  7352:                 type(OutputDataDescript_t), intent(in) :: GLOVLVDescript
  7353:                 type(OutputDataDescript_t), intent(in) :: STAULVDescript
  7354:                 type(OutputDataDescript_t), intent(in) :: STAVLVDescript
  7355:           C
  7356:                 INTEGER i,j
  7357:                 INTEGER kount(3), start(3) ! for nodally based data
  7358:                 INTEGER hakount(2), hastart(2) ! for lhs
  7359:                 INTEGER iret ! success or failure of the netcdf call
  7360:                 INTEGER tempid
  7361:           C
  7362:                 call setMessageSource("writeNetCDFHotstartHarmonic")
  7363:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7364:                 call allMessage(DEBUG,"Enter.")
  7365:           #endif
  7366:           C
  7367:           C     Point to the hotstart file we want to work on
  7368:                 IF (lun.eq.67) THEN
  7369:                    hs => hs67
  7370:                 ELSE
  7371:                    hs => hs68
  7372:                 ENDIF
  7373:           C
  7374:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  7375:                 CALL check_err(iret)
  7376:           !
  7377:           !     Inquire variables (time)
  7378:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  7379:           
  7380:                 IF (NHASE.ne.0) THEN
  7381:           C        elevation station dimension
  7382:                    iret=nf90_inq_dimid(hs%ncid,"elevstation",
  7383:                &        hs%staelv%num_sta_dim_id)
  7384:                    CALL check_err(iret)
  7385:                    iret=nf90_inquire_dimension(hs%ncid,hs%staelv%num_sta_dim_id,
  7386:                &        len=hs%staelv%num_stations)
  7387:                    CALL check_err(iret)
  7388:                 ENDIF
  7389:                 IF (NHASV.ne.0) THEN
  7390:           C        velocity station dimension
  7391:                    iret=nf90_inq_dimid(hs%ncid,"velstation",
  7392:                &        hs%stavellv%num_sta_dim_id)
  7393:                    CALL check_err(iret)
  7394:                    iret=nf90_inquire_dimension(hs%ncid,hs%stavellv%num_sta_dim_id,
  7395:                &        len=hs%stavellv%num_stations)
  7396:                    CALL check_err(iret)
  7397:                 ENDIF
  7398:           C
  7399:           C
  7400:           C     Don't increment the record counter so that we can store data at the
  7401:           C     next location in the netcdf file -- the hotstart file is only intended
  7402:           C     to have a single snapshot of data in it.
  7403:                 hs%myFile%record_counter = 1
  7404:           C
  7405:                 kount(1)=MNHARF*2             ! for load vector data
  7406:                 kount(2)=hs%myMesh%num_nodes  ! for nodal data
  7407:                 kount(3)=hs%myTime%timenc_len
  7408:                 start(1)=1
  7409:                 start(2)=1
  7410:                 start(3)=hs%myFile%record_counter
  7411:           C
  7412:           C     Get the NetCDF IDs of the relevant variables from the file
  7413:                 IF (NHAGE.ne.0) THEN
  7414:                    iret=nf90_inq_varid(hs%ncid,"gloelv",hs%gloelv%nodal_data_id)
  7415:                    CALL check_err(iret)
  7416:                 ENDIF
  7417:                 IF (NHASE.ne.0) THEN
  7418:                    iret=nf90_inq_varid(hs%ncid,"staelv",hs%staelv%station_data_id)
  7419:                    CALL check_err(iret)
  7420:                 ENDIF
  7421:                 IF (NHAGV.ne.0) THEN
  7422:                  iret=nf90_inq_varid(hs%ncid,"gloulv",hs%glovellv%u_nodal_data_id)
  7423:                  CALL check_err(iret)
  7424:                  iret=nf90_inq_varid(hs%ncid,"glovlv",hs%glovellv%v_nodal_data_id)
  7425:                  CALL check_err(iret)
  7426:                 ENDIF
  7427:                 IF (NHASV.ne.0) THEN
  7428:                    iret=nf90_inq_varid(hs%ncid,"staulv",
  7429:                &                     hs%stavellv%u_station_data_id)
  7430:                    CALL check_err(iret)
  7431:                    iret=nf90_inq_varid(hs%ncid,"stavlv",
  7432:                &                     hs%stavellv%v_station_data_id)
  7433:                    CALL check_err(iret)
  7434:                 ENDIF
  7435:           C
  7436:           C     Write the nodal data to the netcdf file
  7437:                 IF (MNPROC.eq.1) THEN
  7438:                    IF (NHAGE.ne.0) THEN
  7439:                       kount(2)=hs%myMesh%num_nodes  ! for nodal data
  7440:                       iret = nf90_put_var(hs%ncid, hs%gloelv%nodal_data_id,
  7441:                &          GLOELVDescript%array2D, start, kount)
  7442:                       CALL check_err(iret)
  7443:                    ENDIF
  7444:                    IF (NHASE.ne.0) THEN
  7445:                       kount(2) = hs%staelv%num_stations ! for elevation stations
  7446:                       iret = nf90_put_var(hs%ncid, hs%staelv%station_data_id,
  7447:                &         STAELVDescript%array2D, start, kount)
  7448:                       CALL check_err(iret)
  7449:                    ENDIF
  7450:                    IF (NHAGV.ne.0) THEN
  7451:                       kount(2)=hs%myMesh%num_nodes  ! for nodal data
  7452:                       iret = nf90_put_var(hs%ncid, hs%glovellv%u_nodal_data_id,
  7453:                &          GLOULVDescript%array2D, start, kount)
  7454:                       CALL check_err(iret)
  7455:                       iret = nf90_put_var(hs%ncid, hs%glovellv%v_nodal_data_id,
  7456:                &          GLOVLVDescript%array2D, start, kount)
  7457:                       CALL check_err(iret)
  7458:                    ENDIF
  7459:                    IF (NHASV.ne.0) THEN
  7460:                       kount(2) = hs%stavellv%num_stations ! for velocity stations
  7461:                       iret = nf90_put_var(hs%ncid, hs%stavellv%u_station_data_id,
  7462:                &          STAULVDescript%array2D, start, kount)
  7463:                       CALL check_err(iret)
  7464:                       iret = nf90_put_var(hs%ncid, hs%stavellv%v_station_data_id,
  7465:                &          STAVLVDescript%array2D, start, kount)
  7466:                       CALL check_err(iret)
  7467:                    ENDIF
  7468:                 ELSE
  7469:                    IF (NHAGE.ne.0) THEN
  7470:                       kount(2)=hs%myMesh%num_nodes  ! for nodal data
  7471:                       iret = nf90_put_var(hs%ncid, hs%gloelv%nodal_data_id,
  7472:                &          GLOELVDescript%array2D_g, start, kount)
  7473:                       CALL check_err(iret)
  7474:                    ENDIF
  7475:                    IF (NHASE.ne.0) THEN
  7476:                       kount(2) = hs%staelv%num_stations ! for elevation stations
  7477:                       iret = nf90_put_var(hs%ncid, hs%staelv%station_data_id,
  7478:                &         STAELVDescript%array2D_g, start, kount)
  7479:                       CALL check_err(iret)
  7480:                    ENDIF
  7481:                    IF (NHAGV.ne.0) THEN
  7482:                       kount(2)=hs%myMesh%num_nodes  ! for nodal data
  7483:                       iret = nf90_put_var(hs%ncid, hs%glovellv%u_nodal_data_id,
  7484:                &          GLOULVDescript%array2D_g, start, kount)
  7485:                       CALL check_err(iret)
  7486:                       iret = nf90_put_var(hs%ncid, hs%glovellv%v_nodal_data_id,
  7487:                &          GLOVLVDescript%array2D_g, start, kount)
  7488:                       CALL check_err(iret)
  7489:                    ENDIF
  7490:                    IF (NHASV.ne.0) THEN
  7491:                       kount(2) = hs%stavellv%num_stations ! for velocity stations
  7492:                       iret = nf90_put_var(hs%ncid, hs%stavellv%u_station_data_id,
  7493:                &          STAULVDescript%array2D_g, start, kount)
  7494:                       CALL check_err(iret)
  7495:                       iret = nf90_put_var(hs%ncid, hs%stavellv%v_station_data_id,
  7496:                &          STAVLVDescript%array2D_g, start, kount)
  7497:                       CALL check_err(iret)
  7498:                    ENDIF
  7499:                 ENDIF
  7500:           C
  7501:           C     Get each variable ID for the model parameters in the netcdf file
  7502:           C     and immediately write the parameter value to that variable ID before
  7503:           C     going on to the next one.
  7504:                 iret = nf90_inq_varid(hs%ncid,"icha", tempid)
  7505:                 CALL check_err(iret)
  7506:                 iret = nf90_put_var(hs%ncid, tempid, icha)
  7507:                 CALL check_err(iret)
  7508:                 iret = nf90_inq_varid(hs%ncid,"nz", tempid)
  7509:                 CALL check_err(iret)
  7510:                 iret = nf90_put_var(hs%ncid, tempid, nz)
  7511:                 CALL check_err(iret)
  7512:                 iret = nf90_inq_varid(hs%ncid,"nf", tempid)
  7513:                 CALL check_err(iret)
  7514:                 iret = nf90_put_var(hs%ncid, tempid, nf)
  7515:                 CALL check_err(iret)
  7516:                 iret = nf90_inq_varid(hs%ncid,"mm", tempid)
  7517:                 CALL check_err(iret)
  7518:                 iret = nf90_put_var(hs%ncid, tempid, mm)
  7519:                 CALL check_err(iret)
  7520:                 iret = nf90_inq_varid(hs%ncid,"nstae", tempid)
  7521:                 CALL check_err(iret)
  7522:                 iret = nf90_put_var(hs%ncid, tempid, nstae_g)
  7523:                 CALL check_err(iret)
  7524:                 iret = nf90_inq_varid(hs%ncid,"nstav", tempid)
  7525:                 CALL check_err(iret)
  7526:                 iret = nf90_put_var(hs%ncid, tempid, nstav_g)
  7527:                 CALL check_err(iret)
  7528:                 iret = nf90_inq_varid(hs%ncid,"nhase", tempid)
  7529:                 CALL check_err(iret)
  7530:                 iret = nf90_put_var(hs%ncid, tempid, nhase)
  7531:                 CALL check_err(iret)
  7532:                 iret = nf90_inq_varid(hs%ncid,"nhasv", tempid)
  7533:                 CALL check_err(iret)
  7534:                 iret = nf90_put_var(hs%ncid, tempid, nhasv)
  7535:                 CALL check_err(iret)
  7536:                 iret = nf90_inq_varid(hs%ncid,"nhage", tempid)
  7537:                 CALL check_err(iret)
  7538:                 iret = nf90_put_var(hs%ncid, tempid, nhage)
  7539:                 CALL check_err(iret)
  7540:                 iret = nf90_inq_varid(hs%ncid,"nhagv", tempid)
  7541:                 CALL check_err(iret)
  7542:                 iret = nf90_put_var(hs%ncid, tempid, nhagv)
  7543:                 CALL check_err(iret)
  7544:                 iret = nf90_inq_varid(hs%ncid,"icall", tempid)
  7545:                 CALL check_err(iret)
  7546:                 iret = nf90_put_var(hs%ncid, tempid, icall)
  7547:                 CALL check_err(iret)
  7548:                 iret = nf90_inq_varid(hs%ncid,"nfreq", tempid)
  7549:                 CALL check_err(iret)
  7550:                 iret = nf90_put_var(hs%ncid, tempid, nfreq)
  7551:                 CALL check_err(iret)
  7552:                 iret = nf90_inq_varid(hs%ncid,"timeud", tempid)
  7553:                 CALL check_err(iret)
  7554:                 iret = nf90_put_var(hs%ncid, tempid, timeud)
  7555:                 CALL check_err(iret)
  7556:                 iret = nf90_inq_varid(hs%ncid,"itud", tempid)
  7557:                 CALL check_err(iret)
  7558:                 iret = nf90_put_var(hs%ncid, tempid, itud)
  7559:                 CALL check_err(iret)
  7560:           C
  7561:           C     left hand side
  7562:                 hakount(1) = 2*MNHARF
  7563:                 hakount(2) = 2*MNHARF
  7564:                 hastart(1) = 1
  7565:                 hastart(2) = 1
  7566:                 iret = nf90_inq_varid(hs%ncid,"ha",hs%ha_id)
  7567:                 CALL check_err(iret)
  7568:                 iret = nf90_put_var(hs%ncid, hs%ha_id, ha, hastart, hakount)
  7569:                 CALL check_err(iret)
  7570:           C     frequency names
  7571:                 iret = nf90_inq_varid(hs%ncid,"namefr",hs%namefr_id)
  7572:                 CALL check_err(iret)
  7573: +------>        do i=1,mnharf
  7574: |                  start(1)=1
  7575: |                  start(2)=i
  7576: |                  kount(1)= len(namefr(i))
  7577: |                  kount(2)=1
  7578: |                  iret = nf90_put_var(hs%ncid, hs%namefr_id, namefr(i),
  7579: |              &       start, kount)
  7580: |                  CALL check_err(iret)
  7581: +------         end do
  7582:           C     harmonic constituents
  7583:                 start(1) = 1
  7584:                 start(2) = 1
  7585:                 kount(1) = MNHARF ! for constituents
  7586:                 kount(2) = 1
  7587:                 iret = nf90_inq_varid(hs%ncid,"hafreq",hs%hafreq_id)
  7588:                 CALL check_err(iret)
  7589:                 iret = nf90_put_var(hs%ncid, hs%hafreq_id, hafreq, start, kount)
  7590:                 CALL check_err(iret)
  7591:                 iret = nf90_inq_varid(hs%ncid,"haff",hs%haff_id)
  7592:                 CALL check_err(iret)
  7593:                 iret = nf90_put_var(hs%ncid, hs%haff_id, haff, start, kount)
  7594:                 CALL check_err(iret)
  7595:                 iret = nf90_inq_varid(hs%ncid,"haface",hs%haface_id)
  7596:                 CALL check_err(iret)
  7597:                 iret = nf90_put_var(hs%ncid, hs%haface_id, haface, start, kount)
  7598:                 CALL check_err(iret)
  7599:           C
  7600:           C     now close the netcdf file
  7601:                 iret = nf90_close(hs%ncid)
  7602:                 CALL check_err(iret)
  7603:           C
  7604:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7605:                 call allMessage(DEBUG,"Return.")
  7606:           #endif
  7607:                 call unsetMessageSource()
  7608:           C-----------------------------------------------------------------------
  7609:                 END SUBROUTINE writeNetCDFHotstartHarmonic


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONIC
INLINE LIST

  ROOT: NETCDFIO::WRITENETCDFHOTSTARTHARMONIC (netcdfio.F:7337)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7362)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:7374)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7375)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:7378)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:7382)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7384)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:7385)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7387)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:7391)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7393)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:7394)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7396)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7414)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7415)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7418)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7419)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7422)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7423)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7424)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7425)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7428)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7430)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7431)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7433)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7440)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7442)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7446)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7448)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7452)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7454)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7455)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7457)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7461)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7463)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7464)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7466)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7471)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7473)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7477)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7479)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7483)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7485)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7486)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7488)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7492)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7494)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7495)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7497)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7504)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7505)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7506)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7507)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7508)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7509)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7510)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7511)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7512)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7513)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7514)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7515)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7516)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7517)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7518)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7519)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7520)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7521)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7522)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7523)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7524)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7525)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7526)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7527)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7528)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7529)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7530)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7531)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7532)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7533)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7534)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7535)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7536)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7537)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7538)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7539)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7540)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7541)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7542)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7543)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7544)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7545)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7546)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7547)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7548)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7549)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7550)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7551)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7552)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7553)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_EIGHTBYTEREAL (netcdfio.F:7554)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7555)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7556)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7557)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7558)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7559)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7566)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7567)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:7568)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7569)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7571)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7572)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_TEXT (netcdfio.F:7578)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7580)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7587)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7588)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7589)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7590)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7591)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7592)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7593)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7594)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7595)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7596)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7597)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7598)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:7601)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7602)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7607)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONIC
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:7573)
    <Unvectorized loop.>
    *** Vectorization obstructive procedure reference. : NETCDF::NF90_PUT_VAR_TEXT (netcdfio.F:7573)
    *** Vectorization obstructive procedure reference. : NETCDF_ERROR::CHECK_ERR (netcdfio.F:7573)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONIC
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 50 [s0-s12 s15-s16 s18-s21 s23-s44 s55-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2400 bytes
      Register spill area      :  264 bytes
      Parameter area           :   80 bytes
      Register save area       :  176 bytes
      User data area           : 1880 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:7573)
    *** Estimated execution cycle                       : 90
    *** The number of SCALAR REGISTER SPILL
          Total                                         : 1
            Across calls                                : 1
    *** The number of SCALAR REGISTER RESTORE
          Total                                         : 1
            Across calls                                : 1
    *** The number of SCALAR REGISTER TRANSFER          : 6
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONICMEANSVARIANCES
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  7642: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  7654: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  7655: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  7659: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  7673: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  7693: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  7747: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_FOURBYTEINT
  7751: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONICMEANSVARIANCES
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  7620:                 SUBROUTINE writeNetCDFHotstartHarmonicMeansVariances(lun,
  7621:                &            ELAVDescript, ELVADescript,
  7622:                &            XVELAVDescript, YVELAVDescript,
  7623:                &            XVELVADescript, YVELVADescript)
  7624:                 USE SIZES, ONLY : MNHARF, MNPROC, globaldir
  7625:                 USE GLOBAL, ONLY : OutputDataDescript_t, NSTAE_G, NSTAV_G
  7626:                 USE HARM, ONLY : nhase, nhasv, nhage, nhagv, ntsteps
  7627:                 IMPLICIT NONE
  7628:           C
  7629:                 INTEGER, intent(in) :: lun
  7630:                 type(OutputDataDescript_t), intent(in) :: ELAVDescript
  7631:                 type(OutputDataDescript_t), intent(in) :: ELVADescript
  7632:                 type(OutputDataDescript_t), intent(in) :: XVELAVDescript
  7633:                 type(OutputDataDescript_t), intent(in) :: YVELAVDescript
  7634:                 type(OutputDataDescript_t), intent(in) :: XVELVADescript
  7635:                 type(OutputDataDescript_t), intent(in) :: YVELVADescript
  7636:           C
  7637:                 INTEGER i,j
  7638:                 INTEGER kount(2), start(2) ! for nodally based data
  7639:                 INTEGER iret ! success or failure of the netcdf call
  7640:                 INTEGER tempid
  7641:           C
  7642:                 call setMessageSource("writeNetCDFHotstartHarmonicMeansVariances")
  7643:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7644:                 call allMessage(DEBUG,"Enter.")
  7645:           #endif
  7646:           C
  7647:           C     Point to the hotstart file we want to work on
  7648:                 IF (lun.eq.67) THEN
  7649:                    hs => hs67
  7650:                 ELSE
  7651:                    hs => hs68
  7652:                 ENDIF
  7653:           C
  7654:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  7655:                 CALL check_err(iret)
  7656:           !
  7657:           !     Inquire variables
  7658:           !     time dimension
  7659:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  7660:           C
  7661:           C     Don't increment the record counter so that we can store data at the
  7662:           C     next location in the netcdf file -- the hotstart file is only intended
  7663:           C     to have a single snapshot of data in it.
  7664:                 hs%myFile%record_counter = 1
  7665:           C
  7666:                 kount(1)=hs%myMesh%num_nodes  ! for nodal data
  7667:                 kount(2)=hs%myTime%timenc_len
  7668:                 start(1)=1
  7669:                 start(2)=hs%myFile%record_counter
  7670:           C
  7671:           C     Get the NetCDF IDs of the relevant variables from the file
  7672:                 IF (NHAGE.ne.0) THEN
  7673:                    iret=nf90_inq_varid(hs%ncid,"elav",hs%elav%nodal_data_id)
  7674:                    CALL check_err(iret)
  7675:                    iret=nf90_inq_varid(hs%ncid,"elva",hs%elva%nodal_data_id)
  7676:                    CALL check_err(iret)
  7677:                 ENDIF
  7678:                 IF (NHAGV.ne.0) THEN
  7679:                    iret=nf90_inq_varid(hs%ncid,"xvelav",hs%xvelav%nodal_data_id)
  7680:                    CALL check_err(iret)
  7681:                    iret=nf90_inq_varid(hs%ncid,"yvelav",hs%yvelav%nodal_data_id)
  7682:                    CALL check_err(iret)
  7683:           C
  7684:                    iret=nf90_inq_varid(hs%ncid,"xvelva",hs%xvelva%nodal_data_id)
  7685:                    CALL check_err(iret)
  7686:                    iret=nf90_inq_varid(hs%ncid,"yvelva",hs%yvelva%nodal_data_id)
  7687:                    CALL check_err(iret)
  7688:                 ENDIF
  7689:           C
  7690:           C     Write the nodal data to the netcdf file
  7691:                 IF (MNPROC.eq.1) THEN
  7692:                    IF (NHAGE.ne.0) THEN
  7693:                       iret = nf90_put_var(hs%ncid, hs%elav%nodal_data_id,
  7694:                &          ELAVDescript%array, start, kount)
  7695:                       CALL check_err(iret)
  7696:                       iret = nf90_put_var(hs%ncid, hs%elva%nodal_data_id,
  7697:                &          ELVADescript%array, start, kount)
  7698:                       CALL check_err(iret)
  7699:                    ENDIF
  7700:                    IF (NHAGV.ne.0) THEN
  7701:                       iret = nf90_put_var(hs%ncid, hs%xvelav%nodal_data_id,
  7702:                &       XVELAVDescript%array, start, kount)
  7703:                       CALL check_err(iret)
  7704:                       iret = nf90_put_var(hs%ncid, hs%yvelav%nodal_data_id,
  7705:                &       YVELAVDescript%array, start, kount)
  7706:                       CALL check_err(iret)
  7707:           C
  7708:                       iret = nf90_put_var(hs%ncid, hs%xvelva%nodal_data_id,
  7709:                &        XVELVADescript%array, start, kount)
  7710:                       CALL check_err(iret)
  7711:                       iret = nf90_put_var(hs%ncid, hs%yvelva%nodal_data_id,
  7712:                &        YVELVADescript%array, start, kount)
  7713:                       CALL check_err(iret)
  7714:                    ENDIF
  7715:                 ELSE
  7716:                    IF (NHAGE.ne.0) THEN
  7717:                       iret = nf90_put_var(hs%ncid, hs%elav%nodal_data_id,
  7718:                &          ELAVDescript%array_g, start, kount)
  7719:                       CALL check_err(iret)
  7720:                       iret = nf90_put_var(hs%ncid, hs%elva%nodal_data_id,
  7721:                &          ELVADescript%array_g, start, kount)
  7722:                       CALL check_err(iret)
  7723:                    ENDIF
  7724:                    IF (NHAGV.ne.0) THEN
  7725:                       iret = nf90_put_var(hs%ncid, hs%xvelav%nodal_data_id,
  7726:                &       XVELAVDescript%array_g, start, kount)
  7727:                       CALL check_err(iret)
  7728:                       iret = nf90_put_var(hs%ncid, hs%yvelav%nodal_data_id,
  7729:                &       YVELAVDescript%array_g, start, kount)
  7730:                       CALL check_err(iret)
  7731:           C
  7732:                       iret = nf90_put_var(hs%ncid, hs%xvelva%nodal_data_id,
  7733:                &        XVELVADescript%array_g, start, kount)
  7734:                       CALL check_err(iret)
  7735:                       iret = nf90_put_var(hs%ncid, hs%yvelva%nodal_data_id,
  7736:                &        YVELVADescript%array_g, start, kount)
  7737:                       CALL check_err(iret)
  7738:                    ENDIF
  7739:                 ENDIF
  7740:           
  7741:           C
  7742:           C     Get each variable ID for the model parameters in the netcdf file
  7743:           C     and immediately write the parameter value to that variable ID before
  7744:           C     going on to the next one.
  7745:                 iret = nf90_inq_varid(hs%ncid,"ntsteps", tempid)
  7746:                 CALL check_err(iret)
  7747:                 iret = nf90_put_var(hs%ncid, tempid, ntsteps)
  7748:                 CALL check_err(iret)
  7749:           C
  7750:           C     now close the netcdf file
  7751:                 iret = nf90_close(hs%ncid)
  7752:                 CALL check_err(iret)
  7753:           C
  7754:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7755:                 call allMessage(DEBUG,"Return.")
  7756:           #endif
  7757:                 call unsetMessageSource()
  7758:           C-----------------------------------------------------------------------
  7759:                 END SUBROUTINE writeNetCDFHotstartHarmonicMeansVariances


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONICMEANSVARIANCES
INLINE LIST

  ROOT: NETCDFIO::WRITENETCDFHOTSTARTHARMONICMEANSVARIANCES (netcdfio.F:7620)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7642)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:7654)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7655)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:7659)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7673)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7674)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7675)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7676)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7679)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7680)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7681)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7682)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7684)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7685)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7686)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7687)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7693)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7695)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7696)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7698)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7701)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7703)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7704)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7706)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7708)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7710)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7711)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7713)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7717)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7719)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7720)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7722)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7725)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7727)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7728)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7730)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7732)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7734)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7737)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7745)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7746)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7747)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7748)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:7751)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7752)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7757)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONICMEANSVARIANCES
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTARTHARMONICMEANSVARIANCES
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 38 [s0-s12 s15-s16 s18-s34 s58-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 1296 bytes
      Register spill area      :   16 bytes
      Parameter area           :   80 bytes
      Register save area       :  176 bytes
      User data area           : 1024 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3D
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  7794: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  7806: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  7807: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  7811: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  7825: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  7842: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
  7892: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_FOURBYTEINT
  7940: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3D
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  7770:                 SUBROUTINE writeNetCDFHotstart3D(lun,DUUDescript,
  7771:                &      DUVDescript, DVVDescript, UUDescript, VVDescript,
  7772:                &      BSXDescript, BSYDescript)
  7773:                 USE SIZES, ONLY : MNPROC, globaldir
  7774:                 USE GLOBAL, ONLY : OutputDataDescript_t
  7775:                 USE GLOBAL_3DVS, ONLY : n3dsd, i3dsdrec, n3dsv, i3dsvrec,
  7776:                &   n3dst, i3dstrec, n3dgd, i3dgdrec, n3dgv, i3dgvrec,
  7777:                &   n3dgt, i3dgtrec
  7778:                 IMPLICIT NONE
  7779:           C
  7780:                 INTEGER, intent(in) :: lun
  7781:                 type(OutputDataDescript_t), intent(in) :: DUUDescript
  7782:                 type(OutputDataDescript_t), intent(in) :: DUVDescript
  7783:                 type(OutputDataDescript_t), intent(in) :: DVVDescript
  7784:                 type(OutputDataDescript_t), intent(in) :: UUDescript
  7785:                 type(OutputDataDescript_t), intent(in) :: VVDescript
  7786:                 type(OutputDataDescript_t), intent(in) :: BSXDescript
  7787:                 type(OutputDataDescript_t), intent(in) :: BSYDescript
  7788:           C
  7789:                 INTEGER i,j
  7790:                 INTEGER kount(2), start(2) ! for nodally based data
  7791:                 INTEGER iret ! success or failure of the netcdf call
  7792:                 INTEGER tempid
  7793:           C
  7794:                 call setMessageSource("writeNetCDFHotstart3D")
  7795:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7796:                 call allMessage(DEBUG,"Enter.")
  7797:           #endif
  7798:           C
  7799:           C     Point to the hotstart file we want to work on
  7800:                 IF (lun.eq.67) THEN
  7801:                    hs => hs67
  7802:                 ELSE
  7803:                    hs => hs68
  7804:                 ENDIF
  7805:           C
  7806:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  7807:                 CALL check_err(iret)
  7808:           !
  7809:           !     Inquire variables
  7810:           !     time dimension
  7811:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  7812:           C
  7813:           C
  7814:           C     Don't increment the record counter so that we can store data at the
  7815:           C     next location in the netcdf file -- the hotstart file is only intended
  7816:           C     to have a single snapshot of data in it.
  7817:                 hs%myFile%record_counter = 1
  7818:           C
  7819:                 kount(1)=hs%myMesh%num_nodes  ! for nodal data
  7820:                 kount(2)=hs%myTime%timenc_len
  7821:                 start(1)=1
  7822:                 start(2)=hs%myFile%record_counter
  7823:           C
  7824:           C     Get the NetCDF IDs of the relevant variables from the file
  7825:                 iret=nf90_inq_varid(hs%ncid,"duu",hs%duu%nodal_data_id)
  7826:                 CALL check_err(iret)
  7827:                 iret=nf90_inq_varid(hs%ncid,"duv",hs%duv%nodal_data_id)
  7828:                 CALL check_err(iret)
  7829:                 iret=nf90_inq_varid(hs%ncid,"dvv",hs%dvv%nodal_data_id)
  7830:                 CALL check_err(iret)
  7831:                 iret=nf90_inq_varid(hs%ncid,"uu",hs%uu%nodal_data_id)
  7832:                 CALL check_err(iret)
  7833:                 iret=nf90_inq_varid(hs%ncid,"vv",hs%vv%nodal_data_id)
  7834:                 CALL check_err(iret)
  7835:                 iret=nf90_inq_varid(hs%ncid,"bsx",hs%bsx%nodal_data_id)
  7836:                 CALL check_err(iret)
  7837:                 iret=nf90_inq_varid(hs%ncid,"bsy",hs%bsy%nodal_data_id)
  7838:                 CALL check_err(iret)
  7839:           C
  7840:           C     Write the nodal data to the netcdf file
  7841:                 IF (MNPROC.eq.1) THEN
  7842:                    iret = nf90_put_var(hs%ncid, hs%duu%nodal_data_id,
  7843:                &       DUUDescript%array, start, kount)
  7844:                    CALL check_err(iret)
  7845:                    iret = nf90_put_var(hs%ncid, hs%duv%nodal_data_id,
  7846:                &       DUVDescript%array, start, kount)
  7847:                    CALL check_err(iret)
  7848:                    iret = nf90_put_var(hs%ncid, hs%dvv%nodal_data_id,
  7849:                &       DVVDescript%array, start, kount)
  7850:                    CALL check_err(iret)
  7851:                    iret = nf90_put_var(hs%ncid, hs%uu%nodal_data_id,
  7852:                &       UUDescript%array, start, kount)
  7853:                    CALL check_err(iret)
  7854:                    iret = nf90_put_var(hs%ncid, hs%vv%nodal_data_id,
  7855:                &       VVDescript%array, start, kount)
  7856:                    CALL check_err(iret)
  7857:                    iret = nf90_put_var(hs%ncid, hs%bsx%nodal_data_id,
  7858:                &       BSXDescript%array, start, kount)
  7859:                    CALL check_err(iret)
  7860:                    iret = nf90_put_var(hs%ncid, hs%bsy%nodal_data_id,
  7861:                &       BSYDescript%array, start, kount)
  7862:                    CALL check_err(iret)
  7863:                 ELSE
  7864:                    iret = nf90_put_var(hs%ncid, hs%duu%nodal_data_id,
  7865:                &       DUUDescript%array_g, start, kount)
  7866:                    CALL check_err(iret)
  7867:                    iret = nf90_put_var(hs%ncid, hs%duv%nodal_data_id,
  7868:                &       DUVDescript%array_g, start, kount)
  7869:                    CALL check_err(iret)
  7870:                    iret = nf90_put_var(hs%ncid, hs%dvv%nodal_data_id,
  7871:                &       DVVDescript%array_g, start, kount)
  7872:                    CALL check_err(iret)
  7873:                    iret = nf90_put_var(hs%ncid, hs%uu%nodal_data_id,
  7874:                &       UUDescript%array_g, start, kount)
  7875:                    CALL check_err(iret)
  7876:                    iret = nf90_put_var(hs%ncid, hs%vv%nodal_data_id,
  7877:                &       VVDescript%array_g, start, kount)
  7878:                    CALL check_err(iret)
  7879:                    iret = nf90_put_var(hs%ncid, hs%bsx%nodal_data_id,
  7880:                &       BSXDescript%array_g, start, kount)
  7881:                    CALL check_err(iret)
  7882:                    iret = nf90_put_var(hs%ncid, hs%bsy%nodal_data_id,
  7883:                &       BSYDescript%array_g, start, kount)
  7884:                    CALL check_err(iret)
  7885:                 ENDIF
  7886:           C
  7887:           C     Get each variable ID for the model parameters in the netcdf file
  7888:           C     and immediately write the parameter value to that variable ID before
  7889:           C     going on to the next one.
  7890:                 iret = nf90_inq_varid(hs%ncid,"n3dsd", tempid)
  7891:                 CALL check_err(iret)
  7892:                 iret = nf90_put_var(hs%ncid, tempid, n3dsd)
  7893:                 CALL check_err(iret)
  7894:                 iret = nf90_inq_varid(hs%ncid,"i3dsdrec", tempid)
  7895:                 CALL check_err(iret)
  7896:                 iret = nf90_put_var(hs%ncid, tempid, i3dsdrec)
  7897:                 CALL check_err(iret)
  7898:                 iret = nf90_inq_varid(hs%ncid,"n3dsv", tempid)
  7899:                 CALL check_err(iret)
  7900:                 iret = nf90_put_var(hs%ncid, tempid, n3dsv)
  7901:                 CALL check_err(iret)
  7902:                 iret = nf90_inq_varid(hs%ncid,"i3dsvrec", tempid)
  7903:                 CALL check_err(iret)
  7904:                 iret = nf90_put_var(hs%ncid, tempid, i3dsvrec)
  7905:                 CALL check_err(iret)
  7906:                 iret = nf90_inq_varid(hs%ncid,"n3dst", tempid)
  7907:                 CALL check_err(iret)
  7908:                 iret = nf90_put_var(hs%ncid, tempid, n3dst)
  7909:                 CALL check_err(iret)
  7910:                 iret = nf90_inq_varid(hs%ncid,"i3dstrec", tempid)
  7911:                 CALL check_err(iret)
  7912:                 iret = nf90_put_var(hs%ncid, tempid, i3dstrec)
  7913:                 CALL check_err(iret)
  7914:                 iret = nf90_inq_varid(hs%ncid,"n3dgd", tempid)
  7915:                 CALL check_err(iret)
  7916:                 iret = nf90_put_var(hs%ncid, tempid, n3dgd)
  7917:                 CALL check_err(iret)
  7918:                 iret = nf90_inq_varid(hs%ncid,"i3dgdrec", tempid)
  7919:                 CALL check_err(iret)
  7920:                 iret = nf90_put_var(hs%ncid, tempid, i3dgdrec)
  7921:                 CALL check_err(iret)
  7922:                 iret = nf90_inq_varid(hs%ncid,"n3dgv", tempid)
  7923:                 CALL check_err(iret)
  7924:                 iret = nf90_put_var(hs%ncid, tempid, n3dgv)
  7925:                 CALL check_err(iret)
  7926:                 iret = nf90_inq_varid(hs%ncid,"i3dgvrec", tempid)
  7927:                 CALL check_err(iret)
  7928:                 iret = nf90_put_var(hs%ncid, tempid, i3dgvrec)
  7929:                 CALL check_err(iret)
  7930:                 iret = nf90_inq_varid(hs%ncid,"n3dgt", tempid)
  7931:                 CALL check_err(iret)
  7932:                 iret = nf90_put_var(hs%ncid, tempid, n3dgt)
  7933:                 CALL check_err(iret)
  7934:                 iret = nf90_inq_varid(hs%ncid,"i3dgtrec", tempid)
  7935:                 CALL check_err(iret)
  7936:                 iret = nf90_put_var(hs%ncid, tempid, i3dgtrec)
  7937:                 CALL check_err(iret)
  7938:           C
  7939:           C     now close the netcdf file
  7940:                 iret = nf90_close(hs%ncid)
  7941:                 CALL check_err(iret)
  7942:           C
  7943:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7944:                 call allMessage(DEBUG,"Return.")
  7945:           #endif
  7946:                 call unsetMessageSource()
  7947:           C-----------------------------------------------------------------------
  7948:                 END SUBROUTINE writeNetCDFHotstart3D


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3D
INLINE LIST

  ROOT: NETCDFIO::WRITENETCDFHOTSTART3D (netcdfio.F:7770)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7794)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:7806)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7807)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:7811)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7825)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7826)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7827)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7828)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7829)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7830)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7831)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7832)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7833)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7834)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7835)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7836)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7837)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7838)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7842)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7844)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7845)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7847)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7848)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7850)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7851)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7853)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7854)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7856)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7857)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7859)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7860)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7862)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7864)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7866)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7867)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7869)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7872)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7873)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7875)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7876)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7878)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7879)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7881)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:7882)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7884)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7890)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7891)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7892)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7893)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7894)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7895)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7896)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7897)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7898)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7899)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7900)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7901)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7902)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7903)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7904)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7905)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7906)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7907)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7908)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7909)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7910)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7911)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7912)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7913)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7914)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7915)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7916)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7917)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7918)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7919)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7920)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7921)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7922)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7923)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7924)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7925)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7926)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7927)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7928)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7929)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7930)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7931)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7932)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7933)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:7934)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7935)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_FOURBYTEINT (netcdfio.F:7936)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7937)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:7940)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7941)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:7946)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3D
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3D
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 36 [s0-s12 s15-s16 s18-s34 s60-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 1472 bytes
      Register spill area      :   24 bytes
      Parameter area           :   80 bytes
      Register save area       :  176 bytes
      User data area           : 1192 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3DVAR
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  7971: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  7983: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  7984: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  7988: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  8011: vec( 103): Unvectorized loop.
  8011: vec( 108): Unvectorizable loop structure.
  8013: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  8016: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL
  8119: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3DVAR
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  7958:                 SUBROUTINE writeNetCDFHotstart3DVar(lun, descript)
  7959:                 USE SIZES, ONLY : MNPROC, globaldir
  7960:                 USE GLOBAL, ONLY : OutputDataDescript_t
  7961:                 IMPLICIT NONE
  7962:           C
  7963:                 INTEGER, intent(in) :: lun
  7964:                 type(OutputDataDescript_t), intent(in) :: descript
  7965:           C
  7966:                 INTEGER i,j
  7967:                 INTEGER kount(3), start(3) ! for nodally based data
  7968:                 INTEGER iret ! success or failure of the netcdf call
  7969:                 INTEGER tempid
  7970:           C
  7971:                 call setMessageSource("writeNetCDFHotstart3DVar")
  7972:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  7973:                 call allMessage(DEBUG,"Enter.")
  7974:           #endif
  7975:           C
  7976:           C     Point to the hotstart file we want to work on
  7977:                 IF (lun.eq.67) THEN
  7978:                    hs => hs67
  7979:                 ELSE
  7980:                    hs => hs68
  7981:                 ENDIF
  7982:           C
  7983:                 iret = nf90_open(hs%myFile%FILENAME, NF90_WRITE, hs%ncid)
  7984:                 CALL check_err(iret)
  7985:           !
  7986:           !     Inquire variables
  7987:           !     time dimension
  7988:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  7989:           !     vertical dimension
  7990:                 iret=nf90_inq_dimid(hs%ncid,"num_v_nodes",
  7991:                &        hs%myMesh%num_v_nodes_dim_id)
  7992:                 CALL check_err(iret)
  7993:                 iret=nf90_inquire_dimension(hs%ncid,hs%myMesh%num_v_nodes_dim_id,
  7994:                &     len=hs%myMesh%num_v_nodes)
  7995:                 CALL check_err(iret)
  7996:           C
  7997:           C
  7998:           C     Don't increment the record counter so that we can store data at the
  7999:           C     next location in the netcdf file -- the hotstart file is only intended
  8000:           C     to have a single snapshot of data in it.
  8001:                 hs%myFile%record_counter = 1
  8002:           C
  8003:                 kount(1)=hs%myMesh%num_nodes
  8004:                 kount(2)=hs%myMesh%num_v_nodes
  8005:                 kount(3)=hs%myTime%timenc_len
  8006:                 start(1)=1
  8007:                 start(2)=1
  8008:                 start(3)=hs%myFile%record_counter
  8009:           C
  8010:           C     Get the NetCDF ID of the relevant variable from the file
  8011:                 SELECT CASE(trim(descript%field_name))
  8012:                 CASE("SigmaT")
  8013:                    iret=nf90_inq_varid(hs%ncid,"sigt",hs%density3D%u_nodal_data_id)
  8014:                    CALL check_err(iret)
  8015:                    IF (MNPROC.eq.1) THEN
  8016:                       iret = nf90_put_var(hs%ncid, hs%density3D%u_nodal_data_id,
  8017:                &          descript%array2D, start, kount)
  8018:                    ELSE
  8019:                       iret = nf90_put_var(hs%ncid, hs%density3D%u_nodal_data_id,
  8020:                &          descript%array2D_g, start, kount)
  8021:                    ENDIF
  8022:                    CALL check_err(iret)
  8023:                 CASE("Salinity")
  8024:                    iret=nf90_inq_varid(hs%ncid,"salinity",
  8025:                &      hs%density3D%v_nodal_data_id)
  8026:                    CALL check_err(iret)
  8027:                    IF (MNPROC.eq.1) THEN
  8028:                       iret = nf90_put_var(hs%ncid, hs%density3D%v_nodal_data_id,
  8029:                &         descript%array2D, start, kount)
  8030:                     ELSE
  8031:                       iret = nf90_put_var(hs%ncid, hs%density3D%v_nodal_data_id,
  8032:                &         descript%array2D_g, start, kount)
  8033:                    ENDIF
  8034:                    CALL check_err(iret)
  8035:                 CASE("Temperature")
  8036:                    iret = nf90_inq_varid(hs%ncid,"temperature",
  8037:                &      hs%density3D%nodal_data_id)
  8038:                    CALL check_err(iret)
  8039:                    IF (MNPROC.eq.1) THEN
  8040:                       iret = nf90_put_var(hs%ncid,
  8041:                &          hs%density3D%w_nodal_data_id,
  8042:                &          descript%array2D, start, kount)
  8043:                    ELSE
  8044:                       iret = nf90_put_var(hs%ncid,
  8045:                &          hs%density3D%w_nodal_data_id,
  8046:                &          descript%array2D_g, start, kount)
  8047:                    ENDIF
  8048:                    CALL check_err(iret)
  8049:                 CASE("u-vel3D")
  8050:                    iret=nf90_inq_varid(hs%ncid,"u-vel3D",
  8051:                &      hs%velocity3D%u_nodal_data_id)
  8052:                    CALL check_err(iret)
  8053:                    IF (MNPROC.eq.1) THEN
  8054:                       iret = nf90_put_var(hs%ncid, hs%velocity3D%u_nodal_data_id,
  8055:                &          descript%array2D, start, kount)
  8056:                    ELSE
  8057:                       iret = nf90_put_var(hs%ncid, hs%velocity3D%u_nodal_data_id,
  8058:                &          descript%array2D_g, start, kount)
  8059:                    ENDIF
  8060:                    CALL check_err(iret)
  8061:                 CASE("v-vel3D")
  8062:                    iret=nf90_inq_varid(hs%ncid,"v-vel3D",
  8063:                &       hs%velocity3D%v_nodal_data_id)
  8064:                    CALL check_err(iret)
  8065:                    IF (MNPROC.eq.1) THEN
  8066:                       iret = nf90_put_var(hs%ncid,
  8067:                &          hs%velocity3D%v_nodal_data_id, descript%array2D,
  8068:                &          start, kount)
  8069:                    ELSE
  8070:                       iret = nf90_put_var(hs%ncid,
  8071:                &          hs%velocity3D%v_nodal_data_id, descript%array2D_g,
  8072:                &          start, kount)
  8073:                    ENDIF
  8074:                    CALL check_err(iret)
  8075:                 CASE("w-vel3D")
  8076:                    iret = nf90_inq_varid(hs%ncid, "w-vel3D",
  8077:                &       hs%velocity3D%w_nodal_data_id)
  8078:                    CALL check_err(iret)
  8079:                    IF (MNPROC.eq.1) THEN
  8080:                       iret = nf90_put_var(hs%ncid, hs%velocity3D%w_nodal_data_id,
  8081:                &         descript%array2D, start, kount)
  8082:                     ELSE
  8083:                       iret = nf90_put_var(hs%ncid, hs%velocity3D%w_nodal_data_id,
  8084:                &         descript%array2D_g, start, kount)
  8085:                    ENDIF
  8086:                    CALL check_err(iret)
  8087:                 CASE("q20")
  8088:                    iret = nf90_inq_varid(hs%ncid, "q20",
  8089:                &       hs%turbulence3D%u_nodal_data_id)
  8090:                    CALL check_err(iret)
  8091:                    IF (MNPROC.eq.1) THEN
  8092:                       iret = nf90_put_var(hs%ncid,
  8093:                &         hs%turbulence3D%u_nodal_data_id,
  8094:                &         descript%array2D, start, kount)
  8095:                    ELSE
  8096:                       iret = nf90_put_var(hs%ncid,
  8097:                &         hs%turbulence3D%u_nodal_data_id,
  8098:                &         descript%array2D_g, start, kount)
  8099:                    ENDIF
  8100:                    CALL check_err(iret)
  8101:                 CASE("l")
  8102:                    iret=nf90_inq_varid(hs%ncid,"l",hs%turbulence3D%v_nodal_data_id)
  8103:                    CALL check_err(iret)
  8104:                    IF (MNPROC.eq.1) THEN
  8105:                       iret = nf90_put_var(hs%ncid,
  8106:                &          hs%turbulence3D%v_nodal_data_id,
  8107:                &          descript%array2D, start, kount)
  8108:                    ELSE
  8109:                       iret = nf90_put_var(hs%ncid,
  8110:                &          hs%turbulence3D%v_nodal_data_id,
  8111:                &          descript%array2D_g, start, kount)
  8112:                    ENDIF
  8113:                    CALL check_err(iret)
  8114:                 CASE DEFAULT
  8115:           
  8116:                 END SELECT
  8117:           C
  8118:           C     now close the netcdf file
  8119:                 iret = nf90_close(hs%ncid)
  8120:                 CALL check_err(iret)
  8121:           C
  8122:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8123:                 call allMessage(DEBUG,"Return.")
  8124:           #endif
  8125:                 call unsetMessageSource()
  8126:           C-----------------------------------------------------------------------
  8127:                 END SUBROUTINE writeNetCDFHotstart3DVar
  8128:           C-----------------------------------------------------------------------
  8129:           
  8130:           C-----------------------------------------------------------------------
  8131:           C     S U B R O U T I N E    R E A D   N E T C D F   H O T S T A R T
  8132:           C-----------------------------------------------------------------------
  8133:           C     jgf49.17.02 Reads data from the hotstart file.
  8134:           C-----------------------------------------------------------------------
  8135:                 SUBROUTINE readNetCDFHotstart(lun, timeLoc)
  8136:                 USE VERSION, ONLY : FileFmtRev, FileFmtMinor, FileFmtMajor
  8137:                 USE SIZES, ONLY : globaldir, mnproc, myproc
  8138:                 USE GLOBAL, ONLY : OutputDataDescript_t, imhs, iths, iestp, nscoue, ivstp,
  8139:                &                   nscouv, icstp, nscouc, ipstp, iwstp, nscoum,
  8140:                &                   igep, nscouge, igvp, nscougv, igcp, nscougc,
  8141:                &                   igpp, igwp, nscougw, ETA1, ETA2, EtaDisc,
  8142:                &                   UU2, VV2, NNODECODE, NOFF,
  8143:                &                   IM, NP_G, NE_G, NODES_LG, IMAP_EL_LG,
  8144:                &                   htot1 => H1, htot2 => H2,
  8145:                &                   IFNLFA
  8146:                 USE MESH, ONLY: DP
  8147:           #ifdef CMPI
  8148:                 USE MESSENGER, ONLY : MSG_FINI
  8149:           #endif
  8150:                 IMPLICIT NONE
  8151:           C
  8152:                 INTEGER, intent(in) :: lun
  8153:                 REAL(8), intent(out) :: timeLoc
  8154:           C
  8155:           
  8156:                 INTEGER i,j
  8157:                 INTEGER counti(1), starti(1), n
  8158:                 INTEGER kount(2), start(2)
  8159:                 INTEGER iret ! success or failure of the netcdf call
  8160:                 INTEGER :: tempid
  8161:           
  8162:                 INTEGER :: sd_node_number    ! subdomain index to map
  8163:                 INTEGER :: sd_element_number ! subdomain index to map
  8164:                 CHARACTER(len=10) :: fext
  8165:           C
  8166:                 call setMessageSource("readNetCDFHotstart")
  8167:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8168:                 call allMessage(DEBUG,"Enter.")
  8169:           #endif
  8170:           C
  8171:           C     Point to the hotstart file we want to work on
  8172:                 IF (lun.eq.67) THEN
  8173:                    hs => hs67
  8174:                 ELSE
  8175:                    hs => hs68
  8176:                 ENDIF
  8177:           C
  8178:                 hs%myMesh => adcircMesh
  8179:                 hs%myFile%fileFound = .false.
  8180:                 ! create file name
  8181:                 write(fext,'(i0)') lun
  8182:                 hs%myFile%filename = trim(globaldir)//'/fort.'//trim(fext)//'.nc'
  8183:                 call logMessage(INFO,'Opening hot start file "'
  8184:                &               //trim(hs%myFile%filename)//'" for reading.')
  8185:           C
  8186:           C     Open fulldomain file
  8187:                 INQUIRE(FILE=hs%myFile%FILENAME,EXIST=hs%myFile%fileFound)
  8188:                 IF (hs%myFile%fileFound.eqv..false.) THEN
  8189:                    write(scratchMessage,'(a,a,a)') 'The file ',
  8190:                &       trim(adjustl(hs%myFile%FILENAME)),
  8191:                &       ' was not found; ADCIRC terminating.'
  8192:                    call allMessage(ERROR,scratchMessage)
  8193:           #ifdef CMPI


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3DVAR
INLINE LIST

  ROOT: NETCDFIO::WRITENETCDFHOTSTART3DVAR (netcdfio.F:7958)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:7971)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:7983)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7984)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:7988)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:7990)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7992)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:7993)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:7995)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8013)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8014)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8016)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8019)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8022)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8024)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8026)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8028)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8031)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8034)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8036)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8038)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8040)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8044)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8048)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8050)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8052)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8054)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8057)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8060)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8062)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8064)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8066)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8070)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8074)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8076)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8078)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8080)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8083)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8086)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8088)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8090)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8092)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8096)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8100)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8102)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8103)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8105)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8109)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8113)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:8119)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8120)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8125)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3DVAR
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:8011)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8011)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:54 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::WRITENETCDFHOTSTART3DVAR
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 36 [s0-s12 s15-s16 s18 s23-s34 s56-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 1616 bytes
      Register spill area      :   16 bytes
      Parameter area           :   80 bytes
      Register save area       :  176 bytes
      User data area           : 1344 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8011)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:55 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  8166: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  8182: vec( 103): Unvectorized loop.
  8182: vec( 108): Unvectorizable loop structure.
  8182: vec( 118): Unvectorizable data type.: %FILENAME
  8183: inl(1212): Source for routine not found.: GLOBAL::LOGMESSAGE
  8183: vec( 103): Unvectorized loop.
  8183: vec( 108): Unvectorizable loop structure.
  8189: vec( 103): Unvectorized loop.
  8189: vec( 108): Unvectorizable loop structure.
  8189: vec( 118): Unvectorizable data type.: HS%MYFILE%FILENAME
  8189: vec( 118): Unvectorizable data type.
  8192: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  8194: inl(1212): Source for routine not found.: MESSENGER::MSG_FINI
  8198: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  8199: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  8203: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  8224: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  8228: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  8290: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT
  8318: inl(1222): Inlined: NETCDFIO::CREATEFULLDOMAININDEXLISTS
  8322: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8324: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8326: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8328: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8330: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8332: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8337: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8343: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8348: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8354: vec( 101): Vectorized loop.
  8354: vec( 128): Fused multiply-add operation applied.
  8355: vec( 101): Vectorized loop.
  8355: vec( 128): Fused multiply-add operation applied.
  8361: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_FOURBYTEINT
  8448: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8135:                 SUBROUTINE readNetCDFHotstart(lun, timeLoc)
  8136:                 USE VERSION, ONLY : FileFmtRev, FileFmtMinor, FileFmtMajor
  8137:                 USE SIZES, ONLY : globaldir, mnproc, myproc
  8138:                 USE GLOBAL, ONLY : OutputDataDescript_t, imhs, iths, iestp, nscoue, ivstp,
  8139:                &                   nscouv, icstp, nscouc, ipstp, iwstp, nscoum,
  8140:                &                   igep, nscouge, igvp, nscougv, igcp, nscougc,
  8141:                &                   igpp, igwp, nscougw, ETA1, ETA2, EtaDisc,
  8142:                &                   UU2, VV2, NNODECODE, NOFF,
  8143:                &                   IM, NP_G, NE_G, NODES_LG, IMAP_EL_LG,
  8144:                &                   htot1 => H1, htot2 => H2,
  8145:                &                   IFNLFA
  8146:                 USE MESH, ONLY: DP
  8147:           #ifdef CMPI
  8148:                 USE MESSENGER, ONLY : MSG_FINI
  8149:           #endif
  8150:                 IMPLICIT NONE
  8151:           C
  8152:                 INTEGER, intent(in) :: lun
  8153:                 REAL(8), intent(out) :: timeLoc
  8154:           C
  8155:           
  8156:                 INTEGER i,j
  8157:                 INTEGER counti(1), starti(1), n
  8158:                 INTEGER kount(2), start(2)
  8159:                 INTEGER iret ! success or failure of the netcdf call
  8160:                 INTEGER :: tempid
  8161:           
  8162:                 INTEGER :: sd_node_number    ! subdomain index to map
  8163:                 INTEGER :: sd_element_number ! subdomain index to map
  8164:                 CHARACTER(len=10) :: fext
  8165:           C
  8166:                 call setMessageSource("readNetCDFHotstart")
  8167:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8168:                 call allMessage(DEBUG,"Enter.")
  8169:           #endif
  8170:           C
  8171:           C     Point to the hotstart file we want to work on
  8172:                 IF (lun.eq.67) THEN
  8173:                    hs => hs67
  8174:                 ELSE
  8175:                    hs => hs68
  8176:                 ENDIF
  8177:           C
  8178:                 hs%myMesh => adcircMesh
  8179:                 hs%myFile%fileFound = .false.
  8180:                 ! create file name
  8181:                 write(fext,'(i0)') lun
  8182: +======>        hs%myFile%filename = trim(globaldir)//'/fort.'//trim(fext)//'.nc'
  8183:                 call logMessage(INFO,'Opening hot start file "'
  8184:                &               //trim(hs%myFile%filename)//'" for reading.')
  8185:           C
  8186:           C     Open fulldomain file
  8187:                 INQUIRE(FILE=hs%myFile%FILENAME,EXIST=hs%myFile%fileFound)
  8188:                 IF (hs%myFile%fileFound.eqv..false.) THEN
  8189:                    write(scratchMessage,'(a,a,a)') 'The file ',
  8190:                &       trim(adjustl(hs%myFile%FILENAME)),
  8191:                &       ' was not found; ADCIRC terminating.'
  8192:                    call allMessage(ERROR,scratchMessage)
  8193:           #ifdef CMPI
  8194:                       CALL MSG_FINI()
  8195:           #endif
  8196:                    CALL EXIT(1)
  8197:                 ELSE
  8198:                    iret = nf90_open(hs%myFile%FILENAME, NF90_NOWRITE, hs%ncid)
  8199:                    CALL check_err(iret)
  8200:                 ENDIF
  8201:           !
  8202:           !     Inquire variables
  8203:         I       call getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  8204:           C
  8205:           C     nodes and elements
  8206:                 hs%myMesh => adcircMesh
  8207:                 IF (hs%myMesh%initialized.eqv..false.) THEN
  8208:                    hs%myMesh%num_nodes = NP_G
  8209:                    hs%myMesh%num_elems = NE_G
  8210:                    hs%myMesh%nface_len = 3
  8211:                 ENDIF
  8212:                 IF (hs%myTime%initialized.eqv..false.) THEN
  8213:                    ALLOCATE(hs%myTime%timenc(hs%myTime%timenc_len))
  8214:                    hs%myTime%initialized = .true.
  8215:                 ENDIF
  8216:           C
  8217:                 hs%myFile%record_counter = 1
  8218:                 kount(1)=hs%myMesh%num_nodes
  8219:                 kount(2)=hs%myTime%timenc_len
  8220:                 start(1)=1
  8221:                 start(2)=hs%myFile%record_counter
  8222:           !
  8223:           !     Get time
  8224:                 iret=nf90_inq_varid(hs%ncid, "time", hs%myTime%timenc_id)
  8225:                 CALL check_err(iret)
  8226:                 starti(1)=hs%myFile%record_counter
  8227:                 counti(1)=hs%myTime%timenc_len
  8228:                 iret = nf90_get_var(hs%ncid, hs%myTime%timenc_id,
  8229:                &    hs%myTime%timenc, starti, counti)
  8230:                 CALL check_err(iret)
  8231:                 ! set timeLoc in hstart.F to the current time in the hotstart file
  8232:                 timeLoc = hs%myTime%timenc(hs%myFile%record_counter)
  8233:                 !
  8234:                 ! get array variable ids
  8235:                 iret=nf90_inq_varid(hs%ncid, "zeta1", hs%zeta1%nodal_data_id)
  8236:                 CALL check_err(iret)
  8237:                 iret=nf90_inq_varid(hs%ncid, "zeta2", hs%zeta2%nodal_data_id)
  8238:                 CALL check_err(iret)
  8239:                 iret=nf90_inq_varid(hs%ncid, "zetad", hs%zetad%nodal_data_id)
  8240:                 CALL check_err(iret)
  8241:                 iret=nf90_inq_varid(hs%ncid, "u-vel", hs%vel%u_nodal_data_id)
  8242:                 CALL check_err(iret)
  8243:                 iret=nf90_inq_varid(hs%ncid, "v-vel", hs%vel%v_nodal_data_id)
  8244:                 CALL check_err(iret)
  8245:                 iret=nf90_inq_varid(hs%ncid,"nodecode",hs%nodecodenc%nodal_data_id)
  8246:                 CALL check_err(iret)
  8247:                 iret=nf90_inq_varid(hs%ncid, "noff", hs%noffnc%nodal_data_id)
  8248:                 CALL check_err(iret)
  8249:           
  8250:                 !  hot start file contain the varible h1 and h2
  8251:                 hs%have_htot1 = .true.
  8252:                 iret=nf90_inq_varid(hs%ncid, "h1", hs%htot1%nodal_data_id)
  8253:                 if ( iret /= NF90_NOERR ) hs%have_htot1 = .false. ;
  8254:                 if ( .not. hs%have_htot1 ) then
  8255:                         WRITE(16,'(A)') " Warning: the hot start file does not
  8256:                &   contain the h1 variable. Proceed with h1 = dp + ifnlfa*eta1"
  8257:                 endif
  8258:           
  8259:                 hs%have_htot2 = .true.
  8260:                 iret=nf90_inq_varid(hs%ncid, "h2", hs%htot2%nodal_data_id)
  8261:                 if ( iret /= NF90_NOERR ) hs%have_htot2 = .false. ;
  8262:                 if ( .not. hs%have_htot2 ) then
  8263:                         WRITE(16,'(A)') " Warning: the hot start file does not
  8264:                &   contain the h2 variable. Proceed with h2 = dp + ifnlfa*eta2" ;
  8265:                 endif
  8266:           
  8267:           
  8268:                 ! serial
  8269:                 IF (MNPROC.eq.1) THEN
  8270:           C        Elev1
  8271:                    iret = nf90_get_var(hs%ncid, hs%zeta1%nodal_data_id,
  8272:                &     eta1, start, kount)
  8273:                    CALL check_err(iret)
  8274:           C        Elev2
  8275:                    iret = nf90_get_var(hs%ncid, hs%zeta2%nodal_data_id,
  8276:                &       eta2, start, kount)
  8277:                    CALL check_err(iret)
  8278:           C        EtaDisc
  8279:                    iret = nf90_get_var(hs%ncid, hs%zetad%nodal_data_id,
  8280:                &      EtaDisc, start, kount)
  8281:                    CALL check_err(iret)
  8282:           C        Vel
  8283:                    iret = nf90_get_var(hs%ncid, hs%vel%u_nodal_data_id,
  8284:                &      uu2, start, kount)
  8285:                    CALL check_err(iret)
  8286:                    iret = nf90_get_var(hs%ncid, hs%vel%v_nodal_data_id,
  8287:                &      vv2, start, kount)
  8288:                    CALL check_err(iret)
  8289:           C        NodeCode
  8290:                    iret = nf90_get_var(hs%ncid, hs%nodecodenc%nodal_data_id,
  8291:                &       nnodecode, start, kount)
  8292:                    CALL check_err(iret)
  8293:           
  8294:                    ! hot start file contain the varible h1 and h2
  8295:                    ! H 2
  8296:                    if ( hs%have_htot2 ) then
  8297:                        CALL check_err(  nf90_get_var(hs%ncid, hs%htot2%nodal_data_id,
  8298:                &                   htot2, start, kount ) )
  8299:                    endif
  8300:           
  8301:                    ! H 1
  8302:                    if ( hs%have_htot1 ) then
  8303:                        CALL check_err(  nf90_get_var(hs%ncid, hs%htot1%nodal_data_id,
  8304:                &                   htot1, start, kount ) )
  8305:                    endif
  8306:           
  8307:           C        NOFF
  8308:                    start(1)=1
  8309:                    kount(1)=hs%myMesh%num_elems
  8310:                    iret = nf90_get_var(hs%ncid, hs%noffnc%nodal_data_id,
  8311:                &       noff, start, kount)
  8312:                    CALL check_err(iret)
  8313:            
  8314:           
  8315:                 ELSE       ! parallel
  8316:           C
  8317:                    ! Create the fulldomain node and element index lists for this subdomain
  8318:         I          call createFullDomainIndexLists()
  8319:                    !
  8320:                    ! get fulldomain data and map the data to this subdomain
  8321:                    fullDomainIndexList => fullDomainNodeList
  8322:         I          call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8323:                &       hs%zeta1%nodal_data_id, subdomain_reals=eta1)
  8324:         I          call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8325:                &       hs%zeta2%nodal_data_id, subdomain_reals=eta2)
  8326:         I          call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8327:                &       hs%zetad%nodal_data_id, subdomain_reals=EtaDisc)
  8328:         I          call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8329:                &       hs%vel%u_nodal_data_id, subdomain_reals=uu2)
  8330:         I          call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8331:                &       hs%vel%v_nodal_data_id, subdomain_reals=vv2)
  8332:         I          call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8333:                &       hs%nodecodenc%nodal_data_id, subdomain_ints=nnodecode)
  8334:           
  8335:                    ! H 2
  8336:                    if ( hs%have_htot2 ) then
  8337:         I            call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8338:                &        hs%htot2%nodal_data_id, subdomain_reals=htot2)
  8339:                    end if
  8340:           
  8341:                    ! H 1
  8342:                    if ( hs%have_htot1 ) then
  8343:         I            call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  8344:                &        hs%htot1%nodal_data_id, subdomain_reals=htot1)
  8345:                    end if
  8346:           
  8347:                    fullDomainIndexList => fullDomainElementList
  8348:         I          call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_elems,
  8349:                &       hs%noffnc%nodal_data_id, subdomain_ints=noff)
  8350:           
  8351:                 ENDIF
  8352:           
  8353:                 ! Use DP reading in from read_input()
  8354: V======>F       IF ( .not. hs%have_htot2 ) htot2 = DP + IFNLFA*eta2
  8355: V======>F       IF ( .not. hs%have_htot1 ) htot1 = DP + IFNLFA*eta1
  8356:           
  8357:           C
  8358:           C     Read in model parameters to ADCIRC variables
  8359:                 iret = nf90_inq_varid(hs%ncid,"imhs", tempid)
  8360:                 CALL check_err(iret)
  8361:                 iret = nf90_get_var(hs%ncid, tempid, imhs)
  8362:                 CALL check_err(iret)
  8363:                 iret = nf90_inq_varid(hs%ncid,"iths", tempid)
  8364:                 CALL check_err(iret)
  8365:                 iret = nf90_get_var(hs%ncid, tempid, iths)
  8366:                 CALL check_err(iret)
  8367:                 iret = nf90_inq_varid(hs%ncid,"iestp", tempid)
  8368:                 CALL check_err(iret)
  8369:                 iret = nf90_get_var(hs%ncid, tempid, iestp)
  8370:                 CALL check_err(iret)
  8371:                 iret = nf90_inq_varid(hs%ncid,"nscoue", tempid)
  8372:                 CALL check_err(iret)
  8373:                 iret = nf90_get_var(hs%ncid, tempid, nscoue)
  8374:                 CALL check_err(iret)
  8375:                 iret = nf90_inq_varid(hs%ncid,"ivstp", tempid)
  8376:                 CALL check_err(iret)
  8377:                 iret = nf90_get_var(hs%ncid, tempid, ivstp)
  8378:                 CALL check_err(iret)
  8379:                 iret = nf90_inq_varid(hs%ncid,"nscouv", tempid)
  8380:                 CALL check_err(iret)
  8381:                 iret = nf90_get_var(hs%ncid, tempid, nscouv)
  8382:                 CALL check_err(iret)
  8383:                 IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  8384:                    iret = nf90_inq_varid(hs%ncid,"icstp", tempid)
  8385:                    CALL check_err(iret)
  8386:                    iret = nf90_get_var(hs%ncid, tempid, icstp)
  8387:                    CALL check_err(iret)
  8388:                    iret = nf90_inq_varid(hs%ncid,"nscouc", tempid)
  8389:                    CALL check_err(iret)
  8390:                    iret = nf90_get_var(hs%ncid, tempid, nscouc)
  8391:                    CALL check_err(iret)
  8392:                 ENDIF
  8393:                 iret = nf90_inq_varid(hs%ncid,"ipstp", tempid)
  8394:                 CALL check_err(iret)
  8395:                 iret = nf90_get_var(hs%ncid, tempid, ipstp)
  8396:                 CALL check_err(iret)
  8397:                 iret = nf90_inq_varid(hs%ncid,"iwstp", tempid)
  8398:                 CALL check_err(iret)
  8399:                 iret = nf90_get_var(hs%ncid, tempid, iwstp)
  8400:                 CALL check_err(iret)
  8401:                 iret = nf90_inq_varid(hs%ncid,"nscoum", tempid)
  8402:                 CALL check_err(iret)
  8403:                 iret = nf90_get_var(hs%ncid, tempid, nscoum)
  8404:                 CALL check_err(iret)
  8405:                 iret = nf90_inq_varid(hs%ncid,"igep", tempid)
  8406:                 CALL check_err(iret)
  8407:                 iret = nf90_get_var(hs%ncid, tempid, igep)
  8408:                 CALL check_err(iret)
  8409:                 iret = nf90_inq_varid(hs%ncid,"nscouge", tempid)
  8410:                 CALL check_err(iret)
  8411:                 iret = nf90_get_var(hs%ncid, tempid, nscouge)
  8412:                 CALL check_err(iret)
  8413:                 iret = nf90_inq_varid(hs%ncid,"igvp", tempid)
  8414:                 CALL check_err(iret)
  8415:                 iret = nf90_get_var(hs%ncid, tempid, igvp)
  8416:                 CALL check_err(iret)
  8417:                 iret = nf90_inq_varid(hs%ncid,"nscougv", tempid)
  8418:                 CALL check_err(iret)
  8419:                 iret = nf90_get_var(hs%ncid, tempid, nscougv)
  8420:                 CALL check_err(iret)
  8421:                 IF ((IM.EQ.10).OR.(IMHS.EQ.10)) THEN
  8422:                    iret = nf90_inq_varid(hs%ncid,"igcp", tempid)
  8423:                    CALL check_err(iret)
  8424:                    iret = nf90_get_var(hs%ncid, tempid, igcp)
  8425:                    CALL check_err(iret)
  8426:                    iret = nf90_inq_varid(hs%ncid,"nscougc", tempid)
  8427:                    CALL check_err(iret)
  8428:                    iret = nf90_get_var(hs%ncid, tempid, nscougc)
  8429:                    CALL check_err(iret)
  8430:                 ENDIF
  8431:                 iret = nf90_inq_varid(hs%ncid,"igpp", tempid)
  8432:                 CALL check_err(iret)
  8433:                 iret = nf90_get_var(hs%ncid, tempid, igpp)
  8434:                 CALL check_err(iret)
  8435:                 iret = nf90_inq_varid(hs%ncid,"igwp", tempid)
  8436:                 CALL check_err(iret)
  8437:                 iret = nf90_get_var(hs%ncid, tempid, igwp)
  8438:                 CALL check_err(iret)
  8439:                 iret = nf90_inq_varid(hs%ncid,"nscougw", tempid)
  8440:                 CALL check_err(iret)
  8441:                 iret = nf90_get_var(hs%ncid, tempid, nscougw)
  8442:                 CALL check_err(iret)
  8443:           C
  8444:                 DEALLOCATE(hs%myTime%timenc)
  8445:                 hs%myTime%initialized = .false. !..zc50.93 - reinitialize if we write a hot start later
  8446:           C
  8447:           C     now close the netcdf file
  8448:                 iret = nf90_close(hs%ncid)
  8449:                 CALL check_err(iret)
  8450:           C
  8451:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8452:                 call allMessage(DEBUG,"Return.")
  8453:           #endif
  8454:                 call unsetMessageSource()
  8455:           C-----------------------------------------------------------------------
  8456:                 END SUBROUTINE readNetCDFHotstart


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:55 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART
INLINE LIST

  ROOT: NETCDFIO::READNETCDFHOTSTART (netcdfio.F:8135)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8166)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::LOGMESSAGE (netcdfio.F:8183)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8192)
     *** Source for routine not found.
  -> NOINLINE: MESSENGER::MSG_FINI (netcdfio.F:8194)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:8198)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8199)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:8203)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8224)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8225)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8228)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8230)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8235)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8236)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8237)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8238)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8239)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8240)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8241)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8242)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8243)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8244)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8245)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8246)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8247)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8248)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8252)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8260)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8271)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8273)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8275)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8277)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8279)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8281)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8283)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8285)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8286)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8288)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8290)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8292)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8297)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8297)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8303)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8303)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8310)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8312)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::CREATEFULLDOMAININDEXLISTS (netcdfio.F:8318)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8817)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8846)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8322)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8324)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8326)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8328)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8330)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8332)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8337)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8343)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8348)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8359)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8360)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8361)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8362)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8363)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8364)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8365)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8366)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8367)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8368)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8369)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8370)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8371)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8372)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8373)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8374)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8375)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8376)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8377)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8378)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8379)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8380)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8381)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8382)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8384)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8385)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8386)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8387)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8388)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8389)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8390)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8391)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8393)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8394)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8395)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8396)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8397)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8398)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8399)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8400)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8401)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8402)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8403)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8404)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8405)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8406)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8407)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8408)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8409)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8410)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8411)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8412)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8413)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8414)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8415)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8416)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8417)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8418)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8419)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8420)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8422)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8423)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8424)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8425)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8426)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8427)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8428)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8429)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8431)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8432)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8433)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8434)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8435)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8436)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8437)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8438)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8439)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8440)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:8441)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8442)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:8448)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8449)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8454)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:55 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8182)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8182)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8182)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8182)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8182)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8182)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8182)
    <Unvectorized loop.>
    *** Unvectorizable data type. : %FILENAME (netcdfio.F:8182)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8183)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8183)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8189)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    <Unvectorized loop.>
    *** Unvectorizable data type. : HS%MYFILE%FILENAME (netcdfio.F:8189)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8189)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8189)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8828)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8828)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8828)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8838)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8838)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8838)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8354)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8354)
    *** The number of VLOAD, VSTORE. :  2,  1. (netcdfio.F:8354)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8354)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8354)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8354)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8355)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8355)
    *** The number of VLOAD, VSTORE. :  2,  1. (netcdfio.F:8355)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8355)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8355)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8355)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:55 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 53 [s0-s12 s15-s16 s18-s44 s53-s63]
      Vector registers         : 62 [v2-v63]
      Vector mask registers    :  1 [vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 15952 bytes
      Register spill area      :  4720 bytes
      Parameter area           :   104 bytes
      Register save area       :   176 bytes
      User data area           : 10944 bytes
      Others                   :     8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8182)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8182)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8182)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:8182)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8183)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8189)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8828)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END

  LOOP BEGIN: (netcdfio.F:8838)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8354)
    *** Estimated execution cycle                       : 130
  LOOP END

  LOOP BEGIN: (netcdfio.F:8354)
    *** Estimated execution cycle                       : 64
  LOOP END

  LOOP BEGIN: (netcdfio.F:8355)
    *** Estimated execution cycle                       : 130
  LOOP END

  LOOP BEGIN: (netcdfio.F:8355)
    *** Estimated execution cycle                       : 64
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READANDMAPTOSUBDOMAINMAXMINNETCDF
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  8493: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  8502: vec( 103): Unvectorized loop.
  8502: vec( 118): Unvectorizable data type.: TVN
  8506: vec( 103): Unvectorized loop.
  8506: vec( 118): Unvectorizable data type.: TVN
  8509: vec( 103): Unvectorized loop.
  8509: vec( 118): Unvectorizable data type.: VN
  8510: vec( 103): Unvectorized loop.
  8510: vec( 118): Unvectorizable data type.: TVN
  8514: vec( 103): Unvectorized loop.
  8514: vec( 118): Unvectorizable data type.: TVN
  8517: vec( 103): Unvectorized loop.
  8517: vec( 118): Unvectorizable data type.: VN
  8518: vec( 103): Unvectorized loop.
  8518: vec( 118): Unvectorizable data type.: TVN
  8522: vec( 103): Unvectorized loop.
  8522: vec( 118): Unvectorizable data type.: TVN
  8526: vec( 103): Unvectorized loop.
  8526: vec( 118): Unvectorizable data type.: TVN
  8530: vec( 103): Unvectorized loop.
  8530: vec( 118): Unvectorizable data type.: TVN
  8532: inl(1212): Source for routine not found.: GLOBAL::ALLMESSAGE
  8532: vec( 103): Unvectorized loop.
  8532: vec( 108): Unvectorizable loop structure.
  8538: inl(1222): Inlined: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
  8791: inl(1212): Source for routine not found.: MESSENGER::MSG_LBCAST
  8539: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  8545: vec( 103): Unvectorized loop.
  8545: vec( 108): Unvectorizable loop structure.
  8545: vec( 118): Unvectorizable data type.: %FILENAME
  8546: inl(1212): Source for routine not found.: GLOBAL::LOGMESSAGE
  8546: vec( 103): Unvectorized loop.
  8546: vec( 108): Unvectorizable loop structure.
  8552: vec( 103): Unvectorized loop.
  8552: vec( 108): Unvectorizable loop structure.
  8558: inl(1222): Inlined: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
  8563: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  8564: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  8571: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  8576: vec( 103): Unvectorized loop.
  8576: vec( 108): Unvectorizable loop structure.
  8585: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE
  8588: inl(1222): Inlined: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
  8591: vec( 103): Unvectorized loop.
  8591: vec( 108): Unvectorizable loop structure.
  8613: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  8617: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  8621: vec( 103): Unvectorized loop.
  8621: vec( 108): Unvectorizable loop structure.
  8627: vec( 103): Unvectorized loop.
  8627: vec( 108): Unvectorizable loop structure.
  8630: inl(1212): Source for routine not found.: NETCDF_ERROR::NETCDFTERMINATE
  8632: vec( 103): Unvectorized loop.
  8632: vec( 108): Unvectorizable loop structure.
  8645: inl(1222): Inlined: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
  8658: vec( 103): Unvectorized loop.
  8658: vec( 108): Unvectorizable loop structure.
  8661: vec( 103): Unvectorized loop.
  8661: vec( 108): Unvectorizable loop structure.
  8663: vec( 103): Unvectorized loop.
  8663: vec( 108): Unvectorizable loop structure.
  8672: inl(1222): Inlined: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
  8680: inl(1222): Inlined: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
  8693: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT
  8715: inl(1222): Inlined: NETCDFIO::CREATEFULLDOMAININDEXLISTS
  8726: inl(1212): Source for routine not found.: MESSENGER::MAPTOSUBDOMAININTMPI
  8726: opt(3009): Copy-in/out loops have been generated.: IARRAY
  8726: opt(3009): Copy-in/out loops have been generated.: IMAP
  8726: opt(3009): Copy-in/out loops have been generated.: IARRAY_G
  8726: vec( 101): Vectorized loop.
  8739: vec( 101): Vectorized loop.
  8741: inl(1212): Source for routine not found.: MESSENGER::MAPTOSUBDOMAINREALMPI
  8742: vec( 101): Vectorized loop.
  8755: vec( 101): Vectorized loop.
  8758: vec( 101): Vectorized loop.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READANDMAPTOSUBDOMAINMAXMINNETCDF
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8470:                 subroutine readAndMapToSubdomainMaxMinNetCDF(descript, timeloc)
  8471:                 use sizes, only : mnproc,myproc
  8472:                 use mesh, only: np
  8473:                 use global, only : OutputDataDescript_t, allMessage, logMessage, nfover,np_g
  8474:           #ifdef CMPI
  8475:                 use messenger, only: mapToSubdomainRealMPI,mapToSubdomainIntMPI,msg_lbcast
  8476:           #endif
  8477:                 implicit none
  8478:                 type(OutputDataDescript_t), intent(inout) :: descript
  8479:                 real(8), intent(in) :: timeloc ! adcirc time in seconds since cold start
  8480:           
  8481:                 type(nodalData), pointer :: dat
  8482:                 integer :: i,j
  8483:                 integer :: counti(1), starti(1)
  8484:                 integer :: kount(2), start(2)
  8485:                 integer :: iret ! success or failure of the netcdf call
  8486:                 logical :: timestampsFound   !.true. if file contains time of occurrence dataset
  8487:                 logical :: no_early_return
  8488:                 logical :: ldmy(1)
  8489:                 character(len=1024) :: vn    ! min/max variable name in netcdf file
  8490:                 character(len=1025) :: tvn   ! time of min/max occurrence variable name in netcdf
  8491:                 real(8),allocatable :: tmp0(:),tmp1(:)
  8492:           
  8493:                 call setMessageSource("readAndMapToSubdomainMaxMinNetCDF")
  8494:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8495:                 call allMessage(DEBUG,"Enter.")
  8496:           #endif
  8497:           
  8498:                 select case(descript % lun)
  8499:                 case(311) ! maxele
  8500:                    dat => EtaMax
  8501: +======>           vn = 'zeta_max'
  8502: +======>           tvn = 'time_of_zeta_max'
  8503:                 case(312) ! maxvel
  8504:                    dat => UMax
  8505: +======>           vn = 'vel_max'
  8506: +======>           tvn = 'time_of_vel_max'
  8507:                 case(313) ! minpr
  8508:                    dat => PrMin
  8509: +======>           vn = 'pressure_min'
  8510: +======>           tvn = 'time_of_pressure_min'
  8511:                 case(314) ! maxwvel
  8512:                    dat => WVMax
  8513: +======>           vn = 'wind_max'
  8514: +======>           tvn = 'time_of_wind_max'
  8515:                 case(315) ! maxrs
  8516:                    dat => RSMax
  8517: +======>           vn = 'radstress_max'
  8518: +======>           tvn = 'time_of_radstress_max'
  8519:                 case(400) ! inundationtime
  8520:                    dat => inTime
  8521: +======>           vn = 'inun_time'
  8522: +======>           tvn = 'onset_inun_time'
  8523:                 case(401) ! maxinundepth
  8524:                    dat => maxInDep
  8525: +======>           vn = 'inun_max'
  8526: +======>           tvn = 'time_of_inun_max'
  8527:                 case(404) ! everdried
  8528:                    dat => evrDry
  8529: +======>           vn = 'everdried'
  8530: +======>           tvn = 'time_of_everdried'
  8531:                 case default
  8532:                    call allMessage(ERROR,'Files of the type "'
  8533:                &  //trim(descript % file_name)//'.nc" cannot be read by ADCIRC.')
  8534:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8535:                    call allMessage(DEBUG,"Return.")
  8536:           #endif
  8537:                    no_early_return = .false.
  8538:         I          call communicateMapToSubdomainMaxMinNetcdfStatus(no_early_return)
  8539:                    call unsetMessageSource()
  8540:                    RETURN ! RETURN RETURN
  8541:                 end select
  8542:           
  8543:           
  8544:                 if(myproc.eq.0)then
  8545: +======>          dat%myFile%filename = trim(descript % file_name)//'.nc'
  8546:                   call logMessage(INFO,'Opening file "'
  8547:                &                 //trim(dat%myFile%filename)//'" for reading.')
  8548:            
  8549:           !       Open fulldomain file
  8550:                   inquire(file=dat%myfile%filename,exist=dat%myfile%filefound)
  8551:                   if (dat%myFile%fileFound.eqv..false.) then
  8552:                      call allMessage(INFO,'The file "'//trim(dat%myFile%FILENAME)//
  8553:                &         '" was not found.')
  8554:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8555:                      call allMessage(DEBUG,"Return.")
  8556:           #endif
  8557:                      no_early_return = .false.
  8558:         I            call communicateMapToSubdomainMaxMinNetcdfStatus(no_early_return)
  8559:                      call unsetMessageSource()
  8560:                      RETURN ! RETURN RETURN
  8561:                   else
  8562:                      ! the file was found, let's open it
  8563:                      iret = nf90_open(dat%myFile%FILENAME, NF90_NOWRITE, dat%ncid)
  8564:                      call check_err(iret)
  8565:                   endif
  8566:            
  8567:           !       nodes and elements
  8568:                   dat%myMesh => adcircMesh
  8569:           
  8570:           !       Inquire variables
  8571:         I         call getDimensions(dat%ncid, dat%myTime, dat%myMesh, dat%myFile)
  8572:                   !
  8573:                   ! jgf52.08.21: If the netcdf min/max file contains no time records,
  8574:                   ! it was just created by adcprep, and there are no data to load.
  8575:                   if ( dat%myFile%record_counter.eq.0 ) then
  8576:                      call allMessage(INFO,'The file '//trim(dat%myFile%filename)//
  8577:                &        'contains no data, '//
  8578:                &        'so the min/max record will be started anew.')
  8579:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8580:                      call allMessage(DEBUG,"Return.")
  8581:           #endif
  8582:                      call unsetMessageSource()
  8583:                      !
  8584:                      ! now close the netcdf file
  8585:                      iret = nf90_close(dat%ncid)
  8586:                      CALL check_err(iret)
  8587:                      no_early_return = .false.
  8588:         I            call communicateMapToSubdomainMaxMinNetcdfStatus(no_early_return)
  8589:                      return ! EARLY RETURN
  8590:                   else
  8591:                      write(scratchMessage,3333) trim(descript % file_name)
  8592:           3333      format('Values from ',(a),
  8593:                &         ' will be reflected from the solution prior to this hotstart.')
  8594:                      call allMessage(INFO,scratchMessage)
  8595:                   endif
  8596:                   IF (dat%myTime%initialized.eqv..false.) THEN
  8597:                      ALLOCATE(dat%myTime%timenc(dat%myTime%timenc_len))
  8598:                      dat%myTime%initialized = .true.
  8599:                   ENDIF
  8600:                   !
  8601:                   ! jgf52.08.20: Read time and reject min/max data that correspond
  8602:                   ! to a future time. This can happen when an analyst hotstarts a run,
  8603:                   ! allows it to complete, then makes some adjustments to the input and
  8604:                   ! then tries to re-run it while forgetting to remove or replace the
  8605:                   ! min/max file from the previous attempt.
  8606:                   !
  8607:                   ! It is hard to imagine a scenario where someone would want to keep
  8608:                   ! the min/max record from the previous attempt under these circumstances.
  8609:                   ! As a result, I am logging it as an error but allowing the run to
  8610:                   ! continue if non-fatal override is enabled, since it would be
  8611:                   ! annoying to have ADCIRC bomb out every time the analyst mistakenly
  8612:                   ! leaves a min/max file in place.
  8613:                   iret=nf90_inq_varid(dat%ncid, "time", dat%myTime%timenc_id)
  8614:                   CALL check_err(iret)
  8615:                   starti(1)=1  ! min/max files have one element in the time array
  8616:                   counti(1)=1
  8617:                   iret = nf90_get_var(dat%ncid, dat%myTime%timenc_id,
  8618:                &      dat%myTime%timenc, starti, counti)
  8619:                   CALL check_err(iret)
  8620:                   if (  dat%myTime%timenc(1) .gt. timeloc ) then
  8621:                      call allMessage(ERROR,'Max/min file '//trim(dat%myFile%filename)//
  8622:                &       ' contains data written after the hotstart time. '//
  8623:                &     ' It may have been produced using different input parameters, '//
  8624:                &       'perhaps during a previously attempted hot start run. '//
  8625:                &       ' Its values will not be read.')
  8626:                      if (nfover.eq.0) then
  8627:                         call allMessage(ERROR,
  8628:                &         'Execution terminated due to invalid '//
  8629:                &          trim(dat%myFile%filename)//' file.')
  8630:                          call netcdfTerminate()
  8631:                      else
  8632:                         call allMessage(INFO,'The record for '//
  8633:                &          trim(dat%myFile%filename)//
  8634:                &          ' will be started anew and exection will continue.')
  8635:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8636:                          call allMessage(DEBUG,"Return.")
  8637:           #endif
  8638:                          call unsetMessageSource()
  8639:                          !
  8640:                          ! now close the netcdf file
  8641:                          iret = nf90_close(dat%ncid)
  8642:                          CALL check_err(iret)
  8643:           
  8644:                          no_early_return = .false.
  8645:         I                call communicateMapToSubdomainMaxMinNetcdfStatus(no_early_return)
  8646:                          return ! EARLY RETURN
  8647:                      endif
  8648:                   endif
  8649:            
  8650:                   dat%myFile%record_counter = 1
  8651:                   kount(1)=dat%myMesh%num_nodes
  8652:                   kount(2)=dat%myTime%timenc_len
  8653:                   start(1)=1
  8654:                   start(2)=dat%myFile%record_counter
  8655:                   !
  8656:                   ! get array variable ids
  8657:                   !call logMessage(DEBUG,'netcdf var is '//trim(vn))
  8658:                   iret=nf90_inq_varid(dat%ncid,trim(vn),dat%max_nodal_data_id)
  8659:                   CALL check_err(iret)
  8660:                   timestampsFound = .true.
  8661:                   iret=nf90_inq_varid(dat%ncid,trim(tvn),dat%time_max_nodal_data_id)
  8662:                   if ( iret.ne.NF90_NOERR ) then
  8663:                      call logMessage(INFO,'The file "'//trim(dat%myFile%filename)//
  8664:                &    '" does not contain time of occurrence for the min/max data. '//
  8665:                &    'As a result, time of occurrence will be initialized to -99999.')
  8666:                      timestampsFound = .false.
  8667:                   endif
  8668:           
  8669:           #ifdef CMPI
  8670:                   if(mnproc.gt.1)then
  8671:                       no_early_return = .true.
  8672:         I             call communicateMapToSubdomainMaxMinNetcdfStatus(no_early_return)
  8673:                       ldmy(1) = timestampsFound
  8674:                       call msg_lbcast(ldmy,1)
  8675:                   endif
  8676:           #endif
  8677:                 else
  8678:           #ifdef CMPI
  8679:                   no_early_return = .false.
  8680:         I         call communicateMapToSubdomainMaxMinNetcdfStatus(no_early_return)
  8681:                   if(.not.no_early_return)return
  8682:           
  8683:                   call msg_lbcast(ldmy,1)
  8684:                   timestampsFound = ldmy(1)
  8685:           #endif
  8686:                 endif
  8687:           
  8688:                 ! serial
  8689:                 if (mnproc.eq.1) then
  8690:           
  8691:                    if (descript % isInteger.eqv..true.) then
  8692:                       ! integer
  8693:                       iret = nf90_get_var(dat%ncid, dat%max_nodal_data_id,
  8694:                &             descript % iarray, start, kount)
  8695:                       call check_err(iret)
  8696:                    else
  8697:                       ! float
  8698:                       iret = nf90_get_var(dat%ncid, dat%max_nodal_data_id,
  8699:                &             descript % array, start, kount)
  8700:                       call check_err(iret)
  8701:                    endif
  8702:                    ! time of occurrence
  8703:                    if (timestampsFound.eqv..true.) then
  8704:                       iret = nf90_get_var(dat%ncid, dat%time_max_nodal_data_id,
  8705:                &             descript % array2, start, kount)
  8706:                       call check_err(iret)
  8707:                    endif
  8708:            
  8709:                 else       ! parallel
  8710:           #ifdef CMPI
  8711:                    ! Create the fulldomain node and element index lists for this subdomain
  8712:                    ! if it has not already happened for the reading of the netcdf
  8713:                    ! hotstart file.
  8714:                    if (fullDomainIndexListsInitialized.eqv..false.) then
  8715:         I             call createFullDomainIndexLists()
  8716:                    endif
  8717:                    !
  8718:                    ! get fulldomain data and map the data to this subdomain
  8719:                    fullDomainIndexList => fullDomainNodeList
  8720:                    if ( descript % isInteger.eqv..true.) then
  8721:                       ! integer
  8722:                       if(myproc.eq.0)then
  8723:                         iret = nf90_get_var(dat%ncid, dat%max_nodal_data_id, descript%iarray_g)
  8724:                         call check_err(iret)
  8725:                       endif
  8726: V======>              call mapToSubdomainIntMPI(dat%myMesh%num_nodes,np,descript%iarray,descript%imap,descript%iarray_g)
  8727:                    else
  8728:                       ! float
  8729:                       if(myproc.eq.0)then
  8730:                         iret = nf90_get_var(dat%ncid, dat%max_nodal_data_id, descript%array_g)
  8731:                         call check_err(iret)
  8732:                       endif
  8733:           
  8734:                       if(allocated(tmp0))deallocate(tmp0)
  8735:                       if(allocated(tmp1))deallocate(tmp1)
  8736:                       allocate(tmp0(1:np_g))
  8737:                       allocate(tmp1(1:np))
  8738:                       if(myproc.eq.0)then
  8739: V======>                tmp0(:) = descript%array_g(:)
  8740:                       endif
  8741:                       call mapToSubdomainRealMPI(np_g,np,tmp1,descript%imap,tmp0)
  8742: V======>              descript%array(:) = tmp1(:)
  8743:                    endif
  8744:                    ! time of occurrence
  8745:                    if (timestampsFound) then
  8746:                       if(myproc.eq.0)then
  8747:                         iret = nf90_get_var(dat%ncid,dat%time_max_nodal_data_id,descript%array2_g)
  8748:                         call check_err(iret)
  8749:                       endif
  8750:                       if(allocated(tmp0))deallocate(tmp0)
  8751:                       if(allocated(tmp1))deallocate(tmp1)
  8752:                       allocate(tmp0(1:np_g))
  8753:                       allocate(tmp1(1:np))
  8754:                       if(myproc.eq.0)then
  8755: V======>                tmp0(:) = descript%array2_g(:)
  8756:                       endif
  8757:                       call mapToSubdomainRealMPI(np_g,np,tmp1,descript%imap,tmp0)
  8758: V======>              descript%array2(:) = tmp1(:)
  8759:                    endif
  8760:           #endif
  8761:                 endif
  8762:           
  8763:                 if(myproc.eq.0)then
  8764:           !       now close the netcdf file
  8765:                   iret = nf90_close(dat%ncid)
  8766:                   CALL check_err(iret)
  8767:                 endif
  8768:           
  8769:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8770:                 call allMessage(DEBUG,"Return.")
  8771:           #endif
  8772:                 call unsetMessageSource()
  8773:           !-----------------------------------------------------------------------
  8774:                 end subroutine readAndMapToSubdomainMaxMinNetCDF


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READANDMAPTOSUBDOMAINMAXMINNETCDF
INLINE LIST

  ROOT: NETCDFIO::READANDMAPTOSUBDOMAINMAXMINNETCDF (netcdfio.F:8470)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8493)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8532)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS (netcdfio.F:8538)
   -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8791)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8539)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::LOGMESSAGE (netcdfio.F:8546)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8552)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS (netcdfio.F:8558)
   -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8791)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8559)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:8563)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8564)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:8571)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8576)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8582)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:8585)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8586)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS (netcdfio.F:8588)
   -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8791)
      *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8594)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8613)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8614)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8617)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8619)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8621)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8627)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::NETCDFTERMINATE (netcdfio.F:8630)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::ALLMESSAGE (netcdfio.F:8632)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8638)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:8641)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8642)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS (netcdfio.F:8645)
   -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8791)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8658)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8659)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:8661)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::LOGMESSAGE (netcdfio.F:8663)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS (netcdfio.F:8672)
   -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8791)
      *** Source for routine not found.
  -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8674)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS (netcdfio.F:8680)
   -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8791)
      *** Source for routine not found.
  -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8683)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8693)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8695)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8698)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8700)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8704)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8706)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::CREATEFULLDOMAININDEXLISTS (netcdfio.F:8715)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8817)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8846)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8723)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8724)
     *** Source for routine not found.
  -> NOINLINE: MESSENGER::MAPTOSUBDOMAININTMPI (netcdfio.F:8726)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8730)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8731)
     *** Source for routine not found.
  -> NOINLINE: MESSENGER::MAPTOSUBDOMAINREALMPI (netcdfio.F:8741)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8747)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8748)
     *** Source for routine not found.
  -> NOINLINE: MESSENGER::MAPTOSUBDOMAINREALMPI (netcdfio.F:8757)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:8765)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8766)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8772)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READANDMAPTOSUBDOMAINMAXMINNETCDF
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8532)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8532)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8529)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8529)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8530)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8530)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8530)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8530)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8525)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8525)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8526)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8526)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8526)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8526)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8521)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8521)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8522)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8522)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8522)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8522)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8517)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8517)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8517)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8517)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8518)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8518)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8518)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8518)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8513)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8513)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8514)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8514)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8514)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8514)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8509)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8509)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8509)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8509)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8510)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8510)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8510)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8510)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8505)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8505)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8506)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8506)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8506)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8506)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8501)
    <Unvectorized loop.>
    *** Unvectorizable data type. : VN (netcdfio.F:8501)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8502)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8502)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8502)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TVN (netcdfio.F:8502)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8545)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8545)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:8545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8545)
    <Unvectorized loop.>
    *** Unvectorizable data type. : %FILENAME (netcdfio.F:8545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8546)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8546)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8591)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8591)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8621)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8621)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8632)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8632)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8627)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8627)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8658)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8658)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8661)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8661)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8663)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8663)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8828)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8828)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8828)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8838)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8838)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8838)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8739)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8739)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8739)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8742)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8742)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8742)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8726)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8726)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8726)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8726)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8726)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8726)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8726)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8726)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8755)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8755)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8755)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8758)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8758)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8758)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8576)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8576)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8552)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:8552)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READANDMAPTOSUBDOMAINMAXMINNETCDF
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 50 [s0-s12 s15-s16 s18-s40 s52-s63]
      Vector registers         : 14 [v50-v63]
      Vector mask registers    :  1 [vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 14848 bytes
      Register spill area      :  4560 bytes
      Parameter area           :   104 bytes
      Register save area       :   176 bytes
      User data area           : 10000 bytes
      Others                   :     8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8532)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8529)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8530)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8530)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8525)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8526)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8526)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8521)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8522)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8522)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8517)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8517)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8518)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8518)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8513)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8514)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8514)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8509)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8509)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8510)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8510)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8505)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8506)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8506)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8501)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8502)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8502)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8545)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8545)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:8545)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:8546)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8591)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8621)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8632)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8627)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8658)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8661)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8663)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8828)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END

  LOOP BEGIN: (netcdfio.F:8838)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END

  LOOP BEGIN: (netcdfio.F:8739)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8742)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8726)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8755)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8758)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:8576)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:8552)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  8791: inl(1212): Source for routine not found.: MESSENGER::MSG_LBCAST


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8781:                 subroutine communicateMapToSubdomainMaxMinNetcdfStatus(communicateStatus)
  8782:           !-----------------------------------------------------------------------
  8783:           #ifdef CMPI
  8784:                     use messenger,only: msg_lbcast
  8785:           #endif
  8786:                     implicit none
  8787:                     logical,intent(inout) :: communicateStatus
  8788:                     logical :: tmp(1)
  8789:           #ifdef CMPI
  8790:                     tmp(1) = communicateStatus
  8791:                     call msg_lbcast(tmp,1)
  8792:                     communicateStatus = tmp(1)
  8793:           #endif
  8794:           !-----------------------------------------------------------------------
  8795:                 end subroutine communicateMapToSubdomainMaxMinNetcdfStatus


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
INLINE LIST

  ROOT: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS (netcdfio.F:8781)
  -> NOINLINE: MESSENGER::MSG_LBCAST (netcdfio.F:8791)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::COMMUNICATEMAPTOSUBDOMAINMAXMINNETCDFSTATUS
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 14 [s0-s1 s8-s12 s15-s16 s23-s24 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 240 bytes
      Register spill area      :   0 bytes
      Parameter area           :  16 bytes
      Register save area       : 176 bytes
      User data area           :  48 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATEFULLDOMAININDEXLISTS
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  8817: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  8828: vec( 101): Vectorized loop.
  8838: vec( 101): Vectorized loop.
  8846: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATEFULLDOMAININDEXLISTS
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8811:                 subroutine createFullDomainIndexLists()
  8812:                 use mesh, only : ne, np
  8813:                 use global, only : nodes_lg, imap_el_lg
  8814:                 implicit none
  8815:                 integer :: sd_element_number
  8816:                 integer :: sd_node_number
  8817:                 call setMessageSource("createFullDomainIndexLists")
  8818:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8819:                 call allMessage(DEBUG,"Enter.")
  8820:           #endif
  8821:                 ! make a list of full domain nodes that correspond to this
  8822:                 ! subdomain's nodes
  8823:                 allocate(fullDomainNodeList(np))
  8824:                 ! loop over subdomain indexes to form a list of corresponding
  8825:                 ! fulldomain indexes
  8826:                 forall (sd_node_number=1:np)
  8827:                    ! get the corresponding fulldomain indexes
  8828: V------>           fullDomainNodeList(sd_node_number)
  8829: V------        &         = ABS(nodes_lg(sd_node_number))
  8830:                 end forall
  8831:                 ! make a list of full domain elements that correspond to this
  8832:                 ! subdomain's elements
  8833:                 allocate(fullDomainElementList(ne))
  8834:                 ! loop over subdomain indexes to form a list of corresponding
  8835:                 ! fulldomain indexes
  8836:                 forall (sd_element_number=1:ne)
  8837:                    ! get the corresponding fulldomain indexes
  8838: V------>           fullDomainElementList(sd_element_number)
  8839: V------        &         = abs(imap_el_lg(sd_element_number))
  8840:                 end forall
  8841:                 fullDomainIndexListsInitialized = .true.
  8842:           
  8843:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8844:                 call allMessage(DEBUG,"Return.")
  8845:           #endif
  8846:                 call unsetMessageSource()
  8847:           C-----------------------------------------------------------------------
  8848:                 end subroutine createFullDomainIndexLists


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATEFULLDOMAININDEXLISTS
INLINE LIST

  ROOT: NETCDFIO::CREATEFULLDOMAININDEXLISTS (netcdfio.F:8811)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8817)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8846)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATEFULLDOMAININDEXLISTS
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8828)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8828)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8828)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8838)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8838)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8838)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::CREATEFULLDOMAININDEXLISTS
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 23 [s0-s3 s8-s12 s15-s16 s18 s23-s25 s56-s63]
      Vector registers         :  6 [v58-v63]
      Vector mask registers    :  1 [vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 8400 bytes
      Register spill area      : 4096 bytes
      Parameter area           :   32 bytes
      Register save area       :  176 bytes
      User data area           : 4096 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8828)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END

  LOOP BEGIN: (netcdfio.F:8838)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  8870: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  8879: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  8880: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  8881: vec( 101): Vectorized loop.
  8885: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT
  8887: vec( 101): Vectorized loop.
  8894: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8857:                 SUBROUTINE  mapFullDomainToSubdomain(ncid, fd_array_size,
  8858:                &       data_id, subdomain_reals, subdomain_ints)
  8859:                 IMPLICIT NONE
  8860:                 INTEGER, INTENT(in) :: ncid ! file id to pull data from
  8861:                 INTEGER, INTENT(in) :: fd_array_size ! highest index in fulldomain array
  8862:                 INTEGER, INTENT(in) :: data_id ! netcdf variable id in file
  8863:                 REAL(8), OPTIONAL, INTENT(out) :: subdomain_reals(:) ! we need
  8864:                 INTEGER, OPTIONAL, INTENT(out) :: subdomain_ints(:)  ! we need
  8865:           C
  8866:                 REAL(8), ALLOCATABLE :: work_reals(:) ! holds fulldomain data
  8867:                 INTEGER, ALLOCATABLE :: work_ints(:)   ! holds fulldomain data
  8868:                 INTEGER iret ! success or failure of the netcdf call
  8869:           C
  8870:                 call setMessageSource("mapFullDomainToSubDomain")
  8871:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8872:                 call allMessage(DEBUG,"Enter.")
  8873:           #endif
  8874:           
  8875:                 ! grab array of full domain data from netcdf file and pull out the
  8876:                 ! data that is needed for this subdomain
  8877:                 if (present(subdomain_reals)) then
  8878:                    allocate(work_reals(fd_array_size))
  8879:                    iret = nf90_get_var(ncid, data_id, work_reals)
  8880:                    call check_err(iret)
  8881: V======>G          subdomain_reals(:) = work_reals(fullDomainIndexList)
  8882:                    deallocate(work_reals)
  8883:                 else
  8884:                    allocate(work_ints(fd_array_size))
  8885:                    iret = nf90_get_var(ncid, data_id, work_ints)
  8886:                    call check_err(iret)
  8887: V======>G          subdomain_ints(:) = work_ints(fullDomainIndexList)
  8888:                    deallocate(work_ints)
  8889:                 endif
  8890:           C
  8891:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8892:                 call allMessage(DEBUG,"Return.")
  8893:           #endif
  8894:                 call unsetMessageSource()
  8895:           C-----------------------------------------------------------------------
  8896:                 END SUBROUTINE mapFulldomainToSubdomain


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
INLINE LIST

  ROOT: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:8857)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 36 [s0-s6 s8-s12 s15-s16 s18-s19 s23-s32 s54-s63]
      Vector registers         :  6 [v58-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 416 bytes
      Register spill area      :   0 bytes
      Parameter area           :  56 bytes
      Register save area       : 176 bytes
      User data area           : 176 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  8921: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  8928: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL
  8929: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  8930: opt(1592): Outer loop unrolled inside inner loop.: I
  8931: vec( 101): Vectorized loop.
  8938: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8908:                 SUBROUTINE  mapFullDomainToSubdomainMByNP(ncid, m, n,
  8909:                &       data_id, subdomain_reals)
  8910:                 IMPLICIT NONE
  8911:                 INTEGER, INTENT(in) :: ncid ! file id to pull data from
  8912:                 INTEGER, INTENT(in) :: m    ! non-nodal dimension
  8913:                 INTEGER, INTENT(in) :: n    ! number of horizontal nodes
  8914:                 INTEGER, INTENT(in) :: data_id ! netcdf variable id in file
  8915:                 REAL(8), OPTIONAL, INTENT(out) :: subdomain_reals(:,:) ! we need
  8916:           C
  8917:                 REAL(8), ALLOCATABLE :: work_reals(:,:) ! holds fulldomain data
  8918:                 INTEGER iret ! success or failure of the netcdf call
  8919:                 INTEGER i    ! loop counter
  8920:           C
  8921:                 call setMessageSource("mapFullDomainToSubDomainMbyNP")
  8922:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8923:                 call allMessage(DEBUG,"Enter.")
  8924:           #endif
  8925:                 ! grab array of full domain data from netcdf file and pull out the
  8926:                 ! data that is needed for this subdomain
  8927:                 allocate(work_reals(m,n))
  8928:                 iret = nf90_get_var(ncid, data_id, work_reals)
  8929:                 call check_err(iret)
  8930: U------>        do i=1,size(subdomain_reals(1,:))
  8931: |V=====>           subdomain_reals(:,i) = work_reals(:,fullDomainIndexList(i))
  8932: U------         end do
  8933:                 deallocate(work_reals)
  8934:           C
  8935:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8936:                 call allMessage(DEBUG,"Return.")
  8937:           #endif
  8938:                 call unsetMessageSource()
  8939:           C-----------------------------------------------------------------------
  8940:                 END SUBROUTINE mapFulldomainToSubdomainMByNP


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
INLINE LIST

  ROOT: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP (netcdfio.F:8908)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8921)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8928)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8929)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8938)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8931)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:8931)
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 59 [s0-s12 s15-s16 s18-s20 s23-s63]
      Vector registers         :  5 [v59-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 416 bytes
      Register spill area      :   0 bytes
      Parameter area           :  56 bytes
      Register save area       : 176 bytes
      User data area           : 176 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 49
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 87
    *** The number of SCALAR REGISTER TRANSFER          : 35

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  8963: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  8970: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL
  8971: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  8972: opt(1592): Outer loop unrolled inside inner loop.
  8972: vec( 101): Vectorized loop.
  8978: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8951:                 SUBROUTINE  mapFullDomainToSubdomainNPByM(ncid, m, n,
  8952:                &       data_id, subdomain_reals)
  8953:                 IMPLICIT NONE
  8954:                 INTEGER, INTENT(in) :: ncid ! file id to pull data from
  8955:                 INTEGER, INTENT(in) :: m    ! non-nodal dimension
  8956:                 INTEGER, INTENT(in) :: n    ! number of horizontal nodes
  8957:                 INTEGER, INTENT(in) :: data_id ! netcdf variable id in file
  8958:                 REAL(8), OPTIONAL, INTENT(out) :: subdomain_reals(:,:) ! we need
  8959:           C
  8960:                 REAL(8), ALLOCATABLE :: work_reals(:,:) ! holds fulldomain data
  8961:                 INTEGER iret ! success or failure of the netcdf call
  8962:           C
  8963:                 call setMessageSource("mapFullDomainToSubDomainNPbyM")
  8964:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8965:                 call allMessage(DEBUG,"Enter.")
  8966:           #endif
  8967:                 ! grab array of full domain data from netcdf file and pull out the
  8968:                 ! data that is needed for this subdomain
  8969:                 allocate(work_reals(n,m))
  8970:                 iret = nf90_get_var(ncid, data_id, work_reals)
  8971:                 call check_err(iret)
  8972: U======>G       subdomain_reals(:,:) = work_reals(fullDomainIndexList,:)
  8973:                 deallocate(work_reals)
  8974:           C
  8975:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  8976:                 call allMessage(DEBUG,"Return.")
  8977:           #endif
  8978:                 call unsetMessageSource()
  8979:           C-----------------------------------------------------------------------
  8980:                 END SUBROUTINE mapFulldomainToSubdomainNPByM


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
INLINE LIST

  ROOT: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:8951)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 54 [s0-s6 s8-s12 s15-s16 s18-s19 s23-s30 s34-s63]
      Vector registers         : 12 [v52-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 384 bytes
      Register spill area      :   0 bytes
      Parameter area           :  56 bytes
      Register save area       : 176 bytes
      User data area           : 144 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 56
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 524
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::GETDIMENSIONS
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  9003: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9011: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::GETDIMENSIONS
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  8990:                 SUBROUTINE getDimensions(ncid, time_struct, mesh_struct,
  8991:                &    file_struct)
  8992:                 IMPLICIT NONE
  8993:                 integer :: ncid  ! file id
  8994:                 type(timeData) :: time_struct
  8995:                 type(fileData) :: file_struct
  8996:                 type(meshStructure) :: mesh_struct
  8997:           C
  8998:                 integer :: iret ! success or failure of netcdf call
  8999:                 integer :: ndim      ! number of dimensions in the netcdf file
  9000:                 integer :: nvar      ! number of variables in the netcdf file
  9001:                 integer :: natt      ! number of attributes in the netcdf file
  9002:           C
  9003:                 call setMessageSource("getDimensions")
  9004:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9005:                 call allMessage(DEBUG,"Enter.")
  9006:           #endif
  9007:           !
  9008:           !     Inquire variables
  9009:                 time_struct%timenc_dim_id = 0
  9010:                 iret=nf90_inquire(ncid,ndim,nvar,natt,time_struct%timenc_dim_id)
  9011:                 CALL check_err(iret)
  9012:                  iret=nf90_inquire_dimension(ncid, time_struct%timenc_dim_id,
  9013:                &        len=file_struct%record_counter)
  9014:                  CALL check_err(iret)
  9015:           C
  9016:                 iret=nf90_inq_dimid(ncid, "node", mesh_struct%num_nodes_dim_id)
  9017:                 CALL check_err(iret)
  9018:                 iret=nf90_inquire_dimension(ncid, mesh_struct%num_nodes_dim_id,
  9019:                &     len=mesh_struct%num_nodes)
  9020:                 CALL check_err(iret)
  9021:           C
  9022:                 iret=nf90_inq_dimid(ncid, "nfaces", mesh_struct%num_elems_dim_id)
  9023:                 CALL check_err(iret)
  9024:                 iret=nf90_inquire_dimension(ncid, mesh_struct%num_elems_dim_id,
  9025:                &     len=mesh_struct%num_elems)
  9026:                 CALL check_err(iret)
  9027:           C
  9028:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9029:                 call allMessage(DEBUG,"Return.")
  9030:           #endif
  9031:                 call unsetMessageSource()
  9032:           C-----------------------------------------------------------------------
  9033:                 END SUBROUTINE getDimensions


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::GETDIMENSIONS
INLINE LIST

  ROOT: NETCDFIO::GETDIMENSIONS (netcdfio.F:8990)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::GETDIMENSIONS
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::GETDIMENSIONS
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 24 [s0-s5 s8-s12 s15-s16 s23-s30 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 240 bytes
      Register spill area      :   0 bytes
      Parameter area           :  48 bytes
      Register save area       : 176 bytes
      User data area           :  16 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONIC
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  9068: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  9089: inl(1212): Source for routine not found.: MESSENGER::MSG_FINI
  9093: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  9094: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  9098: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  9116: vec( 101): Vectorized loop.
  9138: vec( 101): Vectorized loop.
  9164: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  9167: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL
  9171: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
  9191: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
  9194: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
  9213: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
  9242: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
  9245: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP
  9255: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_FOURBYTEINT
  9303: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_EIGHTBYTEREAL
  9326: vec( 103): Unvectorized loop.
  9326: vec( 110): Vectorization obstructive procedure reference.: NETCDF::NF90_GET_VAR_TEXT
  9326: vec( 110): Vectorization obstructive procedure reference.: NETCDF_ERROR::CHECK_ERR
  9331: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_TEXT
  9341: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  9353: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONIC
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  9042:                 SUBROUTINE readNetCDFHotstartHarmonic(lun)
  9043:                 USE SIZES, ONLY : MNPROC, globaldir, myproc
  9044:                 USE GLOBAL, ONLY : OutputDataDescript_t, NODES_LG,
  9045:                &                   IMAP_STAE_LG, NSTAE, IMAP_STAV_LG, NSTAV
  9046:                 USE HARM, ONLY : GLOELV, STAELV, GLOULV, GLOVLV, STAULV, STAVLV,
  9047:                &                 NHASE, NHASV, NHAGE, NHAGV, MNHARF, ICHA, INZ,
  9048:                &                 INZ, INF, IMM, INSTAE, INSTAV, INHASE, INHASV,
  9049:                &                 INHASE, INHAGE, INHAGV, ICALL, INFREQ, TIMEUD,
  9050:                &                 ITUD, HA, INAMEFR, INP, IFF, IFACE, IFREQ
  9051:                 USE MESH, ONLY : NP
  9052:           #ifdef CMPI
  9053:                 USE MESSENGER, ONLY : MSG_FINI
  9054:           #endif
  9055:                 IMPLICIT NONE
  9056:           C
  9057:                 INTEGER, intent(in) :: lun
  9058:           C
  9059:                 INTEGER i,j
  9060:                 INTEGER counti(1), starti(1), n
  9061:                 INTEGER kount(3), start(3)
  9062:                 INTEGER hakount(2), hastart(2)
  9063:                 INTEGER sd_station_number
  9064:                 INTEGER iret ! success or failure of the netcdf call
  9065:                 INTEGER tempid
  9066:                 type(OutputDataDescript_t) :: descript
  9067:           C
  9068:                 call setMessageSource("readNetCDFHotstartHarmonic")
  9069:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9070:                 call allMessage(DEBUG,"Enter.")
  9071:           #endif
  9072:           C
  9073:           C     Point to the hotstart file we want to work on
  9074:                 IF (lun.eq.67) THEN
  9075:                    hs => hs67
  9076:                 ELSE
  9077:                    hs => hs68
  9078:                 ENDIF
  9079:           C
  9080:                 hs%myMesh => adcircMesh
  9081:                 hs%myFile%fileFound = .false.
  9082:           C
  9083:           C     Open fulldomain file
  9084:                 INQUIRE(FILE=hs%myFile%FILENAME,EXIST=hs%myFile%fileFound)
  9085:                 IF (hs%myFile%fileFound.eqv..false.) THEN
  9086:                    WRITE(*,*) "ERROR: The file ",hs%myFile%FILENAME,
  9087:                &      " was not found; ADCIRC terminating."
  9088:           #ifdef CMPI
  9089:                       CALL MSG_FINI()
  9090:           #endif
  9091:                    CALL EXIT(1)
  9092:                 ELSE
  9093:                    iret = nf90_open(hs%myFile%FILENAME, NF90_NOWRITE, hs%ncid)
  9094:                    CALL check_err(iret)
  9095:                 ENDIF
  9096:           !
  9097:           !     Inquire variables
  9098:         I       call getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  9099:           C
  9100:           C     elevation station dimension
  9101:                 IF (NHASE.ne.0) THEN
  9102:                    iret=nf90_inq_dimid(hs%ncid,"elevstation",
  9103:                &        hs%staelv%num_sta_dim_id)
  9104:                    CALL check_err(iret)
  9105:                    iret=nf90_inquire_dimension(hs%ncid, hs%staelv%num_sta_dim_id,
  9106:                &        len=hs%staelv%num_stations)
  9107:                    CALL check_err(iret)
  9108:                    IF (MNPROC.gt.1) THEN
  9109:                       ! make a list of full domain elevation stations that
  9110:                       ! correspond to this subdomain's stations
  9111:                   allocate(fullDomainElevationStationList(hs%staelv%num_stations))
  9112:                       ! loop over subdomain indexes to form a list of corresponding
  9113:                       ! fulldomain indexes
  9114:                       forall (sd_station_number=1:nstae)
  9115:                          ! get the corresponding fulldomain indexes
  9116: V------>                 fullDomainElevationStationList(sd_station_number)
  9117: V------        &          = ABS(imap_stae_lg(sd_station_number))
  9118:                       end forall
  9119:                    ENDIF
  9120:                 ENDIF
  9121:           C     velocity station dimension
  9122:                 IF (NHASV.ne.0) THEN
  9123:                    iret=nf90_inq_dimid(hs%ncid,"velstation",
  9124:                &        hs%stavellv%num_sta_dim_id)
  9125:                    CALL check_err(iret)
  9126:                    iret=nf90_inquire_dimension(hs%ncid,hs%stavellv%num_sta_dim_id,
  9127:                &        len=hs%stavellv%num_stations)
  9128:                    CALL check_err(iret)
  9129:                    IF (MNPROC.gt.1) THEN
  9130:                       ! make a list of full domain velocity stations that
  9131:                       ! correspond to this subdomain's velocity stations
  9132:                       allocate(fullDomainVelocityStationList
  9133:                &          (hs%stavellv%num_stations))
  9134:                       ! loop over subdomain indexes to form a list of corresponding
  9135:                       ! fulldomain indexes
  9136:                       forall (sd_station_number=1:nstav)
  9137:                          ! get the corresponding fulldomain indexes
  9138: V------>                 fullDomainVelocityStationList(sd_station_number)
  9139: V------        &            = ABS(imap_stav_lg(sd_station_number))
  9140:                       end forall
  9141:                    ENDIF
  9142:                 ENDIF
  9143:           C
  9144:           C     Point to the hotstart file we want to work on.
  9145:                 IF (lun.eq.67) THEN
  9146:                    hs => hs67
  9147:                 ELSE
  9148:                    hs => hs68
  9149:                 ENDIF
  9150:           C
  9151:                 hs%myFile%record_counter = 1
  9152:           C
  9153:                 kount(1)=MNHARF*2             ! for load vector data
  9154:                 kount(2)=hs%myMesh%num_nodes  ! for nodal data
  9155:                 kount(3)=hs%myTime%timenc_len
  9156:                 start(1)=1
  9157:                 start(2)=1
  9158:                 start(3)=hs%myFile%record_counter
  9159:           C
  9160:           C     Read in fulldomain load vector data
  9161:           C     GLOELV - full domain elevation
  9162:                 fullDomainIndexList => fullDomainNodeList
  9163:                 IF (NHAGE.ne.0) THEN
  9164:                    iret=nf90_inq_varid(hs%ncid,"gloelv",hs%gloelv%nodal_data_id)
  9165:                    CALL check_err(iret)
  9166:                    IF (MNPROC.eq.1) THEN
  9167:                       iret = nf90_get_var(hs%ncid, hs%gloelv%nodal_data_id,
  9168:                &           GLOELV, start, kount)
  9169:                       CALL check_err(iret)
  9170:                    ELSE
  9171:         I             call mapFullDomainToSubdomainMByNP(hs%ncid,
  9172:                &         2*MNHARF, hs%myMesh%num_nodes,
  9173:                &         hs%gloelv%nodal_data_id, subdomain_reals=GLOELV)
  9174:                    ENDIF
  9175:                 ENDIF
  9176:           C     GLOULV - fulldomain u velocity
  9177:           C     GLOVLV - fulldomain v velocity
  9178:                 IF (NHAGV.ne.0) THEN
  9179:                  iret=nf90_inq_varid(hs%ncid,"gloulv",hs%glovellv%u_nodal_data_id)
  9180:                    CALL check_err(iret)
  9181:                  iret=nf90_inq_varid(hs%ncid,"glovlv",hs%glovellv%v_nodal_data_id)
  9182:                    CALL check_err(iret)
  9183:                    IF (MNPROC.eq.1) THEN
  9184:                       iret = nf90_get_var(hs%ncid, hs%glovellv%u_nodal_data_id,
  9185:                &          GLOULV, start, kount)
  9186:                       CALL check_err(iret)
  9187:                       iret = nf90_get_var(hs%ncid, hs%glovellv%v_nodal_data_id,
  9188:                &          GLOVLV, start, kount)
  9189:                       CALL check_err(iret)
  9190:                    ELSE
  9191:         I             call mapFullDomainToSubdomainMByNP(hs%ncid,
  9192:                &         2*MNHARF, hs%myMesh%num_nodes,
  9193:                &         hs%glovellv%u_nodal_data_id, subdomain_reals=GLOULV)
  9194:         I             call mapFullDomainToSubdomainMByNP(hs%ncid,
  9195:                &         2*MNHARF, hs%myMesh%num_nodes,
  9196:                &         hs%glovellv%v_nodal_data_id, subdomain_reals=GLOVLV)
  9197:                    ENDIF
  9198:                 ENDIF
  9199:           C     STAELV - station elevation
  9200:                 IF (NHASE.ne.0) THEN
  9201:                    fullDomainIndexList => fullDomainElevationStationList
  9202:                    iret=nf90_inq_varid(hs%ncid,"staelv",hs%staelv%station_data_id)
  9203:                    CALL check_err(iret)
  9204:                    IF (MNPROC.eq.1) THEN
  9205:                       kount(2) = hs%staelv%num_stations ! for elevation stations
  9206:                       iret = nf90_get_var(hs%ncid, hs%staelv%station_data_id,
  9207:                &          STAELV, start, kount)
  9208:                       CALL check_err(iret)
  9209:                    ELSE
  9210:                    ! jgf52.30.12: Fix segfault by checking number of stations
  9211:                    ! (provided by Damrongsak Wirasaet)
  9212:                       IF ( NSTAE > 0 ) THEN
  9213:         I                call mapFullDomainToSubdomainMByNP(hs%ncid,
  9214:                &            2*MNHARF, hs%staelv%num_stations,
  9215:                &            hs%staelv%station_data_id, subdomain_reals=STAELV)
  9216:                       ENDIF
  9217:                    ENDIF
  9218:                 ENDIF
  9219:           C     STAULV/STAVLV - station u and v velocity
  9220:           
  9221:                 IF (NHASV.ne.0) THEN
  9222:           
  9223:                    fullDomainIndexList => fullDomainVelocityStationList
  9224:                    kount(2) = hs%stavellv%num_stations ! for velocity stations
  9225:                    iret=nf90_inq_varid(hs%ncid,"staulv",
  9226:                &        hs%stavellv%u_station_data_id)
  9227:                    CALL check_err(iret)
  9228:                    iret=nf90_inq_varid(hs%ncid,"stavlv",
  9229:                &        hs%stavellv%v_station_data_id)
  9230:                    CALL check_err(iret)
  9231:                    IF (MNPROC.eq.1) THEN
  9232:                       iret = nf90_get_var(hs%ncid, hs%stavellv%u_station_data_id,
  9233:                &          STAULV, start, kount)
  9234:                       CALL check_err(iret)
  9235:                       iret = nf90_get_var(hs%ncid, hs%stavellv%v_station_data_id,
  9236:                &          STAVLV, start, kount)
  9237:                       CALL check_err(iret)
  9238:                    ELSE
  9239:                       ! jgf52.30.12: Fix segfault by checking number of stations
  9240:                       ! (provided by Damrongsak Wirasaet)
  9241:                       IF ( NSTAV > 0 ) THEN
  9242:         I                call mapFullDomainToSubdomainMByNP(hs%ncid,
  9243:                &            2*MNHARF, hs%stavellv%num_stations,
  9244:                &            hs%stavellv%u_station_data_id, subdomain_reals=STAULV)
  9245:         I                call mapFullDomainToSubdomainMByNP(hs%ncid,
  9246:                &            2*MNHARF, hs%stavellv%num_stations,
  9247:                &            hs%stavellv%v_station_data_id, subdomain_reals=STAVLV)
  9248:                       ENDIF
  9249:                    ENDIF
  9250:                 ENDIF
  9251:           C
  9252:           C     Read in model parameters to ADCIRC variables
  9253:                 iret = nf90_inq_varid(hs%ncid,"icha", tempid)
  9254:                 CALL check_err(iret)
  9255:                 iret = nf90_get_var(hs%ncid, tempid, icha)
  9256:                 CALL check_err(iret)
  9257:                 iret = nf90_inq_varid(hs%ncid,"nz", tempid)
  9258:                 CALL check_err(iret)
  9259:                 iret = nf90_get_var(hs%ncid, tempid, inz)
  9260:                 CALL check_err(iret)
  9261:                 iret = nf90_inq_varid(hs%ncid,"nf", tempid)
  9262:                 CALL check_err(iret)
  9263:                 iret = nf90_get_var(hs%ncid, tempid, inf)
  9264:                 CALL check_err(iret)
  9265:                 iret = nf90_inq_varid(hs%ncid,"mm", tempid)
  9266:                 CALL check_err(iret)
  9267:                 iret = nf90_get_var(hs%ncid, tempid, imm)
  9268:                 CALL check_err(iret)
  9269:                 iret = nf90_inq_varid(hs%ncid,"nstae", tempid)
  9270:                 CALL check_err(iret)
  9271:                 iret = nf90_get_var(hs%ncid, tempid, instae)
  9272:                 CALL check_err(iret)
  9273:                 iret = nf90_inq_varid(hs%ncid,"nstav", tempid)
  9274:                 CALL check_err(iret)
  9275:                 iret = nf90_get_var(hs%ncid, tempid, instav)
  9276:                 CALL check_err(iret)
  9277:                 iret = nf90_inq_varid(hs%ncid,"nhase", tempid)
  9278:                 CALL check_err(iret)
  9279:                 iret = nf90_get_var(hs%ncid, tempid, inhase)
  9280:                 CALL check_err(iret)
  9281:                 iret = nf90_inq_varid(hs%ncid,"nhasv", tempid)
  9282:                 CALL check_err(iret)
  9283:                 iret = nf90_get_var(hs%ncid, tempid, inhasv)
  9284:                 CALL check_err(iret)
  9285:                 iret = nf90_inq_varid(hs%ncid,"nhage", tempid)
  9286:                 CALL check_err(iret)
  9287:                 iret = nf90_get_var(hs%ncid, tempid, inhage)
  9288:                 CALL check_err(iret)
  9289:                 iret = nf90_inq_varid(hs%ncid,"nhagv", tempid)
  9290:                 CALL check_err(iret)
  9291:                 iret = nf90_get_var(hs%ncid, tempid, inhagv)
  9292:                 CALL check_err(iret)
  9293:                 iret = nf90_inq_varid(hs%ncid,"icall", tempid)
  9294:                 CALL check_err(iret)
  9295:                 iret = nf90_get_var(hs%ncid, tempid, icall)
  9296:                 CALL check_err(iret)
  9297:                 iret = nf90_inq_varid(hs%ncid,"nfreq", tempid)
  9298:                 CALL check_err(iret)
  9299:                 iret = nf90_get_var(hs%ncid, tempid, infreq)
  9300:                 CALL check_err(iret)
  9301:                 iret = nf90_inq_varid(hs%ncid,"timeud", tempid)
  9302:                 CALL check_err(iret)
  9303:                 iret = nf90_get_var(hs%ncid, tempid, timeud)
  9304:                 CALL check_err(iret)
  9305:                 iret = nf90_inq_varid(hs%ncid,"itud", tempid)
  9306:                 CALL check_err(iret)
  9307:                 iret = nf90_get_var(hs%ncid, tempid, itud)
  9308:                 CALL check_err(iret)
  9309:           C
  9310:           C     Variables that are used to check that harmonic analysis data match
  9311:           C     the simulation that is reading this hotstart file.
  9312:                 inp = hs%myMesh%num_nodes
  9313:           C
  9314:           C     left hand side
  9315:                 hakount(1) = 2*MNHARF
  9316:                 hakount(2) = 2*MNHARF
  9317:                 hastart(1) = 1
  9318:                 hastart(2) = 1
  9319:                 iret = nf90_inq_varid(hs%ncid,"ha",hs%ha_id)
  9320:                 CALL check_err(iret)
  9321:                 iret = nf90_get_var(hs%ncid, hs%ha_id, ha, hastart, hakount)
  9322:                 CALL check_err(iret)
  9323:           C     frequency names
  9324:                 iret = nf90_inq_varid(hs%ncid,"namefr",hs%namefr_id)
  9325:                 CALL check_err(iret)
  9326: +------>        do i=1,mnharf
  9327: |                  start(1)=1
  9328: |                  start(2)=i
  9329: |                  kount(1)= len(inamefr(i))
  9330: |                  kount(2)=1
  9331: |                 iret = nf90_get_var(hs%ncid,hs%namefr_id,inamefr(i),start,kount)
  9332: |                  CALL check_err(iret)
  9333: +------         end do
  9334:           C     harmonic constituents
  9335:                 start(1) = 1
  9336:                 start(2) = 1
  9337:                 kount(1) = MNHARF ! for constituents
  9338:                 kount(2) = 1
  9339:                 iret = nf90_inq_varid(hs%ncid,"hafreq",hs%hafreq_id)
  9340:                 CALL check_err(iret)
  9341:                 iret = nf90_get_var(hs%ncid, hs%hafreq_id, ifreq, start, kount)
  9342:                 CALL check_err(iret)
  9343:                 iret = nf90_inq_varid(hs%ncid,"haff",hs%haff_id)
  9344:                 CALL check_err(iret)
  9345:                 iret = nf90_get_var(hs%ncid, hs%haff_id, iff, start, kount)
  9346:                 CALL check_err(iret)
  9347:                 iret = nf90_inq_varid(hs%ncid,"haface",hs%haface_id)
  9348:                 CALL check_err(iret)
  9349:                 iret = nf90_get_var(hs%ncid, hs%haface_id, iface, start, kount)
  9350:                 CALL check_err(iret)
  9351:           C
  9352:           C     now close the netcdf file
  9353:                 iret = nf90_close(hs%ncid)
  9354:                 CALL check_err(iret)
  9355:           C
  9356:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9357:                 call allMessage(DEBUG,"Return.")
  9358:           #endif
  9359:                 call unsetMessageSource()
  9360:           C-----------------------------------------------------------------------
  9361:                 END SUBROUTINE readNetCDFHotstartHarmonic


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONIC
INLINE LIST

  ROOT: NETCDFIO::READNETCDFHOTSTARTHARMONIC (netcdfio.F:9042)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9068)
     *** Source for routine not found.
  -> NOINLINE: MESSENGER::MSG_FINI (netcdfio.F:9089)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:9093)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9094)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:9098)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9102)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9104)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9105)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9107)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9123)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9125)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9126)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9128)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9164)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9165)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9167)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9169)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP (netcdfio.F:9171)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8928)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8929)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8938)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9179)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9180)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9181)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9182)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9184)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9186)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9187)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9189)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP (netcdfio.F:9191)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8928)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8929)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8938)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP (netcdfio.F:9194)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8928)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8929)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8938)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9202)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9203)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9206)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9208)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP (netcdfio.F:9213)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8928)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8929)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8938)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9225)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9227)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9228)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9230)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9232)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9234)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9235)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9237)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP (netcdfio.F:9242)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8928)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8929)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8938)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINMBYNP (netcdfio.F:9245)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8921)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8928)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8929)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8938)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9253)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9254)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9255)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9256)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9257)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9258)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9259)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9260)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9261)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9262)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9263)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9264)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9265)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9266)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9267)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9268)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9269)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9270)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9271)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9272)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9273)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9274)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9275)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9276)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9277)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9278)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9279)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9280)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9281)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9282)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9283)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9284)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9285)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9286)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9287)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9288)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9289)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9290)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9291)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9292)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9293)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9294)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9295)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9296)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9297)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9298)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9299)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9300)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9301)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9302)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_EIGHTBYTEREAL (netcdfio.F:9303)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9304)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9305)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9306)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9307)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9308)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9319)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9320)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9321)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9322)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9324)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9325)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_TEXT (netcdfio.F:9331)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9332)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9339)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9340)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9341)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9342)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9343)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9344)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9345)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9346)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9347)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9348)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9349)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9350)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:9353)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9354)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9359)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONIC
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:9116)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:9116)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:9116)
  LOOP END

  LOOP BEGIN: (netcdfio.F:9138)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:9138)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:9138)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8931)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8931)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8931)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8931)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8931)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8931)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8930)

    LOOP BEGIN: (netcdfio.F:8931)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:8931)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:8931)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:9326)
    <Unvectorized loop.>
    *** Vectorization obstructive procedure reference. : NETCDF::NF90_GET_VAR_TEXT (netcdfio.F:9326)
    *** Vectorization obstructive procedure reference. : NETCDF_ERROR::CHECK_ERR (netcdfio.F:9326)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:56 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONIC
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 61 [s0-s12 s15-s16 s18-s63]
      Vector registers         : 36 [v28-v63]
      Vector mask registers    :  1 [vm15]
      VREG directive           :  0

  Routine stack
    Total size                 : 16384 bytes
      Register spill area      :  4576 bytes
      Parameter area           :   104 bytes
      Register save area       :   176 bytes
      User data area           : 11520 bytes
      Others                   :     8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:9116)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END

  LOOP BEGIN: (netcdfio.F:9138)
    *** Estimated execution cycle                       : 169
    *** The number of VECTOR REGISTER RESTORE
          Total                                         : 1
            Over basic blocks                           : 1
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 49
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 87
    *** The number of SCALAR REGISTER TRANSFER          : 35

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 49
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 87
    *** The number of SCALAR REGISTER TRANSFER          : 35

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 49
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 87
    *** The number of SCALAR REGISTER TRANSFER          : 35

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 49
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 87
    *** The number of SCALAR REGISTER TRANSFER          : 35

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 49
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 87
    *** The number of SCALAR REGISTER TRANSFER          : 35

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 49
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8930)
    *** Estimated execution cycle                       : 87
    *** The number of SCALAR REGISTER TRANSFER          : 35

    LOOP BEGIN: (netcdfio.F:8931)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:9326)
    *** Estimated execution cycle                       : 90
    *** The number of SCALAR REGISTER SPILL
          Total                                         : 1
            Across calls                                : 1
    *** The number of SCALAR REGISTER RESTORE
          Total                                         : 1
            Across calls                                : 1
    *** The number of SCALAR REGISTER TRANSFER          : 6
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONICMEANSVARIANCES
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  9391: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  9412: inl(1212): Source for routine not found.: MESSENGER::MSG_FINI
  9416: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  9417: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  9421: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  9432: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  9437: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  9444: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8885: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT
  9446: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9473: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9475: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9477: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9479: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9487: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_FOURBYTEINT
  9491: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONICMEANSVARIANCES
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  9372:                 SUBROUTINE readNetCDFHotstartHarmonicMeansVariances(lun)
  9373:                 USE SIZES, ONLY : MNPROC, globaldir
  9374:                 USE GLOBAL, ONLY : OutputDataDescript_t, NODES_LG
  9375:                 USE HARM, ONLY : ELAV, ELVA, XVELAV, YVELAV, XVELVA, YVELVA,
  9376:                &                 NTSTEPS, NHAGE, NHAGV
  9377:                 USE MESH, ONLY : NP
  9378:           #ifdef CMPI
  9379:                 USE MESSENGER, ONLY : MSG_FINI
  9380:           #endif
  9381:                 IMPLICIT NONE
  9382:           C
  9383:                 INTEGER, intent(in) :: lun
  9384:           C
  9385:                 INTEGER i,j
  9386:                 INTEGER kount(2), start(2)
  9387:                 INTEGER iret ! success or failure of the netcdf call
  9388:                 INTEGER tempid
  9389:                 type(OutputDataDescript_t) :: descript
  9390:           C
  9391:                 call setMessageSource("readNetCDFHotstartHarmonicMeansVariances")
  9392:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9393:                 call allMessage(DEBUG,"Enter.")
  9394:           #endif
  9395:           C
  9396:           C     Point to the hotstart file we want to work on
  9397:                 IF (lun.eq.67) THEN
  9398:                    hs => hs67
  9399:                 ELSE
  9400:                    hs => hs68
  9401:                 ENDIF
  9402:           C
  9403:                 hs%myMesh => adcircMesh
  9404:                 hs%myFile%fileFound = .false.
  9405:           C
  9406:           C     Open fulldomain file
  9407:                 INQUIRE(FILE=hs%myFile%FILENAME,EXIST=hs%myFile%fileFound)
  9408:                 IF (hs%myFile%fileFound.eqv..false.) THEN
  9409:                    WRITE(*,*) "ERROR: The file ",hs%myFile%FILENAME,
  9410:                &      " was not found; ADCIRC terminating."
  9411:           #ifdef CMPI
  9412:                       CALL MSG_FINI()
  9413:           #endif
  9414:                    CALL EXIT(1)
  9415:                 ELSE
  9416:                    iret = nf90_open(hs%myFile%FILENAME, NF90_NOWRITE, hs%ncid)
  9417:                    CALL check_err(iret)
  9418:                 ENDIF
  9419:           !
  9420:           !     Inquire variables
  9421:         I       call getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  9422:           C
  9423:                 hs%myFile%record_counter = 1
  9424:           C
  9425:                 kount(1)=hs%myMesh%num_nodes  ! for nodal data
  9426:                 kount(2)=hs%myTime%timenc_len
  9427:                 start(1)=1
  9428:                 start(2)=hs%myFile%record_counter
  9429:           C
  9430:                 fullDomainIndexList => fullDomainNodeList
  9431:                 IF (NHAGE.ne.0) THEN
  9432:                    iret=nf90_inq_varid(hs%ncid,"elav",hs%elav%nodal_data_id)
  9433:                    CALL check_err(iret)
  9434:                    iret=nf90_inq_varid(hs%ncid,"elva",hs%elva%nodal_data_id)
  9435:                    CALL check_err(iret)
  9436:                    IF (MNPROC.eq.1) THEN
  9437:                       iret = nf90_get_var(hs%ncid, hs%elav%nodal_data_id,
  9438:                &           ELAV, start, kount)
  9439:                       CALL check_err(iret)
  9440:                       iret = nf90_get_var(hs%ncid, hs%elva%nodal_data_id,
  9441:                &           ELVA, start, kount)
  9442:                    CALL check_err(iret)
  9443:                    ELSE
  9444:         I             call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  9445:                &         hs%elav%nodal_data_id, subdomain_reals=ELAV)
  9446:         I             call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  9447:                &         hs%elva%nodal_data_id, subdomain_reals=ELVA)
  9448:                    ENDIF
  9449:                 ENDIF
  9450:                 IF (NHAGV.ne.0) THEN
  9451:                    iret=nf90_inq_varid(hs%ncid,"xvelav",hs%xvelav%nodal_data_id)
  9452:                    CALL check_err(iret)
  9453:                    iret=nf90_inq_varid(hs%ncid,"yvelav",hs%yvelav%nodal_data_id)
  9454:                    CALL check_err(iret)
  9455:                    iret=nf90_inq_varid(hs%ncid,"xvelva",hs%xvelva%nodal_data_id)
  9456:                    CALL check_err(iret)
  9457:                    iret=nf90_inq_varid(hs%ncid,"yvelva",hs%yvelva%nodal_data_id)
  9458:                    CALL check_err(iret)
  9459:                    IF (MNPROC.eq.1) THEN
  9460:                       iret = nf90_get_var(hs%ncid, hs%xvelav%nodal_data_id,
  9461:                &          XVELAV, start, kount)
  9462:                       CALL check_err(iret)
  9463:                       iret = nf90_get_var(hs%ncid, hs%yvelav%nodal_data_id,
  9464:                &         YVELAV, start, kount)
  9465:                       CALL check_err(iret)
  9466:                       iret = nf90_get_var(hs%ncid, hs%xvelva%nodal_data_id,
  9467:                &          XVELVA, start, kount)
  9468:                       CALL check_err(iret)
  9469:                       iret = nf90_get_var(hs%ncid, hs%yvelva%nodal_data_id,
  9470:                &          YVELVA, start, kount)
  9471:                       CALL check_err(iret)
  9472:                    ELSE
  9473:         I             call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  9474:                &         hs%xvelav%nodal_data_id, subdomain_reals=XVELAV)
  9475:         I             call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  9476:                &         hs%xvelva%nodal_data_id, subdomain_reals=XVELVA)
  9477:         I             call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  9478:                &         hs%yvelav%nodal_data_id, subdomain_reals=YVELAV)
  9479:         I             call mapFullDomainToSubdomain(hs%ncid, hs%myMesh%num_nodes,
  9480:                &         hs%yvelva%nodal_data_id, subdomain_reals=YVELVA)
  9481:                    ENDIF
  9482:                 ENDIF
  9483:           C
  9484:           C     Read in model parameters to ADCIRC variables
  9485:                 iret = nf90_inq_varid(hs%ncid,"ntsteps",tempid)
  9486:                 CALL check_err(iret)
  9487:                 iret = nf90_get_var(hs%ncid, tempid, ntsteps)
  9488:                 CALL check_err(iret)
  9489:           C
  9490:           C     now close the netcdf file
  9491:                 iret = nf90_close(hs%ncid)
  9492:                 CALL check_err(iret)
  9493:           C
  9494:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9495:                 call allMessage(DEBUG,"Return.")
  9496:           #endif
  9497:                 call unsetMessageSource()
  9498:           C-----------------------------------------------------------------------
  9499:                 END SUBROUTINE readNetCDFHotstartHarmonicMeansVariances


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONICMEANSVARIANCES
INLINE LIST

  ROOT: NETCDFIO::READNETCDFHOTSTARTHARMONICMEANSVARIANCES (netcdfio.F:9372)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9391)
     *** Source for routine not found.
  -> NOINLINE: MESSENGER::MSG_FINI (netcdfio.F:9412)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:9416)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9417)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:9421)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9432)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9433)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9434)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9435)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9437)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9439)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9440)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9442)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9444)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9446)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9451)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9452)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9453)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9454)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9455)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9456)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9457)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9458)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9460)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9462)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9463)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9465)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9466)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9468)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9469)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9471)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9473)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9475)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9477)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9479)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9485)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9486)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9487)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9488)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:9491)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9492)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9497)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONICMEANSVARIANCES
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTARTHARMONICMEANSVARIANCES
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 53 [s0-s12 s15-s16 s18-s44 s53-s63]
      Vector registers         : 36 [v28-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 6352 bytes
      Register spill area      :   72 bytes
      Parameter area           :  104 bytes
      Register save area       :  176 bytes
      User data area           : 5992 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART3D
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  9533: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  9554: inl(1212): Source for routine not found.: MESSENGER::MSG_FINI
  9558: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
  9559: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  9563: inl(1222): Inlined: NETCDFIO::GETDIMENSIONS
  9010: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE
  9012: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
  9016: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
  9031: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
  9586: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_VARID
  9601: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL
  9624: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  8885: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT
  9627: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9630: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9633: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9636: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9639: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9642: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN
  9652: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL
  9656: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9670: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9684: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9709: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9712: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9715: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9719: opt(1592): Outer loop unrolled inside inner loop.
  9719: vec( 101): Vectorized loop.
  9735: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9738: inl(1222): Inlined: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM
  9746: inl(1212): Source for routine not found.: NETCDF::NF90_GET_VAR_FOURBYTEINT
  9794: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART3D
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  9508:                 SUBROUTINE readNetCDFHotstart3D(lun)
  9509:                 USE SIZES, ONLY : MNPROC, globaldir
  9510:                 USE GLOBAL, ONLY : OutputDataDescript_t, IDEN,
  9511:                &   duu1, duv1, dvv1, uu2, vv2, bsx1, bsy1, NP_G
  9512:                 USE GLOBAL_3DVS, ONLY : q, iy, nfen, sigt, sal, temp, wz, q20,
  9513:                &   l, n3dsd, i3dsdrec, n3dsv, i3dsvrec, n3dst, i3dstrec, n3dgd,
  9514:                &   i3dgdrec, n3dgv, i3dgvrec, n3dgt, i3dgtrec
  9515:                 USE MESH, ONLY : NP
  9516:           #ifdef CMPI
  9517:                 USE MESSENGER, ONLY : MSG_FINI
  9518:           #endif
  9519:                 IMPLICIT NONE
  9520:           C
  9521:                 INTEGER, intent(in) :: lun
  9522:           C
  9523:                 INTEGER i,j
  9524:                 INTEGER kount(2), start(2)
  9525:                 REAL(8), ALLOCATABLE :: data2D(:,:)
  9526:                 INTEGER kount3D(3), start3D(3)
  9527:                 REAL(8), ALLOCATABLE :: data3D(:,:,:)
  9528:                 REAL(8), ALLOCATABLE :: rp(:,:) ! real part of Q (subdomain), i.e. u-vel
  9529:                 REAL(8), ALLOCATABLE :: ip(:,:) ! imag part of Q (subdomain), i.e. v-vel
  9530:                 INTEGER iret ! success or failure of the netcdf call
  9531:                 INTEGER tempid
  9532:           C
  9533:                 call setMessageSource("readNetCDFHotstart3D")
  9534:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9535:                 call allMessage(DEBUG,"Enter.")
  9536:           #endif
  9537:           C
  9538:           C     Point to the hotstart file we want to work on
  9539:                 IF (lun.eq.67) THEN
  9540:                    hs => hs67
  9541:                 ELSE
  9542:                    hs => hs68
  9543:                 ENDIF
  9544:           C
  9545:                 hs%myMesh => adcircMesh
  9546:                 hs%myFile%fileFound = .false.
  9547:           C
  9548:           C     Open fulldomain file
  9549:                 INQUIRE(FILE=hs%myFile%FILENAME,EXIST=hs%myFile%fileFound)
  9550:                 IF (hs%myFile%fileFound.eqv..false.) THEN
  9551:                    WRITE(*,*) "ERROR: The file ",hs%myFile%FILENAME,
  9552:                &      " was not found; ADCIRC terminating."
  9553:           #ifdef CMPI
  9554:                       CALL MSG_FINI()
  9555:           #endif
  9556:                    CALL EXIT(1)
  9557:                 ELSE
  9558:                    iret = nf90_open(hs%myFile%FILENAME, NF90_NOWRITE, hs%ncid)
  9559:                    CALL check_err(iret)
  9560:                 ENDIF
  9561:           !
  9562:           !     Inquire variables
  9563:         I       CALL getDimensions(hs%ncid, hs%myTime, hs%myMesh, hs%myFile)
  9564:           C     vertical node dimension
  9565:                 iret=nf90_inq_dimid(hs%ncid, "num_v_nodes",
  9566:                &   hs%myMesh%num_v_nodes_dim_id)
  9567:                 CALL check_err(iret)
  9568:                 iret=nf90_inquire_dimension(hs%ncid, hs%myMesh%num_v_nodes_dim_id,
  9569:                &     len=hs%myMesh%num_v_nodes)
  9570:                 CALL check_err(iret)
  9571:           C
  9572:                 hs%myFile%record_counter = 1
  9573:           C
  9574:                 kount(1)=hs%myMesh%num_nodes  ! for nodal data
  9575:                 kount(2)=hs%myTime%timenc_len
  9576:                 start(1)=1
  9577:                 start(2)=hs%myFile%record_counter
  9578:           C
  9579:                 kount3D(1)=hs%myMesh%num_nodes
  9580:                 kount3D(2)=hs%myMesh%num_v_nodes  ! for 3D data
  9581:                 kount3D(3)=hs%myTime%timenc_len
  9582:                 start3D(1)=1
  9583:                 start3D(2)=1
  9584:                 start3D(3)=hs%myFile%record_counter
  9585:           
  9586:                 iret=nf90_inq_varid(hs%ncid,"duu",hs%duu%nodal_data_id)
  9587:                 CALL check_err(iret)
  9588:                 iret=nf90_inq_varid(hs%ncid,"duv",hs%duv%nodal_data_id)
  9589:                 CALL check_err(iret)
  9590:                 iret=nf90_inq_varid(hs%ncid,"dvv",hs%dvv%nodal_data_id)
  9591:                 CALL check_err(iret)
  9592:                 iret=nf90_inq_varid(hs%ncid,"uu",hs%uu%nodal_data_id)
  9593:                 CALL check_err(iret)
  9594:                 iret=nf90_inq_varid(hs%ncid,"vv",hs%vv%nodal_data_id)
  9595:                 CALL check_err(iret)
  9596:                 iret=nf90_inq_varid(hs%ncid,"bsx",hs%bsx%nodal_data_id)
  9597:                 CALL check_err(iret)
  9598:                 iret=nf90_inq_varid(hs%ncid,"bsy",hs%bsy%nodal_data_id)
  9599:                 CALL check_err(iret)
  9600:                 IF (MNPROC.eq.1) THEN
  9601:                    iret = nf90_get_var(hs%ncid, hs%duu%nodal_data_id,
  9602:                &       DUU1, start, kount)
  9603:                    CALL check_err(iret)
  9604:                    iret = nf90_get_var(hs%ncid, hs%duv%nodal_data_id,
  9605:                &       DUV1, start, kount)
  9606:                    CALL check_err(iret)
  9607:                    iret = nf90_get_var(hs%ncid, hs%dvv%nodal_data_id,
  9608:                &       DVV1, start, kount)
  9609:                    CALL check_err(iret)
  9610:                    iret = nf90_get_var(hs%ncid, hs%uu%nodal_data_id,
  9611:                &       UU2, start, kount)
  9612:                    CALL check_err(iret)
  9613:                    iret = nf90_get_var(hs%ncid, hs%vv%nodal_data_id,
  9614:                &       VV2, start, kount)
  9615:                    CALL check_err(iret)
  9616:                    iret = nf90_get_var(hs%ncid, hs%bsx%nodal_data_id,
  9617:                &       BSX1, start, kount)
  9618:                    CALL check_err(iret)
  9619:                    iret = nf90_get_var(hs%ncid, hs%bsy%nodal_data_id,
  9620:                &       BSY1, start, kount)
  9621:                    CALL check_err(iret)
  9622:                 ELSE
  9623:                    fullDomainIndexList => fullDomainNodeList
  9624:         I          call mapFullDomainToSubdomain(hs%ncid,
  9625:                &      hs%myMesh%num_nodes, hs%duu%nodal_data_id,
  9626:                &      subdomain_reals=DUU1)
  9627:         I          call mapFullDomainToSubdomain(hs%ncid,
  9628:                &      hs%myMesh%num_nodes, hs%duv%nodal_data_id,
  9629:                &      subdomain_reals=DUV1)
  9630:         I          call mapFullDomainToSubdomain(hs%ncid,
  9631:                &      hs%myMesh%num_nodes, hs%dvv%nodal_data_id,
  9632:                &      subdomain_reals=DVV1)
  9633:         I          call mapFullDomainToSubdomain(hs%ncid,
  9634:                &      hs%myMesh%num_nodes, hs%uu%nodal_data_id,
  9635:                &      subdomain_reals=UU2)
  9636:         I          call mapFullDomainToSubdomain(hs%ncid,
  9637:                &      hs%myMesh%num_nodes, hs%vv%nodal_data_id,
  9638:                &      subdomain_reals=VV2)
  9639:         I          call mapFullDomainToSubdomain(hs%ncid,
  9640:                &      hs%myMesh%num_nodes, hs%bsx%nodal_data_id,
  9641:                &      subdomain_reals=BSX1)
  9642:         I          call mapFullDomainToSubdomain(hs%ncid,
  9643:                &      hs%myMesh%num_nodes, hs%bsy%nodal_data_id,
  9644:                &      subdomain_reals=BSY1)
  9645:                 ENDIF
  9646:                 !
  9647:                 ! 3D Density
  9648:                 IF (ABS(IDEN).eq.1) THEN
  9649:                   iret=nf90_inq_varid(hs%ncid,"sigt",hs%density3D%u_nodal_data_id)
  9650:                    CALL check_err(iret)
  9651:                    IF (MNPROC.eq.1) THEN
  9652:                       iret = nf90_get_var(hs%ncid,
  9653:                &         hs%density3D%u_nodal_data_id, SIGT, start3D, kount3D)
  9654:                       CALL check_err(iret)
  9655:                    ELSE
  9656:         I             call mapFullDomainToSubdomainNPByM(hs%ncid,
  9657:                &         nfen, hs%myMesh%num_nodes, hs%density3D%u_nodal_data_id,
  9658:                &         subdomain_reals=SIGT)
  9659:                    ENDIF
  9660:                 ENDIF
  9661:                 IF ((ABS(IDEN).eq.2).or.(ABS(IDEN).eq.4)) THEN
  9662:                    iret=nf90_inq_varid(hs%ncid,"salinity",
  9663:                &      hs%density3D%v_nodal_data_id)
  9664:                    CALL check_err(iret)
  9665:                    IF (MNPROC.eq.1) THEN
  9666:                       iret = nf90_get_var(hs%ncid, hs%density3D%v_nodal_data_id,
  9667:                &          SAL, start3D, kount3D)
  9668:                       CALL check_err(iret)
  9669:                    ELSE
  9670:         I             call mapFullDomainToSubdomainNPByM(hs%ncid,
  9671:                &         nfen, hs%myMesh%num_nodes, hs%density3D%v_nodal_data_id,
  9672:                &         subdomain_reals=SAL)
  9673:                    ENDIF
  9674:                 ENDIF
  9675:                 IF ((ABS(IDEN).eq.3).or.(ABS(IDEN).eq.4)) THEN
  9676:                    iret=nf90_inq_varid(hs%ncid,"temperature",
  9677:                &      hs%density3D%w_nodal_data_id)
  9678:                    CALL check_err(iret)
  9679:                    IF (MNPROC.eq.1) THEN
  9680:                       iret = nf90_get_var(hs%ncid, hs%density3D%w_nodal_data_id,
  9681:                &         TEMP, start3D, kount3D)
  9682:                       CALL check_err(iret)
  9683:                    ELSE
  9684:         I             call mapFullDomainToSubdomainNPByM(hs%ncid,
  9685:                &         nfen, hs%myMesh%num_nodes, hs%density3D%w_nodal_data_id,
  9686:                &         subdomain_reals=TEMP)
  9687:                    ENDIF
  9688:                 ENDIF
  9689:                 !
  9690:                 ! 3D velocity
  9691:                 iret=nf90_inq_varid(hs%ncid,"u-vel3D",hs%velocity3D%u_nodal_data_id)
  9692:                 CALL check_err(iret)
  9693:                 iret=nf90_inq_varid(hs%ncid,"v-vel3D",hs%velocity3D%v_nodal_data_id)
  9694:                 CALL check_err(iret)
  9695:                 iret=nf90_inq_varid(hs%ncid,"w-vel3D",hs%velocity3D%w_nodal_data_id)
  9696:                 CALL check_err(iret)
  9697:                 allocate(rp(np,nfen),ip(np,nfen))
  9698:                 IF (MNPROC.eq.1) THEN
  9699:                    iret = nf90_get_var(hs%ncid, hs%velocity3D%u_nodal_data_id,
  9700:                &      rp, start3D, kount3D)
  9701:                    CALL check_err(iret)
  9702:                    iret = nf90_get_var(hs%ncid, hs%velocity3D%v_nodal_data_id,
  9703:                &      ip, start3D, kount3D)
  9704:                    CALL check_err(iret)
  9705:                    iret = nf90_get_var(hs%ncid, hs%velocity3D%w_nodal_data_id,
  9706:                &      wz, start3D, kount3D)
  9707:                    CALL check_err(iret)
  9708:                 ELSE
  9709:         I          call mapFullDomainToSubdomainNPByM(hs%ncid,
  9710:                &      nfen, hs%myMesh%num_nodes, hs%velocity3D%u_nodal_data_id,
  9711:                &      subdomain_reals=rp)
  9712:         I          call mapFullDomainToSubdomainNPByM(hs%ncid,
  9713:                &      nfen, hs%myMesh%num_nodes, hs%velocity3D%v_nodal_data_id,
  9714:                &      subdomain_reals=ip)
  9715:         I          call mapFullDomainToSubdomainNPByM(hs%ncid,
  9716:                &      nfen, hs%myMesh%num_nodes, hs%velocity3D%w_nodal_data_id,
  9717:                &      subdomain_reals=wz)
  9718:                 ENDIF
  9719: U======>        q(:,:) = rp(:,:) + iy*ip(:,:) ! construct q from real and imaginary
  9720:                 deallocate(rp,ip)
  9721:                 !
  9722:                 ! 3D turbulence
  9723:                 iret=nf90_inq_varid(hs%ncid,"q20",hs%turbulence3D%u_nodal_data_id)
  9724:                 CALL check_err(iret)
  9725:                 iret=nf90_inq_varid(hs%ncid,"l",hs%turbulence3D%v_nodal_data_id)
  9726:                 CALL check_err(iret)
  9727:                 IF (MNPROC.eq.1) THEN
  9728:                    iret = nf90_get_var(hs%ncid, hs%turbulence3D%u_nodal_data_id,
  9729:                &      q20, start3D, kount3D)
  9730:                    CALL check_err(iret)
  9731:                    iret = nf90_get_var(hs%ncid, hs%turbulence3D%v_nodal_data_id,
  9732:                &      l, start3D, kount3D)
  9733:                    CALL check_err(iret)
  9734:                 ELSE
  9735:         I          call mapFullDomainToSubdomainNPByM(hs%ncid,
  9736:                &      nfen, hs%myMesh%num_nodes, hs%turbulence3D%u_nodal_data_id,
  9737:                &      subdomain_reals=q20)
  9738:         I          call mapFullDomainToSubdomainNPByM(hs%ncid,
  9739:                &      nfen, hs%myMesh%num_nodes, hs%velocity3D%v_nodal_data_id,
  9740:                &      subdomain_reals=l)
  9741:                 ENDIF
  9742:           C
  9743:           C     Read in model parameters to ADCIRC variables
  9744:                 iret = nf90_inq_varid(hs%ncid,"n3dsd", tempid)
  9745:                 CALL check_err(iret)
  9746:                 iret = nf90_get_var(hs%ncid, tempid, n3dsd)
  9747:                 CALL check_err(iret)
  9748:                 iret = nf90_inq_varid(hs%ncid,"i3dsdrec", tempid)
  9749:                 CALL check_err(iret)
  9750:                 iret = nf90_get_var(hs%ncid, tempid, i3dsdrec)
  9751:                 CALL check_err(iret)
  9752:                 iret = nf90_inq_varid(hs%ncid,"n3dsv", tempid)
  9753:                 CALL check_err(iret)
  9754:                 iret = nf90_get_var(hs%ncid, tempid, n3dsv)
  9755:                 CALL check_err(iret)
  9756:                 iret = nf90_inq_varid(hs%ncid,"i3dsvrec", tempid)
  9757:                 CALL check_err(iret)
  9758:                 iret = nf90_get_var(hs%ncid, tempid, i3dsvrec)
  9759:                 CALL check_err(iret)
  9760:                 iret = nf90_inq_varid(hs%ncid,"n3dst", tempid)
  9761:                 CALL check_err(iret)
  9762:                 iret = nf90_get_var(hs%ncid, tempid, n3dst)
  9763:                 CALL check_err(iret)
  9764:                 iret = nf90_inq_varid(hs%ncid,"i3dstrec", tempid)
  9765:                 CALL check_err(iret)
  9766:                 iret = nf90_get_var(hs%ncid, tempid, i3dstrec)
  9767:                 CALL check_err(iret)
  9768:                 iret = nf90_inq_varid(hs%ncid,"n3dgd", tempid)
  9769:                 CALL check_err(iret)
  9770:                 iret = nf90_get_var(hs%ncid, tempid, n3dgd)
  9771:                 CALL check_err(iret)
  9772:                 iret = nf90_inq_varid(hs%ncid,"i3dgdrec", tempid)
  9773:                 CALL check_err(iret)
  9774:                 iret = nf90_get_var(hs%ncid, tempid, i3dgdrec)
  9775:                 CALL check_err(iret)
  9776:                 iret = nf90_inq_varid(hs%ncid,"n3dgv", tempid)
  9777:                 CALL check_err(iret)
  9778:                 iret = nf90_get_var(hs%ncid, tempid, n3dgv)
  9779:                 CALL check_err(iret)
  9780:                 iret = nf90_inq_varid(hs%ncid,"i3dgvrec", tempid)
  9781:                 CALL check_err(iret)
  9782:                 iret = nf90_get_var(hs%ncid, tempid, i3dgvrec)
  9783:                 CALL check_err(iret)
  9784:                 iret = nf90_inq_varid(hs%ncid,"n3dgt", tempid)
  9785:                 CALL check_err(iret)
  9786:                 iret = nf90_get_var(hs%ncid, tempid, n3dgt)
  9787:                 CALL check_err(iret)
  9788:                 iret = nf90_inq_varid(hs%ncid,"i3dgtrec", tempid)
  9789:                 CALL check_err(iret)
  9790:                 iret = nf90_get_var(hs%ncid, tempid, i3dgtrec)
  9791:                 CALL check_err(iret)
  9792:           C
  9793:           C     now close the netcdf file
  9794:                 iret = nf90_close(hs%ncid)
  9795:                 CALL check_err(iret)
  9796:           C
  9797:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9798:                 call allMessage(DEBUG,"Return.")
  9799:           #endif
  9800:                 call unsetMessageSource()
  9801:           C-----------------------------------------------------------------------
  9802:                 END SUBROUTINE readNetCDFHotstart3D


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART3D
INLINE LIST

  ROOT: NETCDFIO::READNETCDFHOTSTART3D (netcdfio.F:9508)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9533)
     *** Source for routine not found.
  -> NOINLINE: MESSENGER::MSG_FINI (netcdfio.F:9554)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:9558)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9559)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::GETDIMENSIONS (netcdfio.F:9563)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9003)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE (netcdfio.F:9010)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9011)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9012)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9014)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9016)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9017)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9018)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9020)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9022)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9023)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9024)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9026)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9031)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:9565)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9567)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:9568)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9570)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9586)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9587)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9588)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9589)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9590)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9591)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9592)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9593)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9594)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9595)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9596)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9597)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9598)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9599)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9601)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9603)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9604)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9606)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9607)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9609)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9610)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9612)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9613)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9615)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9616)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9618)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:9619)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9621)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9624)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9627)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9630)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9633)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9636)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9639)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAIN (netcdfio.F:9642)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8870)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_EIGHTBYTEREAL (netcdfio.F:8879)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8880)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_1D_FOURBYTEINT (netcdfio.F:8885)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8886)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8894)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9649)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9650)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9652)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9654)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9656)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9662)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9664)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9666)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9668)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9670)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9676)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9678)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9680)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9682)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9684)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9691)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9692)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9693)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9694)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9695)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9696)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9699)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9701)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9702)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9704)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9705)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9707)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9709)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9712)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9715)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9723)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9724)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9725)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9726)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9728)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9730)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:9731)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9733)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9735)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> INLINE: NETCDFIO::MAPFULLDOMAINTOSUBDOMAINNPBYM (netcdfio.F:9738)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:8963)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_GET_VAR_2D_EIGHTBYTEREAL (netcdfio.F:8970)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:8971)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:8978)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9744)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9745)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9746)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9747)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9748)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9749)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9750)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9751)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9752)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9753)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9754)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9755)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9756)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9757)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9758)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9759)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9760)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9761)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9762)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9763)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9764)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9765)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9766)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9767)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9768)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9769)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9770)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9771)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9772)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9773)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9774)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9775)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9776)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9777)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9778)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9779)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9780)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9781)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9782)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9783)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9784)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9785)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9786)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9787)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_VARID (netcdfio.F:9788)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9789)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_VAR_FOURBYTEINT (netcdfio.F:9790)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9791)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:9794)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9795)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:9800)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART3D
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8887)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8887)
    *** VGT generated (netcdfio.F:8887)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8881)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8881)
    *** VGT generated (netcdfio.F:8881)
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:9719)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:9719)

    LOOP BEGIN: (netcdfio.F:9719)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:9719)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:9719)
      *** The number of VLOAD, VSTORE. :  2,  2. (netcdfio.F:9719)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:9719)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:9719)

    LOOP BEGIN: (netcdfio.F:9719)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:9719)
      *** The number of VLOAD, VSTORE. :  8,  8. (netcdfio.F:9719)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:8972)
      *** The number of VGT,   VSC.    :  1,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:8972)

    LOOP BEGIN: (netcdfio.F:8972)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  4,  0. (netcdfio.F:8972)
      *** The number of VLOAD, VSTORE. :  1,  4. (netcdfio.F:8972)
      *** VGT generated (netcdfio.F:8972)
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:57 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READNETCDFHOTSTART3D
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 61 [s0-s12 s15-s16 s18-s63]
      Vector registers         : 64 [v0-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 8016 bytes
      Register spill area      :  720 bytes
      Parameter area           :  104 bytes
      Register save area       :  176 bytes
      User data area           : 7008 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8887)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8881)
    *** Estimated execution cycle                       : 153
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:9719)
    *** Estimated execution cycle                       : 48
    *** The number of SCALAR REGISTER TRANSFER          : 14

    LOOP BEGIN: (netcdfio.F:9719)
      *** Estimated execution cycle                     : 127
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:9719)
    *** Estimated execution cycle                       : 67
    *** The number of SCALAR REGISTER TRANSFER          : 23

    LOOP BEGIN: (netcdfio.F:9719)
      *** Estimated execution cycle                     : 512
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 44
    *** The number of SCALAR REGISTER TRANSFER          : 11

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 187
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:8972)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 16

    LOOP BEGIN: (netcdfio.F:8972)
      *** Estimated execution cycle                     : 458
    LOOP END
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMESHVARIABLES
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

  9838: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
  9844: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_DIM
  9846: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
  9858: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_MANYDIMS
  9906: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_SCALAR
  9933: inl(1212): Source for routine not found.: NETCDF::NF90_DEF_VAR_ONEDIM
 10053: inl(1222): Inlined: NETCDFIO::DEFINECOORDINATEATTRIBUTES
 10084: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT
 10101: vec( 103): Unvectorized loop.
 10101: vec( 118): Unvectorizable data type.: ATT_TEXT
 10103: vec( 103): Unvectorized loop.
 10103: vec( 108): Unvectorizable loop structure.
 10110: vec( 103): Unvectorized loop.
 10110: vec( 118): Unvectorizable data type.: ATT_TEXT
 10111: vec( 103): Unvectorized loop.
 10111: vec( 108): Unvectorizable loop structure.
 10118: vec( 103): Unvectorized loop.
 10118: vec( 118): Unvectorizable data type.: ATT_TEXT
 10120: vec( 103): Unvectorized loop.
 10120: vec( 108): Unvectorizable loop structure.
 10129: vec( 103): Unvectorized loop.
 10129: vec( 118): Unvectorizable data type.: ATT_TEXT
 10130: vec( 103): Unvectorized loop.
 10130: vec( 108): Unvectorizable loop structure.
 10137: vec( 103): Unvectorized loop.
 10137: vec( 118): Unvectorizable data type.: ATT_TEXT
 10139: vec( 103): Unvectorized loop.
 10139: vec( 108): Unvectorizable loop structure.
 10146: vec( 103): Unvectorized loop.
 10146: vec( 118): Unvectorizable data type.: ATT_TEXT
 10147: vec( 103): Unvectorized loop.
 10147: vec( 108): Unvectorizable loop structure.
 10155: vec( 103): Unvectorized loop.
 10155: vec( 118): Unvectorizable data type.: ATT_TEXT
 10157: vec( 103): Unvectorized loop.
 10157: vec( 108): Unvectorizable loop structure.
 10162: vec( 103): Unvectorized loop.
 10162: vec( 118): Unvectorizable data type.: ATT_TEXT
 10164: vec( 103): Unvectorized loop.
 10164: vec( 108): Unvectorizable loop structure.
 10172: vec( 103): Unvectorized loop.
 10172: vec( 118): Unvectorizable data type.: ATT_TEXT
 10173: vec( 103): Unvectorized loop.
 10173: vec( 108): Unvectorizable loop structure.
 10180: vec( 103): Unvectorized loop.
 10180: vec( 118): Unvectorizable data type.: ATT_TEXT
 10182: vec( 103): Unvectorized loop.
 10182: vec( 108): Unvectorizable loop structure.
 10190: vec( 103): Unvectorized loop.
 10190: vec( 118): Unvectorizable data type.: ATT_TEXT
 10192: vec( 103): Unvectorized loop.
 10192: vec( 108): Unvectorizable loop structure.
 10197: vec( 103): Unvectorized loop.
 10197: vec( 118): Unvectorizable data type.: ATT_TEXT
 10199: vec( 103): Unvectorized loop.
 10199: vec( 108): Unvectorizable loop structure.
 10204: vec( 103): Unvectorized loop.
 10204: vec( 118): Unvectorizable data type.: ATT_TEXT
 10206: vec( 103): Unvectorized loop.
 10206: vec( 108): Unvectorizable loop structure.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMESHVARIABLES
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

  9810:                 subroutine defineMeshVariables(ncid, myMesh, myFile)
  9811:                 USE GLOBAL, ONLY : C3D, scratchMessage
  9812:                 USE ADC_CONSTANTS, ONLY: RAD2DEG
  9813:                 USE MESH, ONLY : SLAM0, SFEA0, AGRID
  9814:                 USE GLOBAL_3DVS, ONLY : NFEN
  9815:                 USE NodalAttributes, ONLY : nwp, nolibf, tau0, cf, eslm
  9816:                 USE VERSION
  9817:                 IMPLICIT NONE
  9818:                 INTEGER iret   ! Error status return
  9819:                 type(meshStructure) :: myMesh
  9820:                 INTEGER, intent(in) :: ncid   ! netCDF id
  9821:                 type(fileData), intent(in) :: myFile ! file format info
  9822:                 INTEGER i,j
  9823:                 INTEGER counti(1), starti(1), n
  9824:                 INTEGER kount(2), start(2)
  9825:                 REAL    realval(1)
  9826:                 CHARACTER(1024) :: att_text ! reused to hold attribute text
  9827:                 INTEGER :: line ! line counter
  9828:           !     -----------------
  9829:           !      date_string variables for time attribute
  9830:           !     -----------------
  9831:                 character date_string*40
  9832:                 character now_date*8
  9833:                 character big_ben*10
  9834:                 character zone*5
  9835:                 integer values(8)
  9836:                 integer dmy
  9837:           C
  9838:                 call setMessageSource("defineMeshVariables")
  9839:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
  9840:                 call allMessage(DEBUG,"Enter.")
  9841:           #endif
  9842:           !
  9843:           !     Define dimensions
  9844:                 iret = nf90_def_dim(ncid,'node',myMesh%num_nodes,
  9845:                &       myMesh%num_nodes_dim_id)
  9846:                 CALL check_err(iret)
  9847:                 iret = nf90_def_dim(ncid,'nele',myMesh%num_elems,dmy)
  9848:                 call check_err(iret)
  9849:                 iret = nf90_def_dim(ncid,'nfaces',myMesh%num_elems,
  9850:                &       myMesh%num_elems_dim_id)
  9851:                 call check_err(iret)
  9852:                 IF (C3D.eqv..true.) THEN
  9853:                    myMesh%num_v_nodes = NFEN
  9854:                    iret = nf90_def_dim(ncid,'num_v_nodes',myMesh%num_v_nodes,
  9855:                &       myMesh%num_v_nodes_dim_id)
  9856:                    call check_err(iret)
  9857:                    myMesh%sigma_dims(1) = myMesh%num_v_nodes_dim_id
  9858:                    iret = nf90_def_var(ncid, 'sigma', NF90_DOUBLE,
  9859:                &       myMesh%sigma_dims, myMesh%sigma_id)
  9860:                    CALL check_err(iret)
  9861:                 ENDIF
  9862:                 iret = nf90_def_dim(ncid, 'nvertex', 3, myMesh%nface_dim_id)
  9863:                 call check_err(iret)
  9864:                 if(myMesh%nopenc.ne.0) then
  9865:                    iret = nf90_def_dim(ncid,'nope', myMesh%nopenc,
  9866:                &         myMesh%nopenc_dim_id)
  9867:                    call check_err(iret)
  9868:           !        WJP to make arrays smaller only have dimension of neta
  9869:                    iret = nf90_def_dim(ncid,'neta', myMesh%netanc,
  9870:                &         myMesh%netanc_dim_id)
  9871:                    call check_err(iret)
  9872:                    iret = nf90_def_dim(ncid,'max_nvdll', myMesh%max_nvdllnc,
  9873:                &         myMesh%max_nvdllnc_dim_id)
  9874:                    call check_err(iret)
  9875:                 endif
  9876:                 if(myMesh%nbounc.ne.0) then
  9877:                    iret = nf90_def_dim(ncid, 'nbou',
  9878:                &          myMesh%nbounc, myMesh%nbounc_dim_id)
  9879:                    call check_err(iret)
  9880:           !        WJP to make arrays smaller only have dimension of nvel
  9881:                    iret = nf90_def_dim(ncid,'nvel', myMesh%nvelnc,
  9882:                &         myMesh%nvelnc_dim_id)
  9883:                    call check_err(iret)
  9884:                    iret = nf90_def_dim(ncid, 'max_nvell',
  9885:                &          myMesh%max_nvellnc, myMesh%max_nvellnc_dim_id)
  9886:                 endif
  9887:           !
  9888:           !     Define variables
  9889:           !     Define X
  9890:                 myMesh%X_dims(1) = myMesh%num_nodes_dim_id
  9891:                 iret = nf90_def_var(ncid, 'x', NF90_DOUBLE,
  9892:                &       myMesh%X_dims, myMesh%X_id)
  9893:                 CALL check_err(iret)
  9894:           !     Define Y coordinate
  9895:                 myMesh%Y_dims(1) = myMesh%num_nodes_dim_id
  9896:                 iret = nf90_def_var(ncid, 'y', NF90_DOUBLE,
  9897:                &       myMesh%Y_dims, myMesh%Y_id)
  9898:                 CALL check_err(iret)
  9899:           !     Define elements
  9900:                 myMesh%ELE_dims(1) = myMesh%nface_dim_id
  9901:                 myMesh%ELE_dims(2) = myMesh%num_elems_dim_id
  9902:                 iret = nf90_def_var(ncid, 'element',NF90_INT,
  9903:                &       myMesh%ELE_dims, myMesh%ELE_id)
  9904:                 CALL check_err(iret)
  9905:           !Corbitt: Define ADCIRC-Mesh Variable
  9906:                 call check_err(nf90_def_var(ncid,'adcirc_mesh',NF90_INT,myMesh%MESH_id))
  9907:                 !
  9908:                 ! jgf50.44: Turn on compression if this is a netcdf4-formatted file.
  9909:           #ifdef NETCDF_CAN_DEFLATE
  9910:                 IF (myFile%ncformat.eq.ior(NF90_CLASSIC_MODEL,NF90_NETCDF4)) THEN
  9911:                    iret = nf90_def_var_deflate(ncid, myMesh%X_id, 1, 1, 2)
  9912:                    CALL check_err(iret)
  9913:                    iret = nf90_def_var_deflate(ncid, myMesh%Y_id, 1, 1, 2)
  9914:                    CALL check_err(iret)
  9915:                    iret = nf90_def_var_deflate(ncid, myMesh%ELE_id, 1, 1, 2)
  9916:                    CALL check_err(iret)
  9917:                 ENDIF
  9918:           #endif
  9919:           !
  9920:           !     Define elevation specified boundary forcing segments information
  9921:                 if (myMesh%nopenc.ne.0) then
  9922:                    myMesh%nvdllnc_dims(1) = myMesh%nopenc_dim_id
  9923:                    iret = nf90_def_var(ncid, 'nvdll',NF90_INT,
  9924:                &                  myMesh%nvdllnc_dims, myMesh%nvdllnc_id)
  9925:                    CALL check_err(iret)
  9926:                    myMesh%ibtypeenc_dims(1) = myMesh%nopenc_dim_id
  9927:                    iret = nf90_def_var(ncid, 'ibtypee',NF90_INT,
  9928:                &          myMesh%ibtypeenc_dims,
  9929:                &          myMesh%ibtypeenc_id)
  9930:                    CALL check_err(iret)
  9931:           !        WJP to make arrays smaller only have dimension of neta
  9932:                    myMesh%nbdvnc_dims(1) = myMesh%netanc_dim_id
  9933:                    iret = nf90_def_var(ncid, 'nbdv',NF90_INT,
  9934:                &          myMesh%nbdvnc_dims(1), myMesh%nbdvnc_id)
  9935:                    CALL check_err(iret)
  9936:                    !jgf50.44: Turn on compression if this is a netcdf4 formatted file.
  9937:           #ifdef NETCDF_CAN_DEFLATE
  9938:                    IF (myFile%ncformat.eq.ior(NF90_CLASSIC_MODEL,NF90_NETCDF4)) THEN
  9939:                       iret = nf90_def_var_deflate(ncid, myMesh%nvdllnc_id,
  9940:                &             1, 1, 2)
  9941:                       CALL check_err(iret)
  9942:                       iret = nf90_def_var_deflate(ncid, myMesh%ibtypeenc_id,
  9943:                &             1, 1, 2)
  9944:                       CALL check_err(iret)
  9945:                       iret = nf90_def_var_deflate(ncid, myMesh%nbdvnc_id,
  9946:                &             1, 1, 2)
  9947:                       CALL check_err(iret)
  9948:                    ENDIF
  9949:           #endif
  9950:                 endif
  9951:           !     Define normal flow boundary information
  9952:                 if (myMesh%nbounc.ne.0) then
  9953:                    myMesh%nvellnc_dims(1) = myMesh%nbounc_dim_id
  9954:                    iret = nf90_def_var(ncid, 'nvell',NF90_INT,
  9955:                &          myMesh%nvellnc_dims, myMesh%nvellnc_id)
  9956:                    CALL check_err(iret)
  9957:                    myMesh%ibtypenc_dims(1) = myMesh%nbounc_dim_id
  9958:                    iret = nf90_def_var(ncid, 'ibtype',NF90_INT,
  9959:                &          myMesh%ibtypenc_dims, myMesh%ibtypenc_id)
  9960:                    CALL check_err(iret)
  9961:           !        WJP to make arrays smaller only have dimension of nvel
  9962:                    myMesh%nbvvnc_dims(1) = myMesh%nvelnc_dim_id
  9963:                    iret = nf90_def_var(ncid, 'nbvv',NF90_INT,
  9964:                &          myMesh%nbvvnc_dims(1), myMesh%nbvvnc_id)
  9965:                    CALL check_err(iret)
  9966:                    if(mymesh%hasWeirs)then
  9967:                       iret = nf90_def_var(ncid, 'barsp', NF90_DOUBLE,
  9968:                &             myMesh%nbvvnc_dims(1), myMesh%barsp_id)
  9969:                       CALL check_err(iret)
  9970:                       iret = nf90_def_var(ncid, 'barht', NF90_DOUBLE,
  9971:                &             myMesh%nbvvnc_dims(1), myMesh%barht_id)
  9972:                       if(myMesh%hasInternalWeirs)then
  9973:                           CALL check_err(iret)
  9974:                           iret = nf90_def_var(ncid, 'ibconn', NF90_INT,
  9975:                &                 myMesh%nbvvnc_dims(1), myMesh%ibconn_id)
  9976:                           CALL check_err(iret)
  9977:                           iret = nf90_def_var(ncid, 'barsb', NF90_DOUBLE,
  9978:                &                 myMesh%nbvvnc_dims(1), myMesh%barsb_id)
  9979:                           CALL check_err(iret)
  9980:                           if(myMesh%hasPipes)then
  9981:                               iret = nf90_def_var(ncid, 'pipeht', NF90_DOUBLE,
  9982:                &                 myMesh%nbvvnc_dims(1), myMesh%pipeht_id)
  9983:                               CALL check_err(iret)
  9984:                               iret = nf90_def_var(ncid, 'pipediam', NF90_DOUBLE,
  9985:                &                     myMesh%nbvvnc_dims(1), myMesh%pipediam_id)
  9986:                               CALL check_err(iret)
  9987:                               iret = nf90_def_var(ncid, 'pipecoef', NF90_DOUBLE,
  9988:                &                     myMesh%nbvvnc_dims(1), myMesh%pipecoef_id)
  9989:                               CALL check_err(iret)
  9990:                           endif
  9991:                       endif
  9992:                    endif
  9993:           
  9994:                    !jgf50.44: Turn on compression if this is a netcdf4 formatted file.
  9995:           #ifdef NETCDF_CAN_DEFLATE
  9996:                    IF (myFile%ncformat.eq.ior(NF90_CLASSIC_MODEL,NF90_NETCDF4)) THEN
  9997:                       iret = nf90_def_var_deflate(ncid, myMesh%nvellnc_id,
  9998:                &             1, 1, 2)
  9999:                       CALL check_err(iret)
 10000:                       iret = nf90_def_var_deflate(ncid, myMesh%ibtypenc_id,
 10001:                &             1, 1, 2)
 10002:                       CALL check_err(iret)
 10003:                       if(myMesh%hasWeirs)then
 10004:                           iret = nf90_def_var_deflate(ncid, myMesh%barht_id,
 10005:                &                 1, 1, 2)
 10006:                           CALL check_err(iret)
 10007:                           iret = nf90_def_var_deflate(ncid, myMesh%nbvvnc_id,
 10008:                &                 1, 1, 2)
 10009:                           CALL check_err(iret)
 10010:                           iret = nf90_def_var_deflate(ncid, myMesh%barsp_id,
 10011:                &                 1, 1, 2)
 10012:                           CALL check_err(iret)
 10013:                           if(myMesh%hasInternalWeirs)then
 10014:                               iret = nf90_def_var_deflate(ncid, myMesh%ibconn_id,
 10015:                &                     1, 1, 2)
 10016:                               CALL check_err(iret)
 10017:                               iret = nf90_def_var_deflate(ncid, myMesh%barsb_id,
 10018:                &                     1, 1, 2)
 10019:                               CALL check_err(iret)
 10020:                               if(myMesh%hasPipes)then
 10021:                                   iret = nf90_def_var_deflate(ncid, myMesh%pipeht_id,
 10022:                &                         1, 1, 2)
 10023:                                   CALL check_err(iret)
 10024:                                   iret = nf90_def_var_deflate(ncid, myMesh%pipediam_id,
 10025:                &                         1, 1, 2)
 10026:                                   CALL check_err(iret)
 10027:                                   iret = nf90_def_var_deflate(ncid, myMesh%pipecoef_id,
 10028:                &                         1, 1, 2)
 10029:                                   CALL check_err(iret)
 10030:                               endif
 10031:                           endif
 10032:                       endif
 10033:                    ENDIF
 10034:           #endif
 10035:                 endif
 10036:           !     -------------------
 10037:           !     Define Z coordinate
 10038:           !     --------------------
 10039:                 myMesh%DEPTH_dims(1) = myMesh%num_nodes_dim_id
 10040:                 iret = nf90_def_var(ncid, 'depth',NF90_DOUBLE,
 10041:                &       myMesh%DEPTH_dims, myMesh%DEPTH_id)
 10042:                 CALL check_err(iret)
 10043:           #ifdef NETCDF_CAN_DEFLATE
 10044:                 IF (myFile%ncformat.eq.ior(NF90_CLASSIC_MODEL,NF90_NETCDF4)) THEN
 10045:                    iret = nf90_def_var_deflate(ncid, myMesh%DEPTH_id,
 10046:                &          1, 1, 2)
 10047:                    CALL check_err(iret)
 10048:                 ENDIF
 10049:           #endif
 10050:           C
 10051:           C     Set coordinates as representing latitude or longitude, depending on
 10052:           C     the value of ICS
 10053:         I       CALL defineCoordinateAttributes(ncid, myMesh%X_id, myMesh%Y_id)
 10054:           !
 10055:           !     Define depth attributes (Corbitt)
 10056:                 iret = nf90_put_att(ncid, myMesh%DEPTH_id, 'long_name', 'distance
 10057:                &  below geoid')
 10058:                 CALL check_err(iret)
 10059:                 iret = nf90_put_att(ncid, myMesh%DEPTH_id, 'standard_name',
 10060:                & 'depth below geoid')
 10061:                 CALL check_err(iret)
 10062:                 iret = nf90_put_att(ncid, myMesh%DEPTH_id, 'coordinates',
 10063:                & 'time y x')
 10064:                 CALL check_err(iret)
 10065:                 iret = nf90_put_att(ncid, myMesh%DEPTH_id, 'location', 'node')
 10066:                 CALL check_err(iret)
 10067:                 iret = nf90_put_att(ncid, myMesh%DEPTH_id, 'mesh', 'adcirc_mesh')
 10068:                 CALL check_err(iret)
 10069:                 iret = nf90_put_att(ncid, myMesh%DEPTH_id, 'units', 'm')
 10070:                 CALL check_err(iret)
 10071:           !      iret = nf90_put_att(ncid, myMesh%DEPTH_id, 'positive', 'down')
 10072:           !      CALL check_err(iret) Corbitt: Not CF Compliant
 10073:           
 10074:           !     Define Element Attributes (Corbitt)
 10075:                 iret = nf90_put_att(ncid, myMesh%ELE_id,'long_name', 'element')
 10076:                 CALL check_err(iret)
 10077:           !Corbitt 11/12/13 - Obsolete CF-UGRID Convention
 10078:           !      iret = nf90_put_att(ncid, myMesh%ELE_id,'standard_name',
 10079:           !     & 'face_node_connectivity')
 10080:           !      CALL check_err(iret)
 10081:                 iret = nf90_put_att(ncid, myMesh%ELE_id,'cf_role',
 10082:                & 'face_node_connectivity')
 10083:                 CALL check_err(iret)
 10084:                 iret = nf90_put_att(ncid, myMesh%ELE_id,'start_index',1)
 10085:                 CALL check_err(iret)
 10086:                 iret = nf90_put_att(ncid, myMesh%ELE_id, 'units', 'nondimensional')
 10087:                 CALL check_err(iret)
 10088:           !
 10089:           !     Define text attributes for boundary segments
 10090:                 if (myMesh%nopenc.ne.0) then
 10091:           C        NOPE
 10092:           C         att_text = "number of elevation specified boundary &
 10093:           C     &forcing segments"
 10094:           C         iret = nf90_put_att(ncid, myMesh%nopenc_id, 'long_name',
 10095:           C     &          len_trim(att_text), trim(att_text))
 10096:           C         CALL check_err(iret)
 10097:           C         iret = nf90_put_att(ncid, myMesh%nopenc_id, 'units', 14,
 10098:           C     &                     'nondimensional')
 10099:           C         CALL check_err(iret)
 10100:           C        NVDLL
 10101: +======>           att_text = "number of nodes in each elevation specified "
 10102:                &   //"boundary segment"
 10103:                    iret = nf90_put_att(ncid, myMesh%nvdllnc_id, 'long_name',
 10104:                &          trim(att_text))
 10105:                    CALL check_err(iret)
 10106:                    iret = nf90_put_att(ncid, myMesh%nvdllnc_id, 'units',
 10107:                &   'nondimensional')
 10108:                    CALL check_err(iret)
 10109:           C        IBTYPEE
 10110: +======>           att_text = "elevation boundary type"
 10111:                    iret = nf90_put_att(ncid, myMesh%ibtypeenc_id, 'long_name',
 10112:                &       trim(att_text))
 10113:                    CALL check_err(iret)
 10114:                    iret = nf90_put_att(ncid, myMesh%ibtypeenc_id, 'units',
 10115:                &       'nondimensional')
 10116:                    CALL check_err(iret)
 10117:           C        NBDV
 10118: +======>           att_text = "node numbers on each elevation specified boundary "
 10119:                &   //"segment"
 10120:                    iret = nf90_put_att(ncid, myMesh%nbdvnc_id, 'long_name',
 10121:                &          trim(att_text))
 10122:                    CALL check_err(iret)
 10123:                    iret = nf90_put_att(ncid, myMesh%nbdvnc_id, 'units',
 10124:                &   'nondimensional')
 10125:                    CALL check_err(iret)
 10126:                 endif
 10127:                 if (myMesh%nbounc.ne.0) then
 10128:           !        IBTYPE
 10129: +======>           att_text = "type of normal flow (discharge) boundary"
 10130:                    iret = nf90_put_att(ncid, myMesh%ibtypenc_id, 'long_name',
 10131:                &       trim(att_text))
 10132:                    CALL check_err(iret)
 10133:                    iret = nf90_put_att(ncid, myMesh%ibtypenc_id, 'units',
 10134:                &   'nondimensional')
 10135:                    CALL check_err(iret)
 10136:           !        NVELL
 10137: +======>           att_text = 'number of nodes in each normal flow '
 10138:                &      //'specified boundary segment'
 10139:                    iret = nf90_put_att(ncid, myMesh%nvellnc_id, 'long_name',
 10140:                &      trim(att_text))
 10141:                    CALL check_err(iret)
 10142:                    iret = nf90_put_att(ncid, myMesh%nvellnc_id, 'units',
 10143:                &                      'nondimensional')
 10144:                    CALL check_err(iret)
 10145:           !        NBVV
 10146: +======>           att_text = "node numbers on normal flow boundary segment"
 10147:                    iret = nf90_put_att(ncid, myMesh%nbvvnc_id, 'long_name',
 10148:                &          trim(att_text))
 10149:                    CALL check_err(iret)
 10150:                    iret = nf90_put_att(ncid, myMesh%nbvvnc_id, 'units',
 10151:                &                      'nondimensional')
 10152:                    CALL check_err(iret)
 10153:                    if(myMesh%hasWeirs)then
 10154:           !           BARHT
 10155: +======>              att_text =
 10156:                &         "external/internal barrier boundary height above geoid"
 10157:                       iret = nf90_put_att(ncid, myMesh%barht_id, 'long_name',
 10158:                &             trim(att_text))
 10159:                       iret = nf90_put_att(ncid, myMesh%barht_id, 'units', 'm')
 10160:                       call check_err(iret)
 10161:           !           BARSP
 10162: +======>              att_text = "external/internal barrier boundary"//
 10163:                &                 " weir coefficient of supercritical flow"
 10164:                       iret = nf90_put_att(ncid, myMesh%barsp_id, "long_name",
 10165:                &             trim(att_text))
 10166:                       call check_err(iret)
 10167:                       iret = nf90_put_att(ncid, mymesh%barsp_id, 'units',
 10168:                &                         'nondimensional')
 10169:                       call check_err(iret)
 10170:                       if(myMesh%hasInternalWeirs)then
 10171:           !               IBCONN
 10172: +======>                  att_text = "internal barrier nodal connections"
 10173:                           iret = nf90_put_att(ncid, myMesh%ibconn_id, 'long_name',
 10174:                &                 trim(att_text))
 10175:                           call check_err(iret)
 10176:                           iret = nf90_put_att(ncid, mymesh%ibconn_id, 'units',
 10177:                &                             'nondimensional')
 10178:                           call check_err(iret)
 10179:           !               BARSB
 10180: +======>                  att_text = "internal barrier boundary"//
 10181:                &                     " weir coefficient of subcritical flow"
 10182:                           iret = nf90_put_att(ncid, myMesh%barsb_id, "long_name",
 10183:                &                 trim(att_text))
 10184:                           call check_err(iret)
 10185:                           iret = nf90_put_att(ncid, mymesh%barsb_id, 'units',
 10186:                &                             'nondimensional')
 10187:                           call check_err(iret)
 10188:                           if(myMesh%hasPipes)then
 10189:           !                   PIPEHT
 10190: +======>                      att_text =
 10191:                &                 "internal barrier boundary cross-barrier pipe height"
 10192:                               iret = nf90_put_att(ncid, myMesh%pipeht_id, "long_name",
 10193:                &                 trim(att_text))
 10194:                               iret = nf90_put_att(ncid, myMesh%pipeht_id, 'units', 'm')
 10195:                               call check_err(iret)
 10196:           !                   PIPEDIAM
 10197: +======>                      att_text =
 10198:                &                 "internal barrier boundary cross-barrier pipe diameter"
 10199:                               iret = nf90_put_att(ncid, myMesh%pipediam_id, "long_name",
 10200:                &                 trim(att_text))
 10201:                               iret = nf90_put_att(ncid, myMesh%pipediam_id, 'units', 'm')
 10202:                               call check_err(iret)
 10203:           !                   PIPECOEF
 10204: +======>                      att_text =
 10205:                &                 "internal barrier boundary cross-barrier pipe coefficient"
 10206:                               iret = nf90_put_att(ncid, myMesh%pipecoef_id, "long_name",
 10207:                &                 trim(att_text))
 10208:                               iret = nf90_put_att(ncid, mymesh%pipecoef_id, 'units',
 10209:                &                                 'nondimensional')
 10210:                               call check_err(iret)
 10211:                           endif
 10212:                         endif
 10213:                       endif
 10214:                    endif
 10215:           !Corbitt: Define ADCIRC-Mesh Attributes
 10216:                    iret = nf90_put_att(ncid, myMesh%mesh_id, 'long_name',
 10217:                &                      'mesh_topology')
 10218:                    CALL check_err(iret)
 10219:                    iret = nf90_put_att(ncid, myMesh%mesh_id, 'cf_role',
 10220:                &                      'mesh_topology')
 10221:                    CALL check_err(iret)
 10222:           !Corbitt: 11/12/13 - Obsolete CF-UGRID Convention
 10223:           !         iret = nf90_put_att(ncid, myMesh%mesh_id, 'standard_name',
 10224:           !     &                      'mesh_topology')
 10225:           !         CALL check_err(iret)
 10226:           !         iret = nf90_put_att(ncid, myMesh%mesh_id, 'dimension',
 10227:           !     &                      2)
 10228:           !         CALL check_err(iret)
 10229:                    iret = nf90_put_att(ncid, myMesh%mesh_id, 'topology_dimension',
 10230:                &                      2)
 10231:                    CALL check_err(iret)
 10232:                    iret = nf90_put_att(ncid, myMesh%mesh_id, 'node_coordinates',
 10233:                &                      'x y')
 10234:                    CALL check_err(iret)
 10235:                    iret = nf90_put_att(ncid, myMesh%mesh_id,
 10236:                &   'face_node_connectivity','element')
 10237:                    CALL check_err(iret)
 10238:           
 10239:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10240:                 call allMessage(DEBUG,"Return.")
 10241:           #endif
 10242:                 call unsetMessageSource()
 10243:           C-----------------------------------------------------------------------
 10244:                 END SUBROUTINE defineMeshVariables


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMESHVARIABLES
INLINE LIST

  ROOT: NETCDFIO::DEFINEMESHVARIABLES (netcdfio.F:9810)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:9838)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9844)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9846)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9847)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9848)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9849)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9851)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9854)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9856)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9858)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9860)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9862)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9863)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9865)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9867)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9869)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9871)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9872)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9874)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9877)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9879)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9881)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9883)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_DIM (netcdfio.F:9884)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9891)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9893)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9896)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9898)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9902)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9904)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_SCALAR (netcdfio.F:9906)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9906)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9923)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9925)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9927)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9930)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9933)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9935)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9954)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9956)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:9958)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9960)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9963)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9965)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9967)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9969)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9970)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9973)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9974)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9976)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9977)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9979)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9981)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9983)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9984)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9986)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_ONEDIM (netcdfio.F:9987)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:9989)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_DEF_VAR_MANYDIMS (netcdfio.F:10040)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10042)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::DEFINECOORDINATEATTRIBUTES (netcdfio.F:10053)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10264)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10272)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10273)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10274)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10275)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10276)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10277)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10278)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10279)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10281)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10282)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10283)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10284)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10285)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10286)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10287)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10288)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10291)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10293)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10294)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10295)
      *** Source for routine not found.
   -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:10297)
    -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
       *** Source for routine not found.
    -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
       *** Source for routine not found.
    -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
       *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10298)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10299)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10301)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10303)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10304)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10305)
      *** Source for routine not found.
   -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:10306)
    -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
       *** Source for routine not found.
    -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
       *** Source for routine not found.
    -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
       *** Source for routine not found.
    -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
       *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10307)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10309)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10315)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10056)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10058)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10059)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10061)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10062)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10064)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10065)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10066)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10067)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10068)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10069)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10070)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10075)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10076)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10081)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10083)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10084)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10085)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10086)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10087)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10103)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10105)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10106)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10108)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10111)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10113)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10114)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10116)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10120)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10122)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10123)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10125)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10130)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10132)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10133)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10135)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10139)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10141)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10142)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10144)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10147)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10149)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10150)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10152)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10157)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10159)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10160)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10164)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10166)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10167)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10169)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10173)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10175)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10176)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10178)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10182)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10184)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10185)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10187)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10192)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10194)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10195)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10199)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10201)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10202)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10206)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10208)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10210)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10216)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10218)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10219)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10221)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10229)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10231)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10232)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10234)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10235)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10237)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10242)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMESHVARIABLES
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:10101)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10101)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10101)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10101)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10103)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10103)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10110)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10110)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10110)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10110)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10111)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10111)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10118)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10118)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10118)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10118)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10120)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10120)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10129)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10129)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10129)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10129)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10130)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10130)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10137)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10137)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10137)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10137)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10139)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10139)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10146)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10146)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10146)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10146)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10147)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10147)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10155)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10155)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10155)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10155)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10157)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10157)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10162)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10162)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10162)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10162)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10164)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10164)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10172)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10172)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10172)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10172)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10173)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10173)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10180)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10180)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10180)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10180)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10182)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10182)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10190)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10190)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10190)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10190)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10192)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10192)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10197)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10197)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10197)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10197)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10199)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10199)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10204)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10204)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10204)
    <Unvectorized loop.>
    *** Unvectorizable data type. : ATT_TEXT (netcdfio.F:10204)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10206)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10206)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMESHVARIABLES
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 39 [s0-s12 s15-s16 s18-s19 s23-s38 s58-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2816 bytes
      Register spill area      :  504 bytes
      Parameter area           :  120 bytes
      Register save area       :  176 bytes
      User data area           : 2008 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:10101)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10101)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10103)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10110)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10110)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10111)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10118)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10118)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10120)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10129)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10129)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10130)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10137)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10137)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10139)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10146)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10146)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10147)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10155)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10155)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10157)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10162)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10162)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10164)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10172)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10172)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10173)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10180)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10180)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10182)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10190)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10190)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10192)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10197)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10197)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10199)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10204)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10204)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10206)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINECOORDINATEATTRIBUTES
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10264: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 10272: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10273: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
 10297: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE
 10862: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE
 10306: inl(1222): Inlined: NETCDFIO::PUTUNITSATTRIBUTE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINECOORDINATEATTRIBUTES
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10256:                 subroutine defineCoordinateAttributes(ncid, xid, yid)
 10257:                 USE MESH, ONLY : ICS
 10258:                 IMPLICIT NONE
 10259:                 INTEGER ncid
 10260:                 INTEGER xid
 10261:                 INTEGER yid
 10262:                 INTEGER iret
 10263:           C
 10264:                 call setMessageSource("defineCoordinateAttributes")
 10265:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10266:                 call allMessage(DEBUG,"Enter.")
 10267:           #endif
 10268:           C
 10269:                 if(ics.ne.1) then  ! this indicates spherical coordinates
 10270:           
 10271:           C        Define longitude attributes
 10272:                    iret = nf90_put_att(ncid, xid, 'long_name','longitude')
 10273:                    CALL check_err(iret)
 10274:                    iret = nf90_put_att(ncid, xid,'standard_name','longitude')
 10275:                    CALL check_err(iret)
 10276:                    iret = nf90_put_att(ncid, xid,'units', 'degrees_east')
 10277:                    CALL check_err(iret)
 10278:                    iret = nf90_put_att(ncid, xid, 'positive', 'east')
 10279:                    CALL check_err(iret)
 10280:           !        Define latitude attributes
 10281:                    iret = nf90_put_att(ncid, yid, 'long_name','latitude')
 10282:                    CALL check_err(iret)
 10283:                    iret = nf90_put_att(ncid, yid,'standard_name','latitude')
 10284:                    CALL check_err(iret)
 10285:                    iret = nf90_put_att(ncid, yid, 'units', 'degrees_north')
 10286:                    CALL check_err(iret)
 10287:                    iret = nf90_put_att(ncid, yid, 'positive','north')
 10288:                    CALL check_err(iret)
 10289:                 else   ! must be using Cartesian (x,y) coordinates
 10290:           !        Define x-coordinate attributes
 10291:                    iret = nf90_put_att(ncid, xid,'long_name',
 10292:                &   'Cartesian coordinate x')
 10293:                    CALL check_err(iret)
 10294:                    iret = nf90_put_att(ncid, xid, 'standard_name','x_coordinate')
 10295:                    CALL check_err(iret)
 10296:           !        determine variable units
 10297:         I          CALL putUnitsAttribute(ncid, xid, 'm', 'ft')
 10298:                    iret = nf90_put_att(ncid, xid, 'positive', 'right')
 10299:                    CALL check_err(iret)
 10300:           !        Define y-coordinate attributes
 10301:                    iret = nf90_put_att(ncid, yid,'long_name',
 10302:                &   'Cartesian coordinate y')
 10303:                    CALL check_err(iret)
 10304:                    iret = nf90_put_att(ncid, yid, 'standard_name', 'y_coordinate')
 10305:                    CALL check_err(iret)
 10306:         I          CALL putUnitsAttribute(ncid, yid, 'm', 'ft')
 10307:                    iret = nf90_put_att(ncid, yid, 'positive',
 10308:                &          '90 degrees counterclockwise from x')
 10309:                    CALL check_err(iret)
 10310:                 endif
 10311:           
 10312:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10313:                 call allMessage(DEBUG,"Return.")
 10314:           #endif
 10315:                 call unsetMessageSource()
 10316:           C-----------------------------------------------------------------------
 10317:                 END SUBROUTINE defineCoordinateAttributes


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINECOORDINATEATTRIBUTES
INLINE LIST

  ROOT: NETCDFIO::DEFINECOORDINATEATTRIBUTES (netcdfio.F:10256)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10264)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10272)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10273)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10274)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10275)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10276)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10277)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10278)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10279)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10281)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10282)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10283)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10284)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10285)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10286)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10287)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10288)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10291)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10293)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10294)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10295)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:10297)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10298)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10299)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10301)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10303)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10304)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10305)
     *** Source for routine not found.
  -> INLINE: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:10306)
   -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
      *** Source for routine not found.
   -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
      *** Source for routine not found.
   -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
      *** Source for routine not found.
   -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
      *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10307)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10309)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10315)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINECOORDINATEATTRIBUTES
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINECOORDINATEATTRIBUTES
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 31 [s0-s5 s8-s12 s15-s16 s18 s23-s36 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 400 bytes
      Register spill area      :  80 bytes
      Parameter area           :  48 bytes
      Register save area       : 176 bytes
      User data area           :  96 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTMESHVARIABLES
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10341: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 10347: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL
 10348: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
 10364: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_2D_FOURBYTEINT
 10370: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT
 10411: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTMESHVARIABLES
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10326:                 subroutine putMeshVariables(ncid, myMesh)
 10327:                 USE MESH, ONLY : DP
 10328:                 USE GLOBAL, ONLY : C3D
 10329:                 USE GLOBAL_3DVS, ONLY : SIGMA
 10330:                 USE NodalAttributes, ONLY : nwp, nolibf, tau0, cf, eslm
 10331:                 USE VERSION
 10332:                 IMPLICIT NONE
 10333:                 INTEGER, intent(in) :: ncid
 10334:                 type(meshStructure), intent(inout) :: myMesh
 10335:                 INTEGER iret   ! Error status return
 10336:           C
 10337:                 INTEGER counti(1), starti(1), n
 10338:                 INTEGER kount(2), start(2)
 10339:                 REAL    realval(1)
 10340:           C
 10341:                 call setMessageSource("putMeshVariables")
 10342:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10343:                 call allMessage(DEBUG,"Enter.")
 10344:           #endif
 10345:           C
 10346:           C     Store nodal coordinates
 10347:                 iret = nf90_put_var(ncid, myMesh%X_id, myMesh%xnc)
 10348:                 CALL check_err(iret)
 10349:                 iret = nf90_put_var(ncid, myMesh%Y_id, myMesh%ync)
 10350:                 CALL check_err(iret)
 10351:                 IF (C3D.eqv..true.) THEN
 10352:                    iret = nf90_put_var(ncid, myMesh%sigma_id, sigma)
 10353:                    CALL check_err(iret)
 10354:                 ENDIF
 10355:           C
 10356:           !     Store depth
 10357:                 iret = nf90_put_var(ncid, myMesh%DEPTH_id, DP)
 10358:                 CALL check_err(iret)
 10359:           !     Store elements
 10360:                 kount(1)=myMesh%nface_len
 10361:                 kount(2)=myMesh%num_elems
 10362:                 start(1)=1
 10363:                 start(2)=1
 10364:                 iret=nf90_put_var(ncid, myMesh%ele_id,
 10365:                & myMesh%element,start,kount)
 10366:                 call check_err(iret)
 10367:           
 10368:           !     Store elevation boundary information
 10369:                 if(myMesh%nopenc.ne.0) then
 10370:                    iret = nf90_put_var(ncid, myMesh%nvdllnc_id, myMesh%nvdllnc)
 10371:                    CALL check_err(iret)
 10372:                    iret = nf90_put_var(ncid,myMesh%ibtypeenc_id,
 10373:                &          myMesh%ibtypeenc)
 10374:                    CALL check_err(iret)
 10375:                    iret = nf90_put_var(ncid, myMesh%nbdvnc_id ,myMesh%nbdvnc)
 10376:                    CALL check_err(iret)
 10377:                 endif
 10378:           !     Store normal flow boundary information
 10379:                 if(myMesh%nbounc.ne.0) then
 10380:                    iret = nf90_put_var(ncid,myMesh%ibtypenc_id, myMesh%ibtypenc)
 10381:                    CALL check_err(iret)
 10382:                    iret = nf90_put_var(ncid, myMesh%nvellnc_id, myMesh%nvellnc)
 10383:                    CALL check_err(iret)
 10384:                    iret = nf90_put_var(ncid, myMesh%nbvvnc_id, myMesh%nbvvnc)
 10385:                    CALL check_err(iret)
 10386:                    if(myMesh%hasWeirs)then
 10387:                       iret = nf90_put_var(ncid, myMesh%barht_id, myMesh%barht)
 10388:                       CALL check_err(iret)
 10389:                       iret = nf90_put_var(ncid, myMesh%barsp_id, myMesh%barsp)
 10390:                       CALL check_err(iret)
 10391:                       if(myMesh%hasInternalWeirs)then
 10392:                           iret = nf90_put_var(ncid, myMesh%ibconn_id, myMesh%ibconnnc)
 10393:                           CALL check_err(iret)
 10394:                           iret = nf90_put_var(ncid, myMesh%barsb_id, myMesh%barsb)
 10395:                           CALL check_err(iret)
 10396:                           if(myMesh%hasPipes)then
 10397:                               iret = nf90_put_var(ncid, myMesh%pipeht_id, myMesh%pipeht)
 10398:                               CALL check_err(iret)
 10399:                               iret = nf90_put_var(ncid, myMesh%pipediam_id, myMesh%pipediam)
 10400:                               CALL check_err(iret)
 10401:                               iret = nf90_put_var(ncid, myMesh%pipecoef_id, myMesh%pipecoef)
 10402:                               CALL check_err(iret)
 10403:                           endif
 10404:                       endif
 10405:                    endif
 10406:                 endif
 10407:           
 10408:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10409:                 call allMessage(DEBUG,"Return.")
 10410:           #endif
 10411:                 call unsetMessageSource()
 10412:           C-----------------------------------------------------------------------
 10413:                 END SUBROUTINE putMeshVariables


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTMESHVARIABLES
INLINE LIST

  ROOT: NETCDFIO::PUTMESHVARIABLES (netcdfio.F:10326)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10341)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10347)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10348)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10349)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10350)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10352)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10353)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10357)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10358)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_2D_FOURBYTEINT (netcdfio.F:10364)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10366)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10370)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10371)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10372)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10374)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10375)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10376)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10380)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10381)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10382)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10383)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10384)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10385)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10387)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10388)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10389)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10390)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_FOURBYTEINT (netcdfio.F:10392)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10393)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10394)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10395)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10397)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10398)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10399)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10400)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_VAR_1D_EIGHTBYTEREAL (netcdfio.F:10401)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10402)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10411)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTMESHVARIABLES
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTMESHVARIABLES
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 32 [s0-s6 s8-s12 s15-s16 s23-s37 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 1088 bytes
      Register spill area      :    0 bytes
      Parameter area           :   56 bytes
      Register save area       :  176 bytes
      User data area           :  848 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINETIMEATTRIBUTES
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10431: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10433: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
 10437: vec( 103): Unvectorized loop.
 10437: vec( 108): Unvectorizable loop structure.
 10437: vec( 118): Unvectorizable data type.: DATE_STRING
 10438: vec( 103): Unvectorized loop.
 10438: vec( 108): Unvectorizable loop structure.
 10441: vec( 103): Unvectorized loop.
 10441: vec( 108): Unvectorizable loop structure.
 10441: vec( 118): Unvectorizable data type.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINETIMEATTRIBUTES
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10422:                 SUBROUTINE defineTimeAttributes(ncid, myTime)
 10423:                 USE GLOBAL, ONLY : base_date
 10424:                 IMPLICIT NONE
 10425:                 INTEGER, intent(in) :: ncid  ! file id of netcdf file
 10426:                 type(TimeData), intent(in) :: myTime ! time data for this netcdf file
 10427:           C
 10428:                 character date_string*60
 10429:                 integer :: iret    ! error status of netcdf call
 10430:           C
 10431:                 iret = nf90_put_att(ncid, myTime%timenc_id,
 10432:                &       'long_name','model time')
 10433:                 CALL check_err(iret)
 10434:                 iret = nf90_put_att(ncid, myTime%timenc_id,
 10435:                &       'standard_name', 'time')
 10436:                 CALL check_err(iret)
 10437: +======>        date_string = 'seconds since '//adjustl(trim(base_date))
 10438:                 iret = nf90_put_att(ncid, myTime%timenc_id, 'units',
 10439:                &        trim(date_string))
 10440:                 CALL check_err(iret)
 10441:                 iret = nf90_put_att(ncid, myTime%timenc_id,
 10442:                &       'base_date', adjustl(trim(base_date)))
 10443:                 CALL check_err(iret)
 10444:           C-----------------------------------------------------------------------
 10445:                 END SUBROUTINE defineTimeAttributes


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINETIMEATTRIBUTES
INLINE LIST

  ROOT: NETCDFIO::DEFINETIMEATTRIBUTES (netcdfio.F:10422)
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10431)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10433)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10434)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10436)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10438)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10440)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10441)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10443)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINETIMEATTRIBUTES
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    <Unvectorized loop.>
    *** Unvectorizable data type. : DATE_STRING (netcdfio.F:10437)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10438)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10441)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINETIMEATTRIBUTES
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 34 [s0-s5 s8-s12 s15-s16 s18-s20 s23-s34 s58-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 304 bytes
      Register spill area      :   0 bytes
      Parameter area           :  48 bytes
      Register save area       : 176 bytes
      User data area           :  80 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10437)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10438)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10441)
    *** Estimated execution cycle                       : 5
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMETADATA
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10484: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 10498: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10499: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
 10506: vec( 103): Unvectorized loop.
 10506: vec( 108): Unvectorizable loop structure.
 10506: vec( 118): Unvectorizable data type.: RUNDES
 10506: vec( 118): Unvectorizable data type.
 10509: vec( 103): Unvectorized loop.
 10509: vec( 108): Unvectorizable loop structure.
 10509: vec( 118): Unvectorizable data type.: AGRID
 10509: vec( 118): Unvectorizable data type.
 10512: vec( 103): Unvectorized loop.
 10512: vec( 108): Unvectorizable loop structure.
 10512: vec( 118): Unvectorizable data type.: RUNDES
 10512: vec( 118): Unvectorizable data type.
 10515: vec( 103): Unvectorized loop.
 10515: vec( 108): Unvectorizable loop structure.
 10515: vec( 118): Unvectorizable data type.: RUNID
 10515: vec( 118): Unvectorizable data type.
 10518: vec( 103): Unvectorized loop.
 10518: vec( 108): Unvectorizable loop structure.
 10518: vec( 118): Unvectorizable data type.: TITLE
 10518: vec( 118): Unvectorizable data type.
 10521: vec( 103): Unvectorized loop.
 10521: vec( 108): Unvectorizable loop structure.
 10521: vec( 118): Unvectorizable data type.: INSTITUTION
 10521: vec( 118): Unvectorizable data type.
 10524: vec( 103): Unvectorized loop.
 10524: vec( 108): Unvectorizable loop structure.
 10524: vec( 118): Unvectorizable data type.: SOURCE
 10524: vec( 118): Unvectorizable data type.
 10527: vec( 103): Unvectorized loop.
 10527: vec( 108): Unvectorizable loop structure.
 10527: vec( 118): Unvectorizable data type.: HISTORY
 10527: vec( 118): Unvectorizable data type.
 10530: vec( 103): Unvectorized loop.
 10530: vec( 108): Unvectorizable loop structure.
 10530: vec( 118): Unvectorizable data type.: REFERENCES
 10530: vec( 118): Unvectorizable data type.
 10533: vec( 103): Unvectorized loop.
 10533: vec( 108): Unvectorizable loop structure.
 10533: vec( 118): Unvectorizable data type.: COMMENTS
 10533: vec( 118): Unvectorizable data type.
 10536: vec( 103): Unvectorized loop.
 10536: vec( 108): Unvectorizable loop structure.
 10536: vec( 118): Unvectorizable data type.: HOST
 10536: vec( 118): Unvectorizable data type.
 10539: vec( 103): Unvectorized loop.
 10539: vec( 108): Unvectorizable loop structure.
 10539: vec( 118): Unvectorizable data type.: CONVENTION
 10539: vec( 118): Unvectorizable data type.
 10545: vec( 103): Unvectorized loop.
 10545: vec( 108): Unvectorizable loop structure.
 10545: vec( 118): Unvectorizable data type.: CONTACT
 10545: vec( 118): Unvectorizable data type.
 10553: vec( 103): Unvectorized loop.
 10553: vec( 108): Unvectorizable loop structure.
 10556: vec( 103): Unvectorized loop.
 10556: vec( 108): Unvectorizable loop structure.
 10566: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
 10568: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT
 10675: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMETADATA
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10454:                 subroutine defineMetaData(ncid)
 10455:                 USE VERSION
 10456:                 USE MESH, ONLY : ICS, AGRID, SLAM0, SFEA0
 10457:                 USE ADC_CONSTANTS, ONLY: RAD2DEG
 10458:                 USE GLOBAL, ONLY : RUNDES, title, institution, source,
 10459:                &                   history, references, comments, host,
 10460:                &                   convention, contact, dtdp, ihot,
 10461:                &                   nolifa, nolica, nolicat,
 10462:                &                   ncor, ntip, nws, nramp, statim,
 10463:                &                   reftim, rnday, dramp, h0,
 10464:                &                   cori, ntif, nbfr, C3D, inunThresh,
 10465:                &                   inundationOutput, runid
 10466:                 USE GLOBAL_3DVS, ONLY : iden, islip, kp, z0s, z0b, theta1, theta2,
 10467:                &   ievc, evmin, evcon, alp1, alp2, alp3, igc, nlsd, nvsd, nltd,
 10468:                &   nvtd, alp4
 10469:                 USE GWCE, ONLY : a00, b00, c00
 10470:                 USE NodalAttributes, ONLY: nolibf, nwp, tau0, cf, eslm
 10471:                 IMPLICIT NONE
 10472:                 INTEGER :: ncid
 10473:                 INTEGER :: iret ! success or failure of the netcdf call
 10474:           C
 10475:                 REAL(8) SLAM0DEG
 10476:                 REAL(8) SFEA0DEG
 10477:           !     date_string variables for time attribute
 10478:                 character date_string*40
 10479:                 character now_date*8
 10480:                 character big_ben*10
 10481:                 character zone*5
 10482:                 integer values(8)
 10483:           C
 10484:                 call setMessageSource("defineMetaData")
 10485:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10486:                 call allMessage(DEBUG,"Enter.")
 10487:           #endif
 10488:           !
 10489:           !     Convert back to degrees ... the original input is in degrees,
 10490:           C     but this gets converted to radians immediately and unfortunately
 10491:           C     the values that were read in get overwritten ... need to go
 10492:           C     back to degrees to write them back out
 10493:                 SLAM0DEG=SLAM0*RAD2DEG
 10494:                 SFEA0DEG=SFEA0*RAD2DEG
 10495:           !     -----------------
 10496:           !     Global attributes
 10497:           !     -----------------
 10498:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'model', 'ADCIRC')
 10499:                 CALL check_err(iret)
 10500:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'version', ADC_VERSION)
 10501:                 CALL check_err(iret)
 10502:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'git_hash', ADC_HASH)
 10503:                 CALL check_err(iret)
 10504:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'grid_type', 'Triangular')
 10505:                 CALL check_err(iret)
 10506:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'description',
 10507:                &       trim(adjustl(rundes)))
 10508:                 CALL check_err(iret)
 10509:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'agrid',
 10510:                &        trim(adjustl(agrid)))
 10511:                 CALL check_err(iret)
 10512:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'rundes',
 10513:                &       trim(adjustl(rundes)))
 10514:                 CALL check_err(iret)
 10515:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'runid',
 10516:                &       trim(adjustl(runid)))
 10517:                 CALL check_err(iret)
 10518:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'title',
 10519:                &        trim(adjustl(title)))
 10520:                 CALL check_err(iret)
 10521:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'institution',
 10522:                &        trim(adjustl(institution)))
 10523:                 CALL check_err(iret)
 10524:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'source',
 10525:                &       trim(adjustl(source)))
 10526:                 CALL check_err(iret)
 10527:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'history',
 10528:                &       trim(adjustl(history)))
 10529:                 CALL check_err(iret)
 10530:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'references',
 10531:                &       trim(adjustl(references)))
 10532:                 CALL check_err(iret)
 10533:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'comments',
 10534:                &       trim(adjustl(comments)))
 10535:                 CALL check_err(iret)
 10536:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'host',
 10537:                &       trim(adjustl(host)))
 10538:                 CALL check_err(iret)
 10539:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'convention',
 10540:                &       trim(adjustl(convention)))
 10541:                 CALL check_err(iret)
 10542:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'Conventions',
 10543:                &       'UGRID-0.9.0')
 10544:                 CALL check_err(iret)
 10545:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'contact',
 10546:                &       trim(adjustl(contact)))
 10547:                 CALL check_err(iret)
 10548:                 CALL date_and_time(now_date,big_ben,zone,values)
 10549:                 WRITE(date_string,71) values(1),values(2),values(3),
 10550:                &      values(5),values(6),values(7),   (values(4))/60
 10551:            71   FORMAT(I4,'-',I2.2,'-',i2.2,' ',i2,':',i2.2,':',i2.2,' '
 10552:                &  ,i3.2,':00')
 10553:                 iret = nf90_put_att(ncid, NF90_GLOBAL,'creation_date',
 10554:                &       trim(date_string))
 10555:                 CALL check_err(iret)
 10556:                 iret = nf90_put_att(ncid, NF90_GLOBAL,'modification_date',
 10557:                &       trim(date_string))
 10558:                 CALL check_err(iret)
 10559:           
 10560:           !     -------------------------------------------
 10561:           !     writing global attributes from fort.15 file
 10562:           !     -------------------------------------------
 10563:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'fort.15',
 10564:                &                      '==== Input File Parameters (below) ====')
 10565:                 CALL check_err(iret)
 10566:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'dt', dtdp)
 10567:                 CALL check_err(iret)
 10568:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'ihot', ihot)
 10569:                 CALL check_err(iret)
 10570:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'ics', ics)
 10571:                 CALL check_err(iret)
 10572:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nolibf', nolibf)
 10573:                 CALL check_err(iret)
 10574:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nolifa', nolifa)
 10575:                 CALL check_err(iret)
 10576:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nolica', nolica)
 10577:                 CALL check_err(iret)
 10578:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nolicat', nolicat)
 10579:                 CALL check_err(iret)
 10580:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nwp', nwp)
 10581:                 CALL check_err(iret)
 10582:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'ncor', ncor)
 10583:                 CALL check_err(iret)
 10584:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'ntip', ntip)
 10585:                 CALL check_err(iret)
 10586:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nws', nws)
 10587:                 CALL check_err(iret)
 10588:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nramp', nramp)
 10589:                 CALL check_err(iret)
 10590:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'tau0', tau0)
 10591:                 CALL check_err(iret)
 10592:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'statim', statim)
 10593:                 CALL check_err(iret)
 10594:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'reftim', reftim)
 10595:                 CALL check_err(iret)
 10596:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'rnday', rnday)
 10597:                 CALL check_err(iret)
 10598:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'dramp', dramp)
 10599:                 CALL check_err(iret)
 10600:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'a00', a00)
 10601:                 CALL check_err(iret)
 10602:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'b00', b00)
 10603:           
 10604:                 CALL check_err(iret)
 10605:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'c00', c00)
 10606:                 CALL check_err(iret)
 10607:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'h0', h0)
 10608:                 CALL check_err(iret)
 10609:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'slam0', slam0deg)
 10610:                 CALL check_err(iret)
 10611:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'sfea0', sfea0deg)
 10612:                 CALL check_err(iret)
 10613:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'cf', cf)
 10614:                 CALL check_err(iret)
 10615:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'eslm', eslm)
 10616:                 CALL check_err(iret)
 10617:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'cori', cori)
 10618:                 CALL check_err(iret)
 10619:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'ntif', ntif)
 10620:                 CALL check_err(iret)
 10621:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nbfr', nbfr)
 10622:                 CALL check_err(iret)
 10623:                 IF (C3D.eqv..true.) THEN
 10624:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'iden', iden)
 10625:                    CALL check_err(iret)
 10626:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'islip', islip)
 10627:                    CALL check_err(iret)
 10628:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'kp', kp)
 10629:                    CALL check_err(iret)
 10630:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'z0s', z0s)
 10631:                    CALL check_err(iret)
 10632:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'z0b', z0b)
 10633:                    CALL check_err(iret)
 10634:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'alp1', alp1)
 10635:                    CALL check_err(iret)
 10636:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'alp2', alp2)
 10637:                    CALL check_err(iret)
 10638:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'alp3', alp3)
 10639:                    CALL check_err(iret)
 10640:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'igc', igc)
 10641:                    CALL check_err(iret)
 10642:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'ievc', ievc)
 10643:                    CALL check_err(iret)
 10644:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'evmin', evmin)
 10645:                    CALL check_err(iret)
 10646:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'evcon', evcon)
 10647:                    CALL check_err(iret)
 10648:                    IF ((ievc.eq.50).or.(ievc.eq.51)) THEN
 10649:                       iret = nf90_put_att(ncid, NF90_GLOBAL,'theta1', theta1)
 10650:                       CALL check_err(iret)
 10651:                       iret = nf90_put_att(ncid, NF90_GLOBAL,'theta2', theta2)
 10652:                       CALL check_err(iret)
 10653:                    ENDIF
 10654:                    IF (iden.gt.0) THEN
 10655:                       iret = nf90_put_att(ncid, NF90_GLOBAL,'nlsd', nlsd)
 10656:                       CALL check_err(iret)
 10657:                       iret = nf90_put_att(ncid, NF90_GLOBAL,'nvsd', nvsd)
 10658:                       CALL check_err(iret)
 10659:                       iret = nf90_put_att(ncid, NF90_GLOBAL,'nltd', nltd)
 10660:                       CALL check_err(iret)
 10661:                       iret = nf90_put_att(ncid, NF90_GLOBAL,'nvtd', nvtd)
 10662:                       CALL check_err(iret)
 10663:                       iret = nf90_put_att(ncid, NF90_GLOBAL,'alp4', alp4)
 10664:                       CALL check_err(iret)
 10665:                    ENDIF
 10666:                 ENDIF
 10667:                 if (inundationOutput.eqv..true.) then
 10668:                    iret = nf90_put_att(ncid, NF90_GLOBAL,'inunThresh', inunThresh)
 10669:                    CALL check_err(iret)
 10670:                 endif
 10671:           
 10672:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10673:                 call allMessage(DEBUG,"Return.")
 10674:           #endif
 10675:                 call unsetMessageSource()
 10676:           C-----------------------------------------------------------------------
 10677:                 END SUBROUTINE defineMetaData


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMETADATA
INLINE LIST

  ROOT: NETCDFIO::DEFINEMETADATA (netcdfio.F:10454)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10484)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10498)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10499)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10500)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10501)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10502)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10503)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10504)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10505)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10506)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10508)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10509)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10511)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10512)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10514)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10515)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10517)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10518)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10520)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10521)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10523)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10524)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10526)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10527)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10529)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10530)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10532)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10533)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10535)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10536)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10538)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10539)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10541)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10542)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10544)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10545)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10547)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10553)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10555)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10556)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10558)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10563)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10565)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10566)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10567)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10568)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10569)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10570)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10571)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10572)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10573)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10574)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10575)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10576)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10577)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10578)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10579)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10580)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10581)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10582)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10583)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10584)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10585)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10586)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10587)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10588)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10589)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10590)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10591)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10592)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10593)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10594)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10595)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10596)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10597)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10598)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10599)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10600)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10601)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10602)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10604)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10605)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10606)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10607)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10608)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10609)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10610)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10611)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10612)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10613)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10614)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10615)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10616)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10617)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10618)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10619)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10620)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10621)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10622)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10624)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10625)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10626)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10627)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10628)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10629)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10630)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10631)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10632)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10633)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10634)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10635)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10636)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10637)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10638)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10639)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10640)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10641)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10642)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10643)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10644)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10645)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10646)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10647)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10649)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10650)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10651)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10652)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10655)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10656)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10657)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10658)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10659)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10660)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10661)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10662)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10663)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10664)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10668)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10669)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10675)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMETADATA
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:10506)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10506)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10506)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNDES (netcdfio.F:10506)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10506)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10506)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10506)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10506)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10509)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    <Unvectorized loop.>
    *** Unvectorizable data type. : AGRID (netcdfio.F:10509)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10509)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10509)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10512)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNDES (netcdfio.F:10512)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10512)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10512)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10515)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNID (netcdfio.F:10515)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10515)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10515)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10518)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    <Unvectorized loop.>
    *** Unvectorizable data type. : TITLE (netcdfio.F:10518)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10518)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10518)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10521)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    <Unvectorized loop.>
    *** Unvectorizable data type. : INSTITUTION (netcdfio.F:10521)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10521)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10521)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10524)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    <Unvectorized loop.>
    *** Unvectorizable data type. : SOURCE (netcdfio.F:10524)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10524)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10524)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10527)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    <Unvectorized loop.>
    *** Unvectorizable data type. : HISTORY (netcdfio.F:10527)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10527)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10527)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10530)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    <Unvectorized loop.>
    *** Unvectorizable data type. : REFERENCES (netcdfio.F:10530)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10530)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10530)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10533)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    <Unvectorized loop.>
    *** Unvectorizable data type. : COMMENTS (netcdfio.F:10533)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10533)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10533)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10536)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    <Unvectorized loop.>
    *** Unvectorizable data type. : HOST (netcdfio.F:10536)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10536)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10536)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10539)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    <Unvectorized loop.>
    *** Unvectorizable data type. : CONVENTION (netcdfio.F:10539)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10539)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10539)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    <Unvectorized loop.>
    *** Unvectorizable data type. : CONTACT (netcdfio.F:10545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10545)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10553)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10553)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10556)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10556)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::DEFINEMETADATA
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 32 [s0-s12 s15-s16 s23-s32 s57-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2752 bytes
      Register spill area      :    0 bytes
      Parameter area           :   72 bytes
      Register save area       :  176 bytes
      User data area           : 2496 bytes
      Others                   :    8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:10506)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10506)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10506)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10506)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10509)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10512)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10515)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10518)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10521)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10524)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10527)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10530)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10533)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10536)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10539)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10545)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10553)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10556)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::METALENGTH
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10694: vec( 103): Unvectorized loop.
 10694: vec( 108): Unvectorizable loop structure.
 10697: vec( 103): Unvectorized loop.
 10697: vec( 108): Unvectorizable loop structure.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::METALENGTH
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10688:                 function metalength(string)
 10689:                 integer :: metalength
 10690:                 character(*), intent(in) :: string
 10691:                 metalength = index(string,"!") ! use the "!" as terminator if present
 10692:                 if (metalength.eq.0) then
 10693:                    ! there is no embedded "!" in the metadata line -- use the full line
 10694:                    metalength = len_trim(string)
 10695:                 else
 10696:                    ! trim space between end of metadata and embedded "!"
 10697:                    metalength = len_trim(string(1:metalength-1))
 10698:                 endif
 10699:           C-----------------------------------------------------------------------
 10700:                 end function metalength


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::METALENGTH
INLINE LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::METALENGTH
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:10697)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10697)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10694)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10694)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::METALENGTH
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 17 [s0-s3 s8-s12 s15-s16 s23-s24 s33 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 208 bytes
      Register spill area      :   0 bytes
      Parameter area           :  32 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:10697)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10694)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::UPDATEMETADATA
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10726: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 10731: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
 10732: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
 10734: inl(1212): Source for routine not found.: NETCDF::NF90_REDEF
 10736: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10736: vec( 103): Unvectorized loop.
 10736: vec( 108): Unvectorizable loop structure.
 10736: vec( 118): Unvectorizable data type.: RUNDES
 10736: vec( 118): Unvectorizable data type.
 10738: vec( 103): Unvectorized loop.
 10738: vec( 108): Unvectorizable loop structure.
 10738: vec( 118): Unvectorizable data type.: RUNID
 10738: vec( 118): Unvectorizable data type.
 10740: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT
 10744: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL
 10770: inl(1212): Source for routine not found.: NETCDF::NF90_ENDDEF
 10773: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE
 10778: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::UPDATEMETADATA
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10709:                 subroutine updateMetaData(ncid,myFile)
 10710:                 USE GLOBAL, ONLY : ihot, nramp, rnday, dramp, h0, rundes, runid
 10711:                 USE NodalAttributes, ONLY : nwp, nolibf, tau0, cf, eslm
 10712:                 USE GWCE, ONLY : a00, b00, c00
 10713:                 USE VERSION
 10714:                 IMPLICIT NONE
 10715:                 INTEGER :: ncid
 10716:                 type(fileData), intent(inout) :: myFile
 10717:           C
 10718:                 INTEGER iret   ! Error status return
 10719:           !     date_string variables for time attribute
 10720:                 character date_string*40
 10721:                 character now_date*8
 10722:                 character big_ben*10
 10723:                 character zone*5
 10724:                 integer values(8)
 10725:           C
 10726:                 call setMessageSource("updateMetaData")
 10727:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10728:                 call allMessage(DEBUG,"Enter.")
 10729:           #endif
 10730:           C     Open existing NetCDF file
 10731:                 iret = nf90_open(myFile%FILENAME, NF90_WRITE, ncid)
 10732:                 CALL check_err(iret)
 10733:           C
 10734:                 iret = nf90_redef (ncid)
 10735:                 CALL check_err(iret)
 10736:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'rundes', trim(adjustl(rundes)))
 10737:                 CALL check_err(iret)
 10738:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'runid', trim(adjustl(runid)))
 10739:                 CALL check_err(iret)
 10740:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'ihot', ihot)
 10741:                 CALL check_err(iret)
 10742:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'nramp', nramp)
 10743:                 CALL check_err(iret)
 10744:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'tau0', tau0)
 10745:                 CALL check_err(iret)
 10746:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'rnday', rnday)
 10747:                 CALL check_err(iret)
 10748:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'dramp', dramp)
 10749:                 CALL check_err(iret)
 10750:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'a00', a00)
 10751:                 CALL check_err(iret)
 10752:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'b00', b00)
 10753:                 CALL check_err(iret)
 10754:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'c00', c00)
 10755:                 CALL check_err(iret)
 10756:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'h0', h0)
 10757:                 CALL check_err(iret)
 10758:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'cf', cf)
 10759:                 CALL check_err(iret)
 10760:                 iret = nf90_put_att(ncid, NF90_GLOBAL, 'eslm', eslm)
 10761:                 CALL check_err(iret)
 10762:                 CALL date_and_time(now_date,big_ben,zone,values)
 10763:                 WRITE(date_string,71) values(1),values(2),values(3),
 10764:                &      values(5),values(6),values(7),   (values(4))/60
 10765:            71   FORMAT(I4,'-',I2.2,'-',i2.2,' ',i2,':',i2.2,':',i2.2,' '
 10766:                &  ,i3.2,':00')
 10767:                 iret = nf90_put_att(ncid, NF90_GLOBAL,'modification_date',
 10768:                &       date_string)
 10769:                 CALL check_err(iret)
 10770:                 iret = nf90_enddef (ncid)
 10771:                 CALL check_err(iret)
 10772:           C     now close the updated netcdf file
 10773:                 iret = nf90_close(ncid)
 10774:                 CALL check_err(iret)
 10775:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10776:                 call allMessage(DEBUG,"Return.")
 10777:           #endif
 10778:                 call unsetMessageSource()
 10779:           C-----------------------------------------------------------------------
 10780:                 END SUBROUTINE updateMetaData


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::UPDATEMETADATA
INLINE LIST

  ROOT: NETCDFIO::UPDATEMETADATA (netcdfio.F:10709)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10726)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:10731)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10732)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_REDEF (netcdfio.F:10734)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10735)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10736)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10737)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10738)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10739)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10740)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10741)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_FOURBYTEINT (netcdfio.F:10742)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10743)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10744)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10745)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10746)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10747)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10748)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10749)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10750)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10751)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10752)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10753)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10754)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10755)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10756)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10757)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10758)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10759)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10760)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10761)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10767)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10769)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_ENDDEF (netcdfio.F:10770)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10771)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:10773)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10774)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10778)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::UPDATEMETADATA
VECTORIZATION LIST

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNDES (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10736)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. : RUNID (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable data type. (netcdfio.F:10738)
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    <Unvectorized loop.>
    *** Unvectorizable loop structure. (netcdfio.F:10738)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::UPDATEMETADATA
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 29 [s0-s12 s15-s16 s23-s30 s58-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 2512 bytes
      Register spill area      :    0 bytes
      Parameter area           :   80 bytes
      Register save area       :  176 bytes
      User data area           : 2256 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10736)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 8
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 6
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 5
  LOOP END

  LOOP BEGIN: (netcdfio.F:10738)
    *** Estimated execution cycle                       : 7
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READMETADATA
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10800: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 10804: inl(1212): Source for routine not found.: NETCDF::NF90_OPEN
 10804: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
 10805: inl(1212): Source for routine not found.: NETCDF::NF90_GET_ATT_TEXT
 10807: inl(1212): Source for routine not found.: NETCDF::NF90_GET_ATT_ONE_FOURBYTEINT
 10809: inl(1212): Source for routine not found.: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL
 10818: inl(1212): Source for routine not found.: NETCDF::NF90_INQ_DIMID
 10820: inl(1212): Source for routine not found.: NETCDF::NF90_INQUIRE_DIMENSION
 10822: inl(1212): Source for routine not found.: NETCDF::NF90_CLOSE
 10826: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READMETADATA
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10789:                 SUBROUTINE ReadMetaData(ncid,myFile)
 10790:           C-----------------------------------------------------------------------
 10791:                   USE GLOBAL,ONLY:ihot,nramp,rnday,dramp,h0,np_g,ne_g,rundes,runid
 10792:                   USE NodalAttributes,ONLY:nwp,nolibf,tau0,cf,eslm
 10793:                   USE VERSION
 10794:                   USE GWCE, ONLY : a00,b00,c00
 10795:                   IMPLICIT NONE
 10796:                   INTEGER :: NCID,dimid_node,dimid_nele
 10797:                   TYPE(fileData),INTENT(INOUT) :: myFile
 10798:                   INTEGER :: iret
 10799:           
 10800:                   call setMessageSource("readMetaData")
 10801:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10802:                   call allMessage(DEBUG,"Enter.")
 10803:           #endif
 10804:                   CALL CHECK_ERR(nf90_open(myFile%FILENAME,NF90_NOWRITE,NCID))
 10805:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'rundes',rundes))
 10806:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'runid',runid))
 10807:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'ihot',ihot))
 10808:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'nramp',nramp))
 10809:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'tau0',tau0))
 10810:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'rnday',rnday))
 10811:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'dramp',dramp))
 10812:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'a00',a00))
 10813:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'b00',b00))
 10814:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'c00',c00))
 10815:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'h0',h0))
 10816:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'cf',cf))
 10817:                   CALL CHECK_ERR(nf90_get_att(NCID,NF90_GLOBAL,'eslm',eslm))
 10818:                   CALL CHECK_ERR(nf90_inq_dimid(NCID,"node",dimid_node))
 10819:                   CALL CHECK_ERR(nf90_inq_dimid(NCID,"nfaces",dimid_nele))
 10820:                   CALL CHECK_ERR(nf90_inquire_dimension(ncid,dimid_node,len=NP_G))
 10821:                   CALL CHECK_ERR(nf90_inquire_dimension(ncid,dimid_nele,len=NE_G))
 10822:                   CALL CHECK_ERR(nf90_close(NCID))
 10823:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10824:                   CALL allMessage(DEBUG,"Enter.")
 10825:           #endif
 10826:                   CALL unsetMessageSource()
 10827:                   RETURN
 10828:           C-----------------------------------------------------------------------
 10829:                 END SUBROUTINE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READMETADATA
INLINE LIST

  ROOT: NETCDFIO::READMETADATA (netcdfio.F:10789)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10800)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_OPEN (netcdfio.F:10804)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10804)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_TEXT (netcdfio.F:10805)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10805)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_TEXT (netcdfio.F:10806)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10806)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_FOURBYTEINT (netcdfio.F:10807)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10807)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_FOURBYTEINT (netcdfio.F:10808)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10808)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10809)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10809)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10810)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10810)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10811)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10811)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10812)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10812)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10813)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10813)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10814)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10814)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10815)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10815)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10816)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10816)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_GET_ATT_ONE_EIGHTBYTEREAL (netcdfio.F:10817)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10817)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:10818)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10818)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQ_DIMID (netcdfio.F:10819)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10819)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:10820)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10820)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_INQUIRE_DIMENSION (netcdfio.F:10821)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10821)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_CLOSE (netcdfio.F:10822)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10822)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10826)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READMETADATA
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::READMETADATA
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 23 [s0-s12 s15-s16 s23-s27 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 400 bytes
      Register spill area      :   0 bytes
      Parameter area           :  80 bytes
      Register save area       : 176 bytes
      User data area           : 144 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTUNITSATTRIBUTE
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 10847: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 10853: inl(1212): Source for routine not found.: NETCDF::NF90_PUT_ATT_TEXT
 10857: inl(1212): Source for routine not found.: NETCDF_ERROR::CHECK_ERR
 10862: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTUNITSATTRIBUTE
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10838:                 subroutine putUnitsAttribute(ncid, var_id, metric, english)
 10839:                 USE ADC_CONSTANTS, ONLY : G
 10840:                 IMPLICIT NONE
 10841:                 INTEGER ncid
 10842:                 INTEGER var_id
 10843:                 INTEGER iret  ! success or failure of netcdf call
 10844:                 CHARACTER(*) metric
 10845:                 CHARACTER(*) english
 10846:           C
 10847:                 call setMessageSource("putUnitsAttribute")
 10848:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10849:                 call allMessage(DEBUG,"Enter.")
 10850:           #endif
 10851:           C
 10852:                 if (G.LT.11.D0) then
 10853:                     iret = nf90_put_att(ncid, var_id, 'units', metric)
 10854:                 else
 10855:                     iret = nf90_put_att(ncid, var_id, 'units', english)
 10856:                 endif
 10857:                 CALL check_err(iret)
 10858:           
 10859:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 10860:                 call allMessage(DEBUG,"Return.")
 10861:           #endif
 10862:                 call unsetMessageSource()
 10863:           C
 10864:           C-----------------------------------------------------------------------
 10865:                 end subroutine putUnitsAttribute


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTUNITSATTRIBUTE
INLINE LIST

  ROOT: NETCDFIO::PUTUNITSATTRIBUTE (netcdfio.F:10838)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:10847)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10853)
     *** Source for routine not found.
  -> NOINLINE: NETCDF::NF90_PUT_ATT_TEXT (netcdfio.F:10855)
     *** Source for routine not found.
  -> NOINLINE: NETCDF_ERROR::CHECK_ERR (netcdfio.F:10857)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:10862)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTUNITSATTRIBUTE
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:58 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::PUTUNITSATTRIBUTE
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 23 [s0-s5 s8-s12 s15-s16 s18 s23-s28 s61-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 240 bytes
      Register spill area      :   0 bytes
      Parameter area           :  48 bytes
      Register save area       : 176 bytes
      User data area           :  16 bytes
      Others                   :   0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETADCIRCPARAMETERS
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 11046: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 11060: opt(1592): Outer loop unrolled inside inner loop.
 11060: vec( 101): Vectorized loop.
 11062: vec( 101): Vectorized loop.
 11064: opt(1592): Outer loop unrolled inside inner loop.
 11064: vec( 101): Vectorized loop.
 11066: vec( 101): Vectorized loop.
 11068: vec( 101): Vectorized loop.
 11070: vec( 101): Vectorized loop.
 11072: vec( 101): Vectorized loop.
 11074: vec( 101): Vectorized loop.
 11076: vec( 101): Vectorized loop.
 11078: vec( 101): Vectorized loop.
 11080: vec( 101): Vectorized loop.
 11105: opt(1592): Outer loop unrolled inside inner loop.
 11105: vec( 101): Vectorized loop.
 11107: vec( 101): Vectorized loop.
 11109: opt(1112): Loop fused with previous loop.
 11110: opt(1112): Loop fused with previous loop.
 11111: opt(1112): Loop fused with previous loop.
 11112: opt(1112): Loop fused with previous loop.
 11113: opt(1112): Loop fused with previous loop.
 11114: opt(1112): Loop fused with previous loop.
 11115: opt(1112): Loop fused with previous loop.
 11116: opt(1112): Loop fused with previous loop.
 11117: opt(1112): Loop fused with previous loop.
 11119: opt(1112): Loop fused with previous loop.
 11177: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETADCIRCPARAMETERS
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 10885:                 SUBROUTINE setADCIRCParameters(
 10886:                &   base_date_p, NE_G_p,
 10887:                &   NBOU_p, NVEL_p, NOPE_p, NP_G_p, SLAM0_p, SFEA0_p, NBVV_p,
 10888:                &   NVDLL_p, NBDV_p, NVELL_p, X_p, Y_p,
 10889:                &   IBTYPE_p, IBTYPEE_p, SLAM_p, SFEA_p,
 10890:                &   NODECODE_p, G_p, FileFmtRev_p, FileFmtMinor_p,
 10891:                &   FileFmtMajor_p, im_p, iestp_p, nscoue_p, ivstp_p, nscouv_p,
 10892:                &   icstp_p, nscouc_p, ipstp_p, iwstp_p, nscoum_p, igep_p,
 10893:                &   nscouge_p, igvp_p, nscougv_p, igcp_p, nscougc_p, igpp_p,
 10894:                &   igwp_p, nscougw_p, NM_p, DP_p, RUNDES_p, AGRID_p, title_p,
 10895:                &   institution_p, source_p, history_p, references_p, comments_p,
 10896:                &   host_p, convention_p, contact_p, dtdp_p, ihot_p, ics_p,
 10897:                &   nolifa_p, nolica_p, nolicat_p, ncor_p, ntip_p, nws_p, nramp_p,
 10898:                &   statim_p, reftim_p, rnday_p, dramp_p, a00_p, b00_p, c00_p,
 10899:                &   h0_p, cori_p, ntif_p, nbfr_p, myProc_p, screenUnit_p, nolibf_p,
 10900:                &   nwp_p, tau0_p, cf_p, eslm_p, nstae_p, nstav_p, nstam_p, neta_p,
 10901:                &   nabout_p, nscreen_p,
 10902:                &   nfen_p,iden_p, islip_p, kp_p, z0s_p, z0b_p, theta1_p, theta2_p,
 10903:                &   ievc_p, evmin_p, evcon_p, alp1_p, alp2_p, alp3_p, igc_p,nlsd_p,
 10904:                &   nvsd_p, nltd_p, nvtd_p, alp4_p, C3D_p, RUNID_p)
 10905:                 USE SIZES, ONLY : myproc
 10906:                 USE MESH, ONLY : X, Y, SLAM, SFEA, NM, DP, ICS,
 10907:                &   SLAM0, SFEA0, AGRID
 10908:                 USE BOUNDARIES, ONLY : NBOU, NVEL, NOPE, NBVV, NVDLL, NBDV, NVELL,
 10909:                &   IBTYPE, IBTYPEE, NETA
 10910:                 USE VERSION, ONLY : FileFmtRev, FileFmtMinor, FileFmtMajor
 10911:                 USE ADC_CONSTANTS, ONLY: G, RAD2DEG
 10912:                 USE GLOBAL, ONLY : base_date, SNAMLEN, NODECODE,
 10913:                &   NP_G, NE_G, im, iestp, nscoue, ivstp, nscouv,
 10914:                &   icstp, nscouc, ipstp, iwstp, nscoum, igep, nscouge, igvp,
 10915:                &   nscougv, igcp, nscougc, igpp, igwp, nscougw,
 10916:                &   RUNDES, title, institution, source, history,
 10917:                &   references, comments, host, convention, contact, dtdp, ihot,
 10918:                &   nolifa, nolica, nolicat, ncor, ntip, nws, nramp, statim,
 10919:                &   reftim, rnday, dramp, h0, cori, ntif, nbfr,
 10920:                &   screenUnit, nabout, nscreen, C3D, runid
 10921:                 USE GLOBAL_3DVS, ONLY :
 10922:                &   nfen, n3dsd, i3dsdrec, n3dsv, i3dsvrec,
 10923:                &   n3dst, i3dstrec, n3dgd, i3dgdrec, n3dgv, i3dgvrec,
 10924:                &   n3dgt, i3dgtrec,
 10925:                &   iden, islip, kp, z0s, z0b, theta1, theta2,
 10926:                &   ievc, evmin, evcon, alp1, alp2, alp3, igc, nlsd, nvsd, nltd,
 10927:                &   nvtd, alp4
 10928:                 USE GWCE, ONLY : a00, b00, c00
 10929:                 USE NodalAttributes, ONLY : nolibf, nwp, tau0, cf, eslm
 10930:                 IMPLICIT NONE
 10931:           
 10932:           !     Declare the argument variables coming in from adcprep.
 10933:                 CHARACTER(80), intent(in) :: base_date_p
 10934:                 INTEGER, intent(in) :: NE_G_p
 10935:                 INTEGER, intent(in) :: NBOU_p
 10936:                 INTEGER, intent(in) :: NVEL_p
 10937:                 INTEGER, intent(in) :: NOPE_p
 10938:                 INTEGER, intent(in) :: NP_G_p
 10939:                 REAL(8), intent(in) :: SLAM0_p
 10940:                 REAL(8), intent(in) :: SFEA0_p
 10941:                 INTEGER, intent(in) :: NBVV_p(:,:)
 10942:                 INTEGER, intent(in) :: NVDLL_p(:)
 10943:                 INTEGER, intent(in) :: NBDV_p(:,:)
 10944:                 INTEGER, intent(in) :: NVELL_p(:)
 10945:                 REAL(8), intent(in) :: X_p(:)
 10946:                 REAL(8), intent(in) :: Y_p(:)
 10947:                 INTEGER, intent(in) :: IBTYPE_p(:)
 10948:                 INTEGER, intent(in) :: IBTYPEE_p(:)
 10949:                 REAL(8), intent(in) :: SLAM_p(:)
 10950:                 REAL(8), intent(in) :: SFEA_p(:)
 10951:                 INTEGER, intent(in) :: NODECODE_p(:)
 10952:                 REAL(8), intent(in) :: G_p
 10953:                 INTEGER, intent(in) :: FileFmtRev_p
 10954:                 INTEGER, intent(in) :: FileFmtMinor_p
 10955:                 INTEGER, intent(in) :: FileFmtMajor_p
 10956:                 INTEGER, intent(in) :: im_p
 10957:                 INTEGER, intent(in) :: iestp_p
 10958:                 INTEGER, intent(in) :: nscoue_p
 10959:                 INTEGER, intent(in) :: ivstp_p
 10960:                 INTEGER, intent(in) :: nscouv_p
 10961:                 INTEGER, intent(in) :: icstp_p
 10962:                 INTEGER, intent(in) :: nscouc_p
 10963:                 INTEGER, intent(in) :: ipstp_p
 10964:                 INTEGER, intent(in) :: iwstp_p
 10965:                 INTEGER, intent(in) :: nscoum_p
 10966:                 INTEGER, intent(in) :: igep_p
 10967:                 INTEGER, intent(in) :: nscouge_p
 10968:                 INTEGER, intent(in) :: igvp_p
 10969:                 INTEGER, intent(in) :: nscougv_p
 10970:                 INTEGER, intent(in) :: igcp_p
 10971:                 INTEGER, intent(in) :: nscougc_p
 10972:                 INTEGER, intent(in) :: igpp_p
 10973:                 INTEGER, intent(in) :: igwp_p
 10974:                 INTEGER, intent(in) :: nscougw_p
 10975:                 INTEGER, intent(in) :: NM_p(:,:)
 10976:                 REAL(8), intent(in) :: DP_p(:)
 10977:                 CHARACTER(80), intent(in) :: RUNDES_p
 10978:                 CHARACTER(80), intent(in) :: RUNID_p
 10979:                 CHARACTER(80), intent(in) :: AGRID_p
 10980:                 CHARACTER(80), intent(in) :: title_p
 10981:                 CHARACTER(80), intent(in) :: institution_p
 10982:                 CHARACTER(80), intent(in) :: source_p
 10983:                 CHARACTER(80), intent(in) :: history_p
 10984:                 CHARACTER(80), intent(in) :: references_p
 10985:                 CHARACTER(80), intent(in) :: comments_p
 10986:                 CHARACTER(80), intent(in) :: host_p
 10987:                 CHARACTER(80), intent(in) :: convention_p
 10988:                 CHARACTER(80), intent(in) :: contact_p
 10989:                 REAL(8), intent(in) :: dtdp_p
 10990:                 INTEGER, intent(in) :: ihot_p
 10991:                 INTEGER, intent(in) :: ics_p
 10992:                 INTEGER, intent(in) :: nolifa_p
 10993:                 INTEGER, intent(in) :: nolica_p
 10994:                 INTEGER, intent(in) :: nolicat_p
 10995:                 INTEGER, intent(in) :: ncor_p
 10996:                 INTEGER, intent(in) :: ntip_p
 10997:                 INTEGER, intent(in) :: nws_p
 10998:                 INTEGER, intent(in) :: nramp_p
 10999:                 REAL(8), intent(in) :: statim_p
 11000:                 REAL(8), intent(in) :: reftim_p
 11001:                 REAL(8), intent(in) :: rnday_p
 11002:                 REAL(8), intent(in) :: dramp_p
 11003:                 REAL(8), intent(in) :: a00_p
 11004:                 REAL(8), intent(in) :: b00_p
 11005:                 REAL(8), intent(in) :: c00_p
 11006:                 REAL(8), intent(in) :: h0_p
 11007:                 REAL(8), intent(in) :: cori_p
 11008:                 INTEGER, intent(in) :: ntif_p
 11009:                 INTEGER, intent(in) :: nbfr_p
 11010:                 INTEGER, intent(in) :: myProc_p
 11011:                 INTEGER, intent(in) :: screenUnit_p
 11012:                 INTEGER, intent(in) :: nolibf_p
 11013:                 INTEGER, intent(in) :: nwp_p
 11014:                 REAL(8), intent(in) :: tau0_p
 11015:                 REAL(8), intent(in) :: cf_p
 11016:                 REAL(8), intent(in) :: eslm_p
 11017:                 INTEGER, intent(in) :: nstae_p
 11018:                 INTEGER, intent(in) :: nstav_p
 11019:                 INTEGER, intent(in) :: nstam_p
 11020:                 INTEGER, intent(in) :: neta_p
 11021:                 INTEGER, intent(in) :: nabout_p
 11022:                 INTEGER, intent(in) :: nscreen_p
 11023:           
 11024:                 INTEGER, intent(in) :: nfen_p
 11025:                 INTEGER, intent(in) :: iden_p
 11026:                 INTEGER, intent(in) :: islip_p
 11027:                 REAL(8), intent(in) :: kp_p
 11028:                 REAL(8), intent(in) :: z0s_p
 11029:                 REAL(8), intent(in) :: z0b_p
 11030:                 REAL(8), intent(in) :: theta1_p
 11031:                 REAL(8), intent(in) :: theta2_p
 11032:                 INTEGER, intent(in) :: ievc_p
 11033:                 REAL(8), intent(in) :: evmin_p
 11034:                 REAL(8), intent(in) :: evcon_p
 11035:                 REAL(8), intent(in) :: alp1_p
 11036:                 REAL(8), intent(in) :: alp2_p
 11037:                 REAL(8), intent(in) :: alp3_p
 11038:                 INTEGER, intent(in) :: igc_p
 11039:                 REAL(8), intent(in) :: nlsd_p
 11040:                 REAL(8), intent(in) :: nvsd_p
 11041:                 REAL(8), intent(in) :: nltd_p
 11042:                 REAL(8), intent(in) :: nvtd_p
 11043:                 REAL(8), intent(in) :: alp4_p
 11044:                 LOGICAL, intent(in) :: C3D_p
 11045:           
 11046:                 call setMessageSource("setADCIRCParameters")
 11047:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 11048:                 call allMessage(DEBUG,"Enter.")
 11049:           #endif
 11050:           
 11051: +======>        base_date = base_date_p
 11052:                 NE_G = NE_G_p
 11053:                 NBOU = NBOU_p
 11054:                 NVEL = NVEL_p
 11055:                 NOPE = NOPE_p
 11056:                 NP_G = NP_G_p
 11057:                 SLAM0 = SLAM0_p
 11058:                 SFEA0 = SFEA0_p
 11059:                 ALLOCATE(NBVV(NBOU_p,0:NVEL_p))
 11060: U======>        NBVV = NBVV_p
 11061:                 ALLOCATE(NVDLL(NOPE_p))
 11062: V======>        NVDLL = NVDLL_p
 11063:                 ALLOCATE(NBDV(NOPE_p,NETA_p))
 11064: U======>        NBDV = NBDV_p
 11065:                 ALLOCATE(NVELL(NBOU_p))
 11066: V======>        NVELL = NVELL_p
 11067:                 ALLOCATE(X(NP_G_p))
 11068: V======>        X = X_p
 11069:                 ALLOCATE(Y(NP_G_p))
 11070: V======>        Y = Y_p
 11071:                 ALLOCATE(IBTYPEE(NOPE_p))
 11072: V======>        IBTYPEE = IBTYPEE_p
 11073:                 ALLOCATE(IBTYPE(NBOU_p))
 11074: V======>        IBTYPE = IBTYPE_p
 11075:                 ALLOCATE(SLAM(NP_G_p))
 11076: V======>        SLAM = SLAM_p
 11077:                 ALLOCATE(SFEA(NP_G_p))
 11078: V======>        SFEA = SFEA_p
 11079:                 ALLOCATE(NODECODE(NP_G_p))
 11080: V======>        NODECODE = NODECODE_p
 11081:                 G = G_p
 11082:                 FileFmtRev = FileFmtRev_p
 11083:                 FileFmtMinor = FileFmtMinor_p
 11084:                 FileFmtMajor = FileFmtMajor_p
 11085:                 im = im_p
 11086:                 iestp = iestp_p
 11087:                 nscoue = nscoue_p
 11088:                 ivstp = ivstp_p
 11089:                 nscouv = nscouv_p
 11090:                 icstp = icstp_p
 11091:                 nscouc = nscouc_p
 11092:                 ipstp = ipstp_p
 11093:                 iwstp = iwstp_p
 11094:                 nscoum = nscoum_p
 11095:                 igep = igep_p
 11096:                 nscouge = nscouge_p
 11097:                 igvp = igvp_p
 11098:                 nscougv = nscougv_p
 11099:                 igcp = igcp_p
 11100:                 nscougc = nscougc_p
 11101:                 igpp = igpp_p
 11102:                 igwp = igwp_p
 11103:                 nscougw = nscougw_p
 11104:                 ALLOCATE(NM(NE_G_p,3))
 11105: U======>        NM = NM_p
 11106:                 ALLOCATE(DP(NP_G_p))
 11107: V------>        DP = DP_p
 11108: +------>        RUNDES = RUNDES_p
 11109: |               RUNID = RUNID_p
 11110: |               AGRID = AGRID_p
 11111: |               title = title_p
 11112: |               institution = institution_p
 11113: |               source = source_p
 11114: |               history = history_p
 11115: |               references = references_p
 11116: |               comments = comments_p
 11117: +======         host = host_p
 11118: +======>        convention = convention_p
 11119: +======         contact = contact_p
 11120:                 dtdp = dtdp_p
 11121:                 ihot = ihot_p
 11122:                 ics = ics_p
 11123:                 nolifa = nolifa_p
 11124:                 nolica = nolica_p
 11125:                 nolicat = nolicat_p
 11126:                 ncor = ncor_p
 11127:                 ntip = ntip_p
 11128:                 nws = nws_p
 11129:                 nramp = nramp_p
 11130:                 statim = statim_p
 11131:                 reftim = reftim_p
 11132:                 rnday = rnday_p
 11133:                 dramp = dramp_p
 11134:                 a00 = a00_p
 11135:                 b00 = b00_p
 11136:                 c00 =  c00_p
 11137:                 h0 = h0_p
 11138:                 cori = cori_p
 11139:                 ntif = ntif_p
 11140:                 nbfr = nbfr_p
 11141:                 myProc = myProc_p
 11142:                 screenUnit = screenUnit_p
 11143:                 nolibf = nolibf_p
 11144:                 nwp = nwp_p
 11145:                 tau0 = tau0_p
 11146:                 cf = cf_p
 11147:                 eslm = eslm_p
 11148:                 neta = neta_p
 11149:                 nabout = nabout_p
 11150:                 nscreen = nscreen_p
 11151:           
 11152:                 nfen = nfen_p
 11153:                 iden = iden_p
 11154:                 islip = islip_p
 11155:                 kp = kp_p
 11156:                 z0s = z0s_p
 11157:                 z0b = z0b_p
 11158:                 theta1 = theta1_p
 11159:                 theta2 = theta2_p
 11160:                 ievc = ievc_p
 11161:                 evmin = evmin_p
 11162:                 evcon = evcon_p
 11163:                 alp1 = alp1_p
 11164:                 alp2 = alp2_p
 11165:                 alp3 = alp3_p
 11166:                 igc = igc_p
 11167:                 nlsd = nlsd_p
 11168:                 nvsd = nvsd_p
 11169:                 nltd = nltd_p
 11170:                 nvtd = nvtd_p
 11171:                 alp4 = alp4_p
 11172:                 C3D = C3D_p
 11173:           
 11174:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 11175:                 call allMessage(DEBUG,"Return.")
 11176:           #endif
 11177:                 call unsetMessageSource()
 11178:           C-----------------------------------------------------------------------
 11179:                 END SUBROUTINE setADCIRCParameters


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETADCIRCPARAMETERS
INLINE LIST

  ROOT: NETCDFIO::SETADCIRCPARAMETERS (netcdfio.F:10885)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:11046)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:11177)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETADCIRCPARAMETERS
VECTORIZATION LIST

  NOTE: The number of operation does not include the instruction
        for register spill and restore.

  LOOP BEGIN: (netcdfio.F:11051)
    <Unvectorized loop.>
    *** Unvectorizable data type. : BASE_DATE_P (netcdfio.F:11051)
    *** Unvectorizable data type. : BASE_DATE (netcdfio.F:11051)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11060)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:11060)

    LOOP BEGIN: (netcdfio.F:11060)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:11060)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11060)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11060)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11060)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:11060)

    LOOP BEGIN: (netcdfio.F:11060)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11060)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:11060)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11062)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11062)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11062)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11064)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:11064)

    LOOP BEGIN: (netcdfio.F:11064)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:11064)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11064)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11064)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11064)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:11064)

    LOOP BEGIN: (netcdfio.F:11064)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11064)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:11064)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11066)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11066)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11066)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11068)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11068)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11068)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11070)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11070)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11070)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11072)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11072)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11072)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11074)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11074)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11074)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11076)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11076)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11076)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11078)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11078)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11078)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11080)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11080)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11080)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11105)
    <Unvectorized loop.>
    **  Copied loop. : FOR UNROLLING (netcdfio.F:11105)

    LOOP BEGIN: (netcdfio.F:11105)
      <Vectorized loop.>
      **  Copied loop. : FOR UNROLLING (netcdfio.F:11105)
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11105)
      *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11105)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11105)
    <Unvectorized loop.>
    **  Outer loop unrolled loop. : THE UNROLL TIME IS 4. (netcdfio.F:11105)

    LOOP BEGIN: (netcdfio.F:11105)
      <Vectorized loop.>
      *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11105)
      *** The number of VLOAD, VSTORE. :  4,  4. (netcdfio.F:11105)
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11107)
    <Vectorized loop.>
    *** The number of VGT,   VSC.    :  0,  0. (netcdfio.F:11107)
    *** The number of VLOAD, VSTORE. :  1,  1. (netcdfio.F:11107)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11108)
    <Unvectorized loop.>
    **  Fused loop. (netcdfio.F:11108)
    *** Unvectorizable data type. : RUNDES_P (netcdfio.F:11108)
    *** Unvectorizable data type. : RUNDES (netcdfio.F:11108)
    *** Unvectorizable data type. : RUNID_P (netcdfio.F:11108)
    *** Unvectorizable data type. : RUNID (netcdfio.F:11108)
    *** Unvectorizable data type. : AGRID_P (netcdfio.F:11108)
    *** Unvectorizable data type. : AGRID (netcdfio.F:11108)
    *** Unvectorizable data type. : TITLE_P (netcdfio.F:11108)
    *** Unvectorizable data type. : TITLE (netcdfio.F:11108)
    *** Unvectorizable data type. : INSTITUTION_P (netcdfio.F:11108)
    *** Unvectorizable data type. : INSTITUTION (netcdfio.F:11108)
    *** Unvectorizable data type. : SOURCE_P (netcdfio.F:11108)
    *** Unvectorizable data type. : SOURCE (netcdfio.F:11108)
    *** Unvectorizable data type. : HISTORY_P (netcdfio.F:11108)
    *** Unvectorizable data type. : HISTORY (netcdfio.F:11108)
    *** Unvectorizable data type. : REFERENCES_P (netcdfio.F:11108)
    *** Unvectorizable data type. : REFERENCES (netcdfio.F:11108)
    *** Unvectorizable data type. : COMMENTS_P (netcdfio.F:11108)
    *** Unvectorizable data type. : COMMENTS (netcdfio.F:11108)
    *** Unvectorizable data type. : HOST_P (netcdfio.F:11108)
    *** Unvectorizable data type. : HOST (netcdfio.F:11108)
  LOOP END

  LOOP BEGIN: (netcdfio.F:11118)
    <Unvectorized loop.>
    **  Fused loop. (netcdfio.F:11118)
    *** Unvectorizable data type. : CONVENTION_P (netcdfio.F:11118)
    *** Unvectorizable data type. : CONVENTION (netcdfio.F:11118)
    *** Unvectorizable data type. : CONTACT_P (netcdfio.F:11118)
    *** Unvectorizable data type. : CONTACT (netcdfio.F:11118)
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::SETADCIRCPARAMETERS
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 61 [s0-s12 s15-s16 s18-s63]
      Vector registers         : 25 [v39-v63]
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 3008 bytes
      Register spill area      : 1104 bytes
      Parameter area           :   32 bytes
      Register save area       :  176 bytes
      User data area           : 1696 bytes
      Others                   :    0 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.

  LOOP BEGIN: (netcdfio.F:11051)
    *** Estimated execution cycle                       : 7
  LOOP END

  LOOP BEGIN: (netcdfio.F:11060)
    *** Estimated execution cycle                       : 42
    *** The number of SCALAR REGISTER TRANSFER          : 13

    LOOP BEGIN: (netcdfio.F:11060)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11060)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 17

    LOOP BEGIN: (netcdfio.F:11060)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11062)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11064)
    *** Estimated execution cycle                       : 42
    *** The number of SCALAR REGISTER TRANSFER          : 13

    LOOP BEGIN: (netcdfio.F:11064)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11064)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 17

    LOOP BEGIN: (netcdfio.F:11064)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11066)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11068)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11070)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11072)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11074)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11076)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11078)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11080)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11105)
    *** Estimated execution cycle                       : 42
    *** The number of SCALAR REGISTER TRANSFER          : 13

    LOOP BEGIN: (netcdfio.F:11105)
      *** Estimated execution cycle                     : 63
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11105)
    *** Estimated execution cycle                       : 57
    *** The number of SCALAR REGISTER TRANSFER          : 17

    LOOP BEGIN: (netcdfio.F:11105)
      *** Estimated execution cycle                     : 160
    LOOP END
  LOOP END

  LOOP BEGIN: (netcdfio.F:11107)
    *** Estimated execution cycle                       : 63
  LOOP END

  LOOP BEGIN: (netcdfio.F:11108)
    *** Estimated execution cycle                       : 52
  LOOP END

  LOOP BEGIN: (netcdfio.F:11118)
    *** Estimated execution cycle                       : 12
  LOOP END


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::FREENETCDFCOORD
DIAGNOSTIC LIST

 LINE              DIAGNOSTIC MESSAGE

 11191: inl(1212): Source for routine not found.: GLOBAL::SETMESSAGESOURCE
 11213: inl(1212): Source for routine not found.: GLOBAL::UNSETMESSAGESOURCE


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::FREENETCDFCOORD
FORMAT LIST

 Loop Mark                              Line Mark
 ---------                              ---------
 C - Conditionally Vectorized           C - Vector Scatter
 P - Parallelized                       F - Fused-multiply-add
 S - Partially Vectorized               G - Vector Gather
 U - Unrolled                           I - Inlined
 V - Vectorized                         M - Vector Matrix Multiply
 W - Collapsed and Vectorized           R - Retain
 Y - Parallelized and Vectorized        V - Vreg
 X - Interchanged and Vectorized        
 + - Not Vectorized                     
 * - Expanded                           

 LINE   LOOP      STATEMENT

 11188:                 SUBROUTINE freeNetCDFCoord()
 11189:                 IMPLICIT NONE
 11190:           C
 11191:                 call setMessageSource("freeNetCDFCoord.")
 11192:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 11193:                 call allMessage(DEBUG,"Enter.")
 11194:           #endif
 11195:           C
 11196:                 IF (adcircMesh%initialized.eqv..true.) THEN
 11197:                    DEALLOCATE(adcircMesh%xnc)
 11198:                    DEALLOCATE(adcircMesh%ync)
 11199:                    DEALLOCATE(adcircMesh%nvdllnc)
 11200:                    DEALLOCATE(adcircMesh%ibtypeenc)
 11201:                    DEALLOCATE(adcircMesh%ibtypenc)
 11202:                    DEALLOCATE(adcircMesh%nvellnc)
 11203:                    DEALLOCATE(adcircMesh%nbdvnc)
 11204:                    DEALLOCATE(adcircMesh%nbvvnc)
 11205:                    DEALLOCATE(adcircMesh%ibconnnc)
 11206:                    DEALLOCATE(adcircMesh%element)
 11207:                    DEALLOCATE(adcircMesh%nmnc)
 11208:                    adcircMesh%initialized = .false.
 11209:                 ENDIF
 11210:           #if defined(NETCDF_TRACE) || defined(ALL_TRACE)
 11211:                 call allMessage(DEBUG,"Return.")
 11212:           #endif
 11213:                 call unsetMessageSource()
 11214:           C-----------------------------------------------------------------------
 11215:                 END SUBROUTINE freeNetCDFCoord


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::FREENETCDFCOORD
INLINE LIST

  ROOT: NETCDFIO::FREENETCDFCOORD (netcdfio.F:11188)
  -> NOINLINE: GLOBAL::SETMESSAGESOURCE (netcdfio.F:11191)
     *** Source for routine not found.
  -> NOINLINE: GLOBAL::UNSETMESSAGESOURCE (netcdfio.F:11213)
     *** Source for routine not found.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::FREENETCDFCOORD
VECTORIZATION LIST

  No message.


NEC Fortran Compiler (5.2.0) for Vector Engine   Mon Jun 10 13:13:59 2024
FILE NAME: /S/home01/G6012/d0954/DATA/model_run/adcirc_src/src/netcdfio.F

PROCEDURE NAME: NETCDFIO::FREENETCDFCOORD
CODE GENERATION LIST

  Hardware registers
    Reserved                   : 10 [sl fp lr sp s12 s13 tp got plt s17]
    Callee-saved               : 16 [s18-s33]
    Assigned
      Scalar registers         : 17 [s0-s2 s8-s12 s15-s16 s18 s23-s24 s60-s63]
      Vector registers         :  0
      Vector mask registers    :  0
      VREG directive           :  0

  Routine stack
    Total size                 : 208 bytes
      Register spill area      :   0 bytes
      Parameter area           :  24 bytes
      Register save area       : 176 bytes
      User data area           :   0 bytes
      Others                   :   8 bytes

    Note: Total size of Routine stack does not include
          the size extended by alloca() and so on.


